/******/!function(t){/******/
/******/
// The require function
/******/
function e(r){/******/
/******/
// Check if module is in cache
/******/
if(n[r])/******/
return n[r].exports;/******/
/******/
// Create a new module (and put it into the cache)
/******/
var i=n[r]={/******/
exports:{},/******/
id:r,/******/
loaded:!1};/******/
/******/
// Return the exports of the module
/******/
/******/
/******/
// Execute the module function
/******/
/******/
/******/
// Flag the module as loaded
/******/
return t[r].call(i.exports,i,i.exports,e),i.loaded=!0,i.exports}// webpackBootstrap
/******/
// The module cache
/******/
var n={};/******/
/******/
// Load entry module and return exports
/******/
/******/
/******/
/******/
// expose the modules object (__webpack_modules__)
/******/
/******/
/******/
// expose the module cache
/******/
/******/
/******/
// __webpack_public_path__
/******/
return e.m=t,e.c=n,e.p="",e(0)}([/* 0 */
/***/
function(t,e,n){t.exports=n(1)},/* 1 */
/***/
function(t,e,n){"use strict";n(2);n(4),n(7);var r=n(9),i=n(10),o=n(11),a=n(12),u=n(14),s=n(16),c=n(18),l=n(21);n(23),angular.module("app",["ngComponentRouter"]).value("$routerRootComponent","app").config(["$locationProvider",r.locationConfig]).filter("weatherIconFilter",o.WeatherIconFilter).service("weathersService",i.WeathersService).component("home",a.home()).component("about",u.about()).component("weathers",s.weathers()).component("weatherList",c.weatherList()).component("weatherDetail",l.weatherDetail()).component("app",{template:n(27),$routeConfig:[{path:"/",component:"home",name:"Home"},{path:"/about",component:"about",name:"About"},{path:"/weathers/...",component:"weathers",name:"Weathers"}]})},/* 2 */
/***/
function(t,e,n){var r;/* WEBPACK VAR INJECTION */(function(t,i){(function(){/*--------------------------------------------------------------------------*/
/**
	   * Adds the key-value `pair` to `map`.
	   *
	   * @private
	   * @param {Object} map The map to modify.
	   * @param {Array} pair The key-value pair to add.
	   * @returns {Object} Returns `map`.
	   */
function o(t,e){
// Don't return `Map#set` because it doesn't return the map instance in IE 11.
return t.set(e[0],e[1]),t}/**
	   * Adds `value` to `set`.
	   *
	   * @private
	   * @param {Object} set The set to modify.
	   * @param {*} value The value to add.
	   * @returns {Object} Returns `set`.
	   */
function a(t,e){return t.add(e),t}/**
	   * A faster alternative to `Function#apply`, this function invokes `func`
	   * with the `this` binding of `thisArg` and the arguments of `args`.
	   *
	   * @private
	   * @param {Function} func The function to invoke.
	   * @param {*} thisArg The `this` binding of `func`.
	   * @param {Array} args The arguments to invoke `func` with.
	   * @returns {*} Returns the result of `func`.
	   */
function u(t,e,n){var r=n.length;switch(r){case 0:return t.call(e);case 1:return t.call(e,n[0]);case 2:return t.call(e,n[0],n[1]);case 3:return t.call(e,n[0],n[1],n[2])}return t.apply(e,n)}/**
	   * A specialized version of `baseAggregator` for arrays.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} setter The function to set `accumulator` values.
	   * @param {Function} iteratee The iteratee to transform keys.
	   * @param {Object} accumulator The initial aggregated object.
	   * @returns {Function} Returns `accumulator`.
	   */
function s(t,e,n,r){for(var i=-1,o=t.length;++i<o;){var a=t[i];e(r,a,n(a),t)}return r}/**
	   * A specialized version of `_.forEach` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns `array`.
	   */
function c(t,e){for(var n=-1,r=t.length;++n<r&&e(t[n],n,t)!==!1;);return t}/**
	   * A specialized version of `_.forEachRight` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns `array`.
	   */
function l(t,e){for(var n=t.length;n--&&e(t[n],n,t)!==!1;);return t}/**
	   * A specialized version of `_.every` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {boolean} Returns `true` if all elements pass the predicate check,
	   *  else `false`.
	   */
function f(t,e){for(var n=-1,r=t.length;++n<r;)if(!e(t[n],n,t))return!1;return!0}/**
	   * A specialized version of `_.filter` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {Array} Returns the new filtered array.
	   */
function h(t,e){for(var n=-1,r=t.length,i=0,o=[];++n<r;){var a=t[n];e(a,n,t)&&(o[i++]=a)}return o}/**
	   * A specialized version of `_.includes` for arrays without support for
	   * specifying an index to search from.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {*} target The value to search for.
	   * @returns {boolean} Returns `true` if `target` is found, else `false`.
	   */
function p(t,e){return!!t.length&&x(t,e,0)>-1}/**
	   * This function is like `arrayIncludes` except that it accepts a comparator.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {*} target The value to search for.
	   * @param {Function} comparator The comparator invoked per element.
	   * @returns {boolean} Returns `true` if `target` is found, else `false`.
	   */
function d(t,e,n){for(var r=-1,i=t.length;++r<i;)if(n(e,t[r]))return!0;return!1}/**
	   * A specialized version of `_.map` for arrays without support for iteratee
	   * shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns the new mapped array.
	   */
function v(t,e){for(var n=-1,r=t.length,i=Array(r);++n<r;)i[n]=e(t[n],n,t);return i}/**
	   * Appends the elements of `values` to `array`.
	   *
	   * @private
	   * @param {Array} array The array to modify.
	   * @param {Array} values The values to append.
	   * @returns {Array} Returns `array`.
	   */
function g(t,e){for(var n=-1,r=e.length,i=t.length;++n<r;)t[i+n]=e[n];return t}/**
	   * A specialized version of `_.reduce` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} [accumulator] The initial value.
	   * @param {boolean} [initAccum] Specify using the first element of `array` as
	   *  the initial value.
	   * @returns {*} Returns the accumulated value.
	   */
function m(t,e,n,r){var i=-1,o=t.length;for(r&&o&&(n=t[++i]);++i<o;)n=e(n,t[i],i,t);return n}/**
	   * A specialized version of `_.reduceRight` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} [accumulator] The initial value.
	   * @param {boolean} [initAccum] Specify using the last element of `array` as
	   *  the initial value.
	   * @returns {*} Returns the accumulated value.
	   */
function y(t,e,n,r){var i=t.length;for(r&&i&&(n=t[--i]);i--;)n=e(n,t[i],i,t);return n}/**
	   * A specialized version of `_.some` for arrays without support for iteratee
	   * shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {boolean} Returns `true` if any element passes the predicate check,
	   *  else `false`.
	   */
function $(t,e){for(var n=-1,r=t.length;++n<r;)if(e(t[n],n,t))return!0;return!1}/**
	   * The base implementation of methods like `_.find` and `_.findKey`, without
	   * support for iteratee shorthands, which iterates over `collection` using
	   * `eachFunc`.
	   *
	   * @private
	   * @param {Array|Object} collection The collection to search.
	   * @param {Function} predicate The function invoked per iteration.
	   * @param {Function} eachFunc The function to iterate over `collection`.
	   * @param {boolean} [retKey] Specify returning the key of the found element
	   *  instead of the element itself.
	   * @returns {*} Returns the found element or its key, else `undefined`.
	   */
function b(t,e,n,r){var i;return n(t,function(t,n,o){if(e(t,n,o))return i=r?n:t,!1}),i}/**
	   * The base implementation of `_.findIndex` and `_.findLastIndex` without
	   * support for iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {Function} predicate The function invoked per iteration.
	   * @param {boolean} [fromRight] Specify iterating from right to left.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
function w(t,e,n){for(var r=t.length,i=n?r:-1;n?i--:++i<r;)if(e(t[i],i,t))return i;return-1}/**
	   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
function x(t,e,n){if(e!==e)return U(t,n);for(var r=n-1,i=t.length;++r<i;)if(t[r]===e)return r;return-1}/**
	   * This function is like `baseIndexOf` except that it accepts a comparator.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @param {Function} comparator The comparator invoked per element.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
function _(t,e,n,r){for(var i=n-1,o=t.length;++i<o;)if(r(t[i],e))return i;return-1}/**
	   * The base implementation of `_.mean` and `_.meanBy` without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {number} Returns the mean.
	   */
function C(t,e){var n=t?t.length:0;return n?E(t,e)/n:St}/**
	   * The base implementation of `_.reduce` and `_.reduceRight`, without support
	   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
	   *
	   * @private
	   * @param {Array|Object} collection The collection to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} accumulator The initial value.
	   * @param {boolean} initAccum Specify using the first or last element of
	   *  `collection` as the initial value.
	   * @param {Function} eachFunc The function to iterate over `collection`.
	   * @returns {*} Returns the accumulated value.
	   */
function S(t,e,n,r,i){return i(t,function(t,i,o){n=r?(r=!1,t):e(n,t,i,o)}),n}/**
	   * The base implementation of `_.sortBy` which uses `comparer` to define the
	   * sort order of `array` and replaces criteria objects with their corresponding
	   * values.
	   *
	   * @private
	   * @param {Array} array The array to sort.
	   * @param {Function} comparer The function to define sort order.
	   * @returns {Array} Returns `array`.
	   */
function A(t,e){var n=t.length;for(t.sort(e);n--;)t[n]=t[n].value;return t}/**
	   * The base implementation of `_.sum` and `_.sumBy` without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {number} Returns the sum.
	   */
function E(t,e){for(var n,r=-1,i=t.length;++r<i;){var o=e(t[r]);o!==K&&(n=n===K?o:n+o)}return n}/**
	   * The base implementation of `_.times` without support for iteratee shorthands
	   * or max array length checks.
	   *
	   * @private
	   * @param {number} n The number of times to invoke `iteratee`.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns the array of results.
	   */
function k(t,e){for(var n=-1,r=Array(t);++n<t;)r[n]=e(n);return r}/**
	   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
	   * of key-value pairs for `object` corresponding to the property names of `props`.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @param {Array} props The property names to get values for.
	   * @returns {Object} Returns the key-value pairs.
	   */
function T(t,e){return v(e,function(e){return[e,t[e]]})}/**
	   * The base implementation of `_.unary` without support for storing wrapper metadata.
	   *
	   * @private
	   * @param {Function} func The function to cap arguments for.
	   * @returns {Function} Returns the new capped function.
	   */
function O(t){return function(e){return t(e)}}/**
	   * The base implementation of `_.values` and `_.valuesIn` which creates an
	   * array of `object` property values corresponding to the property names
	   * of `props`.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @param {Array} props The property names to get values for.
	   * @returns {Object} Returns the array of property values.
	   */
function R(t,e){return v(e,function(e){return t[e]})}/**
	   * Checks if a cache value for `key` exists.
	   *
	   * @private
	   * @param {Object} cache The cache to query.
	   * @param {string} key The key of the entry to check.
	   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	   */
function j(t,e){return t.has(e)}/**
	   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
	   * that is not found in the character symbols.
	   *
	   * @private
	   * @param {Array} strSymbols The string symbols to inspect.
	   * @param {Array} chrSymbols The character symbols to find.
	   * @returns {number} Returns the index of the first unmatched string symbol.
	   */
function N(t,e){for(var n=-1,r=t.length;++n<r&&x(e,t[n],0)>-1;);return n}/**
	   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
	   * that is not found in the character symbols.
	   *
	   * @private
	   * @param {Array} strSymbols The string symbols to inspect.
	   * @param {Array} chrSymbols The character symbols to find.
	   * @returns {number} Returns the index of the last unmatched string symbol.
	   */
function P(t,e){for(var n=t.length;n--&&x(e,t[n],0)>-1;);return n}/**
	   * Checks if `value` is a global object.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {null|Object} Returns `value` if it's a global object, else `null`.
	   */
function D(t){return t&&t.Object===Object?t:null}/**
	   * Gets the number of `placeholder` occurrences in `array`.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} placeholder The placeholder to search for.
	   * @returns {number} Returns the placeholder count.
	   */
function M(t,e){for(var n=t.length,r=0;n--;)t[n]===e&&r++;return r}/**
	   * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.
	   *
	   * @private
	   * @param {string} letter The matched letter to deburr.
	   * @returns {string} Returns the deburred letter.
	   */
function I(t){return kn[t]}/**
	   * Used by `_.escape` to convert characters to HTML entities.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
function L(t){return Tn[t]}/**
	   * Used by `_.template` to escape characters for inclusion in compiled string literals.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
function q(t){return"\\"+jn[t]}/**
	   * Gets the index at which the first occurrence of `NaN` is found in `array`.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {number} fromIndex The index to search from.
	   * @param {boolean} [fromRight] Specify iterating from right to left.
	   * @returns {number} Returns the index of the matched `NaN`, else `-1`.
	   */
function U(t,e,n){for(var r=t.length,i=e+(n?0:-1);n?i--:++i<r;){var o=t[i];if(o!==o)return i}return-1}/**
	   * Checks if `value` is a host object in IE < 9.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
	   */
function F(t){
// Many host objects are `Object` objects that can coerce to strings
// despite having improperly defined `toString` methods.
var e=!1;if(null!=t&&"function"!=typeof t.toString)try{e=!!(t+"")}catch(n){}return e}/**
	   * Converts `iterator` to an array.
	   *
	   * @private
	   * @param {Object} iterator The iterator to convert.
	   * @returns {Array} Returns the converted array.
	   */
function V(t){for(var e,n=[];!(e=t.next()).done;)n.push(e.value);return n}/**
	   * Converts `map` to its key-value pairs.
	   *
	   * @private
	   * @param {Object} map The map to convert.
	   * @returns {Array} Returns the key-value pairs.
	   */
function H(t){var e=-1,n=Array(t.size);return t.forEach(function(t,r){n[++e]=[r,t]}),n}/**
	   * Replaces all `placeholder` elements in `array` with an internal placeholder
	   * and returns an array of their indexes.
	   *
	   * @private
	   * @param {Array} array The array to modify.
	   * @param {*} placeholder The placeholder to replace.
	   * @returns {Array} Returns the new array of placeholder indexes.
	   */
function B(t,e){for(var n=-1,r=t.length,i=0,o=[];++n<r;){var a=t[n];a!==e&&a!==nt||(t[n]=nt,o[i++]=n)}return o}/**
	   * Converts `set` to an array of its values.
	   *
	   * @private
	   * @param {Object} set The set to convert.
	   * @returns {Array} Returns the values.
	   */
function W(t){var e=-1,n=Array(t.size);return t.forEach(function(t){n[++e]=t}),n}/**
	   * Converts `set` to its value-value pairs.
	   *
	   * @private
	   * @param {Object} set The set to convert.
	   * @returns {Array} Returns the value-value pairs.
	   */
function z(t){var e=-1,n=Array(t.size);return t.forEach(function(t){n[++e]=[t,t]}),n}/**
	   * Gets the number of symbols in `string`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {number} Returns the string size.
	   */
function G(t){if(!t||!xn.test(t))return t.length;for(var e=bn.lastIndex=0;bn.test(t);)e++;return e}/**
	   * Converts `string` to an array.
	   *
	   * @private
	   * @param {string} string The string to convert.
	   * @returns {Array} Returns the converted array.
	   */
function X(t){return t.match(bn)}/**
	   * Used by `_.unescape` to convert HTML entities to characters.
	   *
	   * @private
	   * @param {string} chr The matched character to unescape.
	   * @returns {string} Returns the unescaped character.
	   */
function J(t){return On[t]}/*--------------------------------------------------------------------------*/
/**
	   * Create a new pristine `lodash` function using the `context` object.
	   *
	   * @static
	   * @memberOf _
	   * @since 1.1.0
	   * @category Util
	   * @param {Object} [context=root] The context object.
	   * @returns {Function} Returns a new `lodash` function.
	   * @example
	   *
	   * _.mixin({ 'foo': _.constant('foo') });
	   *
	   * var lodash = _.runInContext();
	   * lodash.mixin({ 'bar': lodash.constant('bar') });
	   *
	   * _.isFunction(_.foo);
	   * // => true
	   * _.isFunction(_.bar);
	   * // => false
	   *
	   * lodash.isFunction(lodash.foo);
	   * // => false
	   * lodash.isFunction(lodash.bar);
	   * // => true
	   *
	   * // Use `context` to mock `Date#getTime` use in `_.now`.
	   * var mock = _.runInContext({
	   *   'Date': function() {
	   *     return { 'getTime': getTimeMock };
	   *   }
	   * });
	   *
	   * // Create a suped-up `defer` in Node.js.
	   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
	   */
function Y(t){/*------------------------------------------------------------------------*/
/**
	     * Creates a `lodash` object which wraps `value` to enable implicit method
	     * chain sequences. Methods that operate on and return arrays, collections,
	     * and functions can be chained together. Methods that retrieve a single value
	     * or may return a primitive value will automatically end the chain sequence
	     * and return the unwrapped value. Otherwise, the value must be unwrapped
	     * with `_#value`.
	     *
	     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
	     * enabled using `_.chain`.
	     *
	     * The execution of chained methods is lazy, that is, it's deferred until
	     * `_#value` is implicitly or explicitly called.
	     *
	     * Lazy evaluation allows several methods to support shortcut fusion.
	     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
	     * the creation of intermediate arrays and can greatly reduce the number of
	     * iteratee executions. Sections of a chain sequence qualify for shortcut
	     * fusion if the section is applied to an array of at least `200` elements
	     * and any iteratees accept only one argument. The heuristic for whether a
	     * section qualifies for shortcut fusion is subject to change.
	     *
	     * Chaining is supported in custom builds as long as the `_#value` method is
	     * directly or indirectly included in the build.
	     *
	     * In addition to lodash methods, wrappers have `Array` and `String` methods.
	     *
	     * The wrapper `Array` methods are:
	     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
	     *
	     * The wrapper `String` methods are:
	     * `replace` and `split`
	     *
	     * The wrapper methods that support shortcut fusion are:
	     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
	     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
	     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
	     *
	     * The chainable wrapper methods are:
	     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
	     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
	     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
	     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
	     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
	     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
	     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
	     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
	     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
	     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
	     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
	     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
	     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
	     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
	     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
	     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
	     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
	     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
	     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
	     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
	     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
	     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
	     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
	     * `zipObject`, `zipObjectDeep`, and `zipWith`
	     *
	     * The wrapper methods that are **not** chainable by default are:
	     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
	     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `deburr`, `divide`, `each`,
	     * `eachRight`, `endsWith`, `eq`, `escape`, `escapeRegExp`, `every`, `find`,
	     * `findIndex`, `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `first`,
	     * `floor`, `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`,
	     * `forOwnRight`, `get`, `gt`, `gte`, `has`, `hasIn`, `head`, `identity`,
	     * `includes`, `indexOf`, `inRange`, `invoke`, `isArguments`, `isArray`,
	     * `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`, `isBoolean`,
	     * `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`, `isEqualWith`,
	     * `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`, `isMap`,
	     * `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`, `isNumber`,
	     * `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`, `isSafeInteger`,
	     * `isSet`, `isString`, `isUndefined`, `isTypedArray`, `isWeakMap`, `isWeakSet`,
	     * `join`, `kebabCase`, `last`, `lastIndexOf`, `lowerCase`, `lowerFirst`,
	     * `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`, `min`, `minBy`, `multiply`,
	     * `noConflict`, `noop`, `now`, `nth`, `pad`, `padEnd`, `padStart`, `parseInt`,
	     * `pop`, `random`, `reduce`, `reduceRight`, `repeat`, `result`, `round`,
	     * `runInContext`, `sample`, `shift`, `size`, `snakeCase`, `some`, `sortedIndex`,
	     * `sortedIndexBy`, `sortedLastIndex`, `sortedLastIndexBy`, `startCase`,
	     * `startsWith`, `subtract`, `sum`, `sumBy`, `template`, `times`, `toFinite`,
	     * `toInteger`, `toJSON`, `toLength`, `toLower`, `toNumber`, `toSafeInteger`,
	     * `toString`, `toUpper`, `trim`, `trimEnd`, `trimStart`, `truncate`, `unescape`,
	     * `uniqueId`, `upperCase`, `upperFirst`, `value`, and `words`
	     *
	     * @name _
	     * @constructor
	     * @category Seq
	     * @param {*} value The value to wrap in a `lodash` instance.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var wrapped = _([1, 2, 3]);
	     *
	     * // Returns an unwrapped value.
	     * wrapped.reduce(_.add);
	     * // => 6
	     *
	     * // Returns a wrapped value.
	     * var squares = wrapped.map(square);
	     *
	     * _.isArray(squares);
	     * // => false
	     *
	     * _.isArray(squares.value());
	     * // => true
	     */
function e(t){if(vu(t)&&!af(t)&&!(t instanceof i)){if(t instanceof r)return t;if($c.call(t,"__wrapped__"))return uo(t)}return new r(t)}/**
	     * The function whose prototype chain sequence wrappers inherit from.
	     *
	     * @private
	     */
function n(){}/**
	     * The base constructor for creating `lodash` wrapper objects.
	     *
	     * @private
	     * @param {*} value The value to wrap.
	     * @param {boolean} [chainAll] Enable explicit method chain sequences.
	     */
function r(t,e){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!e,this.__index__=0,this.__values__=K}/*------------------------------------------------------------------------*/
/**
	     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
	     *
	     * @private
	     * @constructor
	     * @param {*} value The value to wrap.
	     */
function i(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=At,this.__views__=[]}/**
	     * Creates a clone of the lazy wrapper object.
	     *
	     * @private
	     * @name clone
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the cloned `LazyWrapper` object.
	     */
function D(){var t=new i(this.__wrapped__);return t.__actions__=ti(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=ti(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=ti(this.__views__),t}/**
	     * Reverses the direction of lazy iteration.
	     *
	     * @private
	     * @name reverse
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the new reversed `LazyWrapper` object.
	     */
function Pe(){if(this.__filtered__){var t=new i(this);t.__dir__=-1,t.__filtered__=!0}else t=this.clone(),t.__dir__*=-1;return t}/**
	     * Extracts the unwrapped value from its lazy wrapper.
	     *
	     * @private
	     * @name value
	     * @memberOf LazyWrapper
	     * @returns {*} Returns the unwrapped value.
	     */
function De(){var t=this.__wrapped__.value(),e=this.__dir__,n=af(t),r=e<0,i=n?t.length:0,o=qi(0,i,this.__views__),a=o.start,u=o.end,s=u-a,c=r?u:a-1,l=this.__iteratees__,f=l.length,h=0,p=Bc(s,this.__takeCount__);if(!n||i<Q||i==s&&p==s)return Dr(t,this.__actions__);var d=[];t:for(;s--&&h<p;){c+=e;for(var v=-1,g=t[c];++v<f;){var m=l[v],y=m.iteratee,$=m.type,b=y(g);if($==bt)g=b;else if(!b){if($==$t)continue t;break t}}d[h++]=g}return d}/*------------------------------------------------------------------------*/
/**
	     * Creates a hash object.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
function Me(t){var e=-1,n=t?t.length:0;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}/**
	     * Removes all key-value entries from the hash.
	     *
	     * @private
	     * @name clear
	     * @memberOf Hash
	     */
function Ie(){this.__data__=el?el(null):{}}/**
	     * Removes `key` and its value from the hash.
	     *
	     * @private
	     * @name delete
	     * @memberOf Hash
	     * @param {Object} hash The hash to modify.
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
function Le(t){return this.has(t)&&delete this.__data__[t]}/**
	     * Gets the hash value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf Hash
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
function qe(t){var e=this.__data__;if(el){var n=e[t];return n===et?K:n}return $c.call(e,t)?e[t]:K}/**
	     * Checks if a hash value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf Hash
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
function Ue(t){var e=this.__data__;return el?e[t]!==K:$c.call(e,t)}/**
	     * Sets the hash `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf Hash
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the hash instance.
	     */
function Fe(t,e){var n=this.__data__;return n[t]=el&&e===K?et:e,this}/*------------------------------------------------------------------------*/
/**
	     * Creates an list cache object.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
function Ve(t){var e=-1,n=t?t.length:0;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}/**
	     * Removes all key-value entries from the list cache.
	     *
	     * @private
	     * @name clear
	     * @memberOf ListCache
	     */
function He(){this.__data__=[]}/**
	     * Removes `key` and its value from the list cache.
	     *
	     * @private
	     * @name delete
	     * @memberOf ListCache
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
function Be(t){var e=this.__data__,n=pn(e,t);if(n<0)return!1;var r=e.length-1;return n==r?e.pop():Mc.call(e,n,1),!0}/**
	     * Gets the list cache value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf ListCache
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
function We(t){var e=this.__data__,n=pn(e,t);return n<0?K:e[n][1]}/**
	     * Checks if a list cache value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf ListCache
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
function ze(t){return pn(this.__data__,t)>-1}/**
	     * Sets the list cache `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf ListCache
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the list cache instance.
	     */
function Ge(t,e){var n=this.__data__,r=pn(n,t);return r<0?n.push([t,e]):n[r][1]=e,this}/*------------------------------------------------------------------------*/
/**
	     * Creates a map cache object to store key-value pairs.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
function Xe(t){var e=-1,n=t?t.length:0;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}/**
	     * Removes all key-value entries from the map.
	     *
	     * @private
	     * @name clear
	     * @memberOf MapCache
	     */
function Je(){this.__data__={hash:new Me,map:new(Kc||Ve),string:new Me}}/**
	     * Removes `key` and its value from the map.
	     *
	     * @private
	     * @name delete
	     * @memberOf MapCache
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
function Ye(t){return Ni(this,t)["delete"](t)}/**
	     * Gets the map value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf MapCache
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
function Ke(t){return Ni(this,t).get(t)}/**
	     * Checks if a map value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf MapCache
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
function Ze(t){return Ni(this,t).has(t)}/**
	     * Sets the map `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf MapCache
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the map cache instance.
	     */
function Qe(t,e){return Ni(this,t).set(t,e),this}/*------------------------------------------------------------------------*/
/**
	     *
	     * Creates an array cache object to store unique values.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [values] The values to cache.
	     */
function tn(t){var e=-1,n=t?t.length:0;for(this.__data__=new Xe;++e<n;)this.add(t[e])}/**
	     * Adds `value` to the array cache.
	     *
	     * @private
	     * @name add
	     * @memberOf SetCache
	     * @alias push
	     * @param {*} value The value to cache.
	     * @returns {Object} Returns the cache instance.
	     */
function en(t){return this.__data__.set(t,et),this}/**
	     * Checks if `value` is in the array cache.
	     *
	     * @private
	     * @name has
	     * @memberOf SetCache
	     * @param {*} value The value to search for.
	     * @returns {number} Returns `true` if `value` is found, else `false`.
	     */
function nn(t){return this.__data__.has(t)}/*------------------------------------------------------------------------*/
/**
	     * Creates a stack cache object to store key-value pairs.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
function rn(t){this.__data__=new Ve(t)}/**
	     * Removes all key-value entries from the stack.
	     *
	     * @private
	     * @name clear
	     * @memberOf Stack
	     */
function on(){this.__data__=new Ve}/**
	     * Removes `key` and its value from the stack.
	     *
	     * @private
	     * @name delete
	     * @memberOf Stack
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
function an(t){return this.__data__["delete"](t)}/**
	     * Gets the stack value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf Stack
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
function un(t){return this.__data__.get(t)}/**
	     * Checks if a stack value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf Stack
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
function sn(t){return this.__data__.has(t)}/**
	     * Sets the stack `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf Stack
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the stack cache instance.
	     */
function cn(t,e){var n=this.__data__;return n instanceof Ve&&n.__data__.length==Q&&(n=this.__data__=new Xe(n.__data__)),n.set(t,e),this}/*------------------------------------------------------------------------*/
/**
	     * Used by `_.defaults` to customize its `_.assignIn` use.
	     *
	     * @private
	     * @param {*} objValue The destination value.
	     * @param {*} srcValue The source value.
	     * @param {string} key The key of the property to assign.
	     * @param {Object} object The parent object of `objValue`.
	     * @returns {*} Returns the value to assign.
	     */
function ln(t,e,n,r){return t===K||Za(t,gc[n])&&!$c.call(r,n)?e:t}/**
	     * This function is like `assignValue` except that it doesn't assign
	     * `undefined` values.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {string} key The key of the property to assign.
	     * @param {*} value The value to assign.
	     */
function fn(t,e,n){(n===K||Za(t[e],n))&&("number"!=typeof e||n!==K||e in t)||(t[e]=n)}/**
	     * Assigns `value` to `key` of `object` if the existing value is not equivalent
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {string} key The key of the property to assign.
	     * @param {*} value The value to assign.
	     */
function hn(t,e,n){var r=t[e];$c.call(t,e)&&Za(r,n)&&(n!==K||e in t)||(t[e]=n)}/**
	     * Gets the index at which the `key` is found in `array` of key-value pairs.
	     *
	     * @private
	     * @param {Array} array The array to search.
	     * @param {*} key The key to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     */
function pn(t,e){for(var n=t.length;n--;)if(Za(t[n][0],e))return n;return-1}/**
	     * Aggregates elements of `collection` on `accumulator` with keys transformed
	     * by `iteratee` and values set by `setter`.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} setter The function to set `accumulator` values.
	     * @param {Function} iteratee The iteratee to transform keys.
	     * @param {Object} accumulator The initial aggregated object.
	     * @returns {Function} Returns `accumulator`.
	     */
function dn(t,e,n,r){return pl(t,function(t,i,o){e(r,t,n(t),o)}),r}/**
	     * The base implementation of `_.assign` without support for multiple sources
	     * or `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @returns {Object} Returns `object`.
	     */
function vn(t,e){return t&&ei(e,ts(e),t)}/**
	     * The base implementation of `_.at` without support for individual paths.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {string[]} paths The property paths of elements to pick.
	     * @returns {Array} Returns the picked elements.
	     */
function gn(t,e){for(var n=-1,r=null==t,i=e.length,o=Array(i);++n<i;)o[n]=r?K:Ku(t,e[n]);return o}/**
	     * The base implementation of `_.clamp` which doesn't coerce arguments to numbers.
	     *
	     * @private
	     * @param {number} number The number to clamp.
	     * @param {number} [lower] The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the clamped number.
	     */
function mn(t,e,n){return t===t&&(n!==K&&(t=t<=n?t:n),e!==K&&(t=t>=e?t:e)),t}/**
	     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
	     * traversed objects.
	     *
	     * @private
	     * @param {*} value The value to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @param {boolean} [isFull] Specify a clone including symbols.
	     * @param {Function} [customizer] The function to customize cloning.
	     * @param {string} [key] The key of `value`.
	     * @param {Object} [object] The parent object of `value`.
	     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
	     * @returns {*} Returns the cloned value.
	     */
function bn(t,e,n,r,i,o,a){var u;if(r&&(u=o?r(t,i,o,a):r(t)),u!==K)return u;if(!du(t))return t;var s=af(t);if(s){if(u=Fi(t),!e)return ti(t,u)}else{var l=Li(t),f=l==Pt||l==Dt;if(uf(t))return Vr(t,e);if(l==Lt||l==Tt||f&&!o){if(F(t))return o?t:{};if(u=Vi(f?{}:t),!e)return ni(t,vn(u,t))}else{if(!En[l])return o?t:{};u=Hi(t,l,bn,e)}}
// Check for circular references and return its corresponding clone.
a||(a=new rn);var h=a.get(t);if(h)return h;if(a.set(t,u),!s)var p=n?ki(t):ts(t);
// Recursively populate clone (susceptible to call stack limits).
return c(p||t,function(i,o){p&&(o=i,i=t[o]),hn(u,o,bn(i,e,n,r,o,t,a))}),u}/**
	     * The base implementation of `_.conforms` which doesn't clone `source`.
	     *
	     * @private
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {Function} Returns the new spec function.
	     */
function kn(t){var e=ts(t),n=e.length;return function(r){if(null==r)return!n;for(var i=n;i--;){var o=e[i],a=t[o],u=r[o];if(u===K&&!(o in Object(r))||!a(u))return!1}return!0}}/**
	     * The base implementation of `_.create` without support for assigning
	     * properties to the created object.
	     *
	     * @private
	     * @param {Object} prototype The object to inherit from.
	     * @returns {Object} Returns the new object.
	     */
function Tn(t){return du(t)?Nc(t):{}}/**
	     * The base implementation of `_.delay` and `_.defer` which accepts an array
	     * of `func` arguments.
	     *
	     * @private
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {Object} args The arguments to provide to `func`.
	     * @returns {number} Returns the timer id.
	     */
function On(t,e,n){if("function"!=typeof t)throw new dc(tt);return Dc(function(){t.apply(K,n)},e)}/**
	     * The base implementation of methods like `_.difference` without support
	     * for excluding multiple arrays or iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Array} values The values to exclude.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     */
function Rn(t,e,n,r){var i=-1,o=p,a=!0,u=t.length,s=[],c=e.length;if(!u)return s;n&&(e=v(e,O(n))),r?(o=d,a=!1):e.length>=Q&&(o=j,a=!1,e=new tn(e));t:for(;++i<u;){var l=t[i],f=n?n(l):l;if(l=r||0!==l?l:0,a&&f===f){for(var h=c;h--;)if(e[h]===f)continue t;s.push(l)}else o(e,f,r)||s.push(l)}return s}/**
	     * The base implementation of `_.every` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`
	     */
function jn(t,e){var n=!0;return pl(t,function(t,r,i){return n=!!e(t,r,i)}),n}/**
	     * The base implementation of methods like `_.max` and `_.min` which accepts a
	     * `comparator` to determine the extremum value.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The iteratee invoked per iteration.
	     * @param {Function} comparator The comparator used to compare values.
	     * @returns {*} Returns the extremum value.
	     */
function Dn(t,e,n){for(var r=-1,i=t.length;++r<i;){var o=t[r],a=e(o);if(null!=a&&(u===K?a===a&&!Tu(a):n(a,u)))var u=a,s=o}return s}/**
	     * The base implementation of `_.fill` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     */
function Mn(t,e,n,r){var i=t.length;for(n=Mu(n),n<0&&(n=-n>i?0:i+n),r=r===K||r>i?i:Mu(r),r<0&&(r+=i),r=n>r?0:Iu(r);n<r;)t[n++]=e;return t}/**
	     * The base implementation of `_.filter` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     */
function Ln(t,e){var n=[];return pl(t,function(t,r,i){e(t,r,i)&&n.push(t)}),n}/**
	     * The base implementation of `_.flatten` with support for restricting flattening.
	     *
	     * @private
	     * @param {Array} array The array to flatten.
	     * @param {number} depth The maximum recursion depth.
	     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
	     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
	     * @param {Array} [result=[]] The initial result value.
	     * @returns {Array} Returns the new flattened array.
	     */
function qn(t,e,n,r,i){var o=-1,a=t.length;for(n||(n=Wi),i||(i=[]);++o<a;){var u=t[o];e>0&&n(u)?e>1?
// Recursively flatten arrays (susceptible to call stack limits).
qn(u,e-1,n,r,i):g(i,u):r||(i[i.length]=u)}return i}/**
	     * The base implementation of `_.forOwn` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
function Un(t,e){return t&&vl(t,e,ts)}/**
	     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
function Fn(t,e){return t&&gl(t,e,ts)}/**
	     * The base implementation of `_.functions` which creates an array of
	     * `object` function property names filtered from `props`.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Array} props The property names to filter.
	     * @returns {Array} Returns the function names.
	     */
function Bn(t,e){return h(e,function(e){return fu(t[e])})}/**
	     * The base implementation of `_.get` without support for default values.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to get.
	     * @returns {*} Returns the resolved value.
	     */
function Wn(t,e){e=Ji(e,t)?[e]:Ur(e);for(var n=0,r=e.length;null!=t&&n<r;)t=t[oo(e[n++])];return n&&n==r?t:K}/**
	     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
	     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
	     * symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @param {Function} symbolsFunc The function to get the symbols of `object`.
	     * @returns {Array} Returns the array of property names and symbols.
	     */
function zn(t,e,n){var r=e(t);return af(t)?r:g(r,n(t))}/**
	     * The base implementation of `_.gt` which doesn't coerce arguments to numbers.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than `other`,
	     *  else `false`.
	     */
function Gn(t,e){return t>e}/**
	     * The base implementation of `_.has` without support for deep paths.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} key The key to check.
	     * @returns {boolean} Returns `true` if `key` exists, else `false`.
	     */
function Xn(t,e){
// Avoid a bug in IE 10-11 where objects with a [[Prototype]] of `null`,
// that are composed entirely of index properties, return `false` for
// `hasOwnProperty` checks of them.
return $c.call(t,e)||"object"==typeof t&&e in t&&null===Mi(t)}/**
	     * The base implementation of `_.hasIn` without support for deep paths.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} key The key to check.
	     * @returns {boolean} Returns `true` if `key` exists, else `false`.
	     */
function Jn(t,e){return e in Object(t)}/**
	     * The base implementation of `_.inRange` which doesn't coerce arguments to numbers.
	     *
	     * @private
	     * @param {number} number The number to check.
	     * @param {number} start The start of the range.
	     * @param {number} end The end of the range.
	     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
	     */
function Yn(t,e,n){return t>=Bc(e,n)&&t<Hc(e,n)}/**
	     * The base implementation of methods like `_.intersection`, without support
	     * for iteratee shorthands, that accepts an array of arrays to inspect.
	     *
	     * @private
	     * @param {Array} arrays The arrays to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of shared values.
	     */
function Kn(t,e,n){for(var r=n?d:p,i=t[0].length,o=t.length,a=o,u=Array(o),s=1/0,c=[];a--;){var l=t[a];a&&e&&(l=v(l,O(e))),s=Bc(l.length,s),u[a]=!n&&(e||i>=120&&l.length>=120)?new tn(a&&l):K}l=t[0];var f=-1,h=u[0];t:for(;++f<i&&c.length<s;){var g=l[f],m=e?e(g):g;if(g=n||0!==g?g:0,!(h?j(h,m):r(c,m,n))){for(a=o;--a;){var y=u[a];if(!(y?j(y,m):r(t[a],m,n)))continue t}h&&h.push(m),c.push(g)}}return c}/**
	     * The base implementation of `_.invert` and `_.invertBy` which inverts
	     * `object` with values transformed by `iteratee` and set by `setter`.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} setter The function to set `accumulator` values.
	     * @param {Function} iteratee The iteratee to transform values.
	     * @param {Object} accumulator The initial inverted object.
	     * @returns {Function} Returns `accumulator`.
	     */
function Zn(t,e,n,r){return Un(t,function(t,i,o){e(r,n(t),i,o)}),r}/**
	     * The base implementation of `_.invoke` without support for individual
	     * method arguments.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {Array} args The arguments to invoke the method with.
	     * @returns {*} Returns the result of the invoked method.
	     */
function Qn(t,e,n){Ji(e,t)||(e=Ur(e),t=ro(t,e),e=Eo(e));var r=null==t?t:t[oo(e)];return null==r?K:u(r,t,n)}/**
	     * The base implementation of `_.isEqual` which supports partial comparisons
	     * and tracks traversed objects.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @param {boolean} [bitmask] The bitmask of comparison flags.
	     *  The bitmask may be composed of the following flags:
	     *     1 - Unordered comparison
	     *     2 - Partial comparison
	     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     */
function tr(t,e,n,r,i){return t===e||(null==t||null==e||!du(t)&&!vu(e)?t!==t&&e!==e:er(t,e,tr,n,r,i))}/**
	     * A specialized version of `baseIsEqual` for arrays and objects which performs
	     * deep comparisons and tracks traversed objects enabling objects with circular
	     * references to be compared.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual`
	     *  for more details.
	     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
function er(t,e,n,r,i,o){var a=af(t),u=af(e),s=Ot,c=Ot;a||(s=Li(t),s=s==Tt?Lt:s),u||(c=Li(e),c=c==Tt?Lt:c);var l=s==Lt&&!F(t),f=c==Lt&&!F(e),h=s==c;if(h&&!l)return o||(o=new rn),a||Ou(t)?Si(t,e,n,r,i,o):Ai(t,e,s,n,r,i,o);if(!(i&dt)){var p=l&&$c.call(t,"__wrapped__"),d=f&&$c.call(e,"__wrapped__");if(p||d){var v=p?t.value():t,g=d?e.value():e;return o||(o=new rn),n(v,g,r,i,o)}}return!!h&&(o||(o=new rn),Ei(t,e,n,r,i,o))}/**
	     * The base implementation of `_.isMatch` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @param {Array} matchData The property names, values, and compare flags to match.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     */
function nr(t,e,n,r){var i=n.length,o=i,a=!r;if(null==t)return!o;for(t=Object(t);i--;){var u=n[i];if(a&&u[2]?u[1]!==t[u[0]]:!(u[0]in t))return!1}for(;++i<o;){u=n[i];var s=u[0],c=t[s],l=u[1];if(a&&u[2]){if(c===K&&!(s in t))return!1}else{var f=new rn;if(r)var h=r(c,l,s,t,e,f);if(!(h===K?tr(l,c,r,pt|dt,f):h))return!1}}return!0}/**
	     * The base implementation of `_.iteratee`.
	     *
	     * @private
	     * @param {*} [value=_.identity] The value to convert to an iteratee.
	     * @returns {Function} Returns the iteratee.
	     */
function rr(t){
// Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
// See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
// Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
// See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
return"function"==typeof t?t:null==t?Hs:"object"==typeof t?af(t)?cr(t[0],t[1]):sr(t):Ks(t)}/**
	     * The base implementation of `_.keys` which doesn't skip the constructor
	     * property of prototypes or treat sparse arrays as dense.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
function ir(t){return Vc(Object(t))}/**
	     * The base implementation of `_.keysIn` which doesn't skip the constructor
	     * property of prototypes or treat sparse arrays as dense.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
function or(t){t=null==t?t:Object(t);var e=[];for(var n in t)e.push(n);return e}/**
	     * The base implementation of `_.lt` which doesn't coerce arguments to numbers.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than `other`,
	     *  else `false`.
	     */
function ar(t,e){return t<e}/**
	     * The base implementation of `_.map` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     */
function ur(t,e){var n=-1,r=eu(t)?Array(t.length):[];return pl(t,function(t,i,o){r[++n]=e(t,i,o)}),r}/**
	     * The base implementation of `_.matches` which doesn't clone `source`.
	     *
	     * @private
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new spec function.
	     */
function sr(t){var e=Pi(t);return 1==e.length&&e[0][2]?to(e[0][0],e[0][1]):function(n){return n===t||nr(n,t,e)}}/**
	     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
	     *
	     * @private
	     * @param {string} path The path of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new spec function.
	     */
function cr(t,e){return Ji(t)&&Qi(e)?to(oo(t),e):function(n){var r=Ku(n,t);return r===K&&r===e?Qu(n,t):tr(e,r,K,pt|dt)}}/**
	     * The base implementation of `_.merge` without support for multiple sources.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {number} srcIndex The index of `source`.
	     * @param {Function} [customizer] The function to customize merged values.
	     * @param {Object} [stack] Tracks traversed source values and their merged
	     *  counterparts.
	     */
function lr(t,e,n,r,i){if(t!==e){if(!af(e)&&!Ou(e))var o=es(e);c(o||e,function(a,u){if(o&&(u=a,a=e[u]),du(a))i||(i=new rn),fr(t,e,u,n,lr,r,i);else{var s=r?r(t[u],a,u+"",t,e,i):K;s===K&&(s=a),fn(t,u,s)}})}}/**
	     * A specialized version of `baseMerge` for arrays and objects which performs
	     * deep merges and tracks traversed objects enabling objects with circular
	     * references to be merged.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {string} key The key of the value to merge.
	     * @param {number} srcIndex The index of `source`.
	     * @param {Function} mergeFunc The function to merge values.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @param {Object} [stack] Tracks traversed source values and their merged
	     *  counterparts.
	     */
function fr(t,e,n,r,i,o,a){var u=t[n],s=e[n],c=a.get(s);if(c)return void fn(t,n,c);var l=o?o(u,s,n+"",t,e,a):K,f=l===K;f&&(l=s,af(s)||Ou(s)?af(u)?l=u:nu(u)?l=ti(u):(f=!1,l=bn(s,!0)):Cu(s)||Qa(s)?Qa(u)?l=qu(u):!du(u)||r&&fu(u)?(f=!1,l=bn(s,!0)):l=u:f=!1),a.set(s,l),f&&
// Recursively merge objects and arrays (susceptible to call stack limits).
i(l,s,r,o,a),a["delete"](s),fn(t,n,l)}/**
	     * The base implementation of `_.nth` which doesn't coerce `n` to an integer.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {number} n The index of the element to return.
	     * @returns {*} Returns the nth element of `array`.
	     */
function hr(t,e){var n=t.length;if(n)return e+=e<0?n:0,Gi(e,n)?t[e]:K}/**
	     * The base implementation of `_.orderBy` without param guards.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
	     * @param {string[]} orders The sort orders of `iteratees`.
	     * @returns {Array} Returns the new sorted array.
	     */
function pr(t,e,n){var r=-1;e=v(e.length?e:[Hs],O(ji()));var i=ur(t,function(t,n,i){var o=v(e,function(e){return e(t)});return{criteria:o,index:++r,value:t}});return A(i,function(t,e){return Kr(t,e,n)})}/**
	     * The base implementation of `_.pick` without support for individual
	     * property identifiers.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {string[]} props The property identifiers to pick.
	     * @returns {Object} Returns the new object.
	     */
function dr(t,e){return t=Object(t),m(e,function(e,n){return n in t&&(e[n]=t[n]),e},{})}/**
	     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {Function} predicate The function invoked per property.
	     * @returns {Object} Returns the new object.
	     */
function vr(t,e){for(var n=-1,r=Ti(t),i=r.length,o={};++n<i;){var a=r[n],u=t[a];e(u,a)&&(o[a]=u)}return o}/**
	     * The base implementation of `_.property` without support for deep paths.
	     *
	     * @private
	     * @param {string} key The key of the property to get.
	     * @returns {Function} Returns the new accessor function.
	     */
function gr(t){return function(e){return null==e?K:e[t]}}/**
	     * A specialized version of `baseProperty` which supports deep paths.
	     *
	     * @private
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new accessor function.
	     */
function mr(t){return function(e){return Wn(e,t)}}/**
	     * The base implementation of `_.pullAllBy` without support for iteratee
	     * shorthands.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns `array`.
	     */
function yr(t,e,n,r){var i=r?_:x,o=-1,a=e.length,u=t;for(n&&(u=v(t,O(n)));++o<a;)for(var s=0,c=e[o],l=n?n(c):c;(s=i(u,l,s,r))>-1;)u!==t&&Mc.call(u,s,1),Mc.call(t,s,1);return t}/**
	     * The base implementation of `_.pullAt` without support for individual
	     * indexes or capturing the removed elements.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {number[]} indexes The indexes of elements to remove.
	     * @returns {Array} Returns `array`.
	     */
function $r(t,e){for(var n=t?e.length:0,r=n-1;n--;){var i=e[n];if(n==r||i!==o){var o=i;if(Gi(i))Mc.call(t,i,1);else if(Ji(i,t))delete t[oo(i)];else{var a=Ur(i),u=ro(t,a);null!=u&&delete u[oo(Eo(a))]}}}return t}/**
	     * The base implementation of `_.random` without support for returning
	     * floating-point numbers.
	     *
	     * @private
	     * @param {number} lower The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the random number.
	     */
function br(t,e){return t+Lc(zc()*(e-t+1))}/**
	     * The base implementation of `_.range` and `_.rangeRight` which doesn't
	     * coerce arguments to numbers.
	     *
	     * @private
	     * @param {number} start The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} step The value to increment or decrement by.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Array} Returns the range of numbers.
	     */
function wr(t,e,n,r){for(var i=-1,o=Hc(Ic((e-t)/(n||1)),0),a=Array(o);o--;)a[r?o:++i]=t,t+=n;return a}/**
	     * The base implementation of `_.repeat` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {string} string The string to repeat.
	     * @param {number} n The number of times to repeat the string.
	     * @returns {string} Returns the repeated string.
	     */
function xr(t,e){var n="";if(!t||e<1||e>_t)return n;
// Leverage the exponentiation by squaring algorithm for a faster repeat.
// See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
do e%2&&(n+=t),e=Lc(e/2),e&&(t+=t);while(e);return n}/**
	     * The base implementation of `_.set`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @param {Function} [customizer] The function to customize path creation.
	     * @returns {Object} Returns `object`.
	     */
function _r(t,e,n,r){e=Ji(e,t)?[e]:Ur(e);for(var i=-1,o=e.length,a=o-1,u=t;null!=u&&++i<o;){var s=oo(e[i]);if(du(u)){var c=n;if(i!=a){var l=u[s];c=r?r(l,s,u):K,c===K&&(c=null==l?Gi(e[i+1])?[]:{}:l)}hn(u,s,c)}u=u[s]}return t}/**
	     * The base implementation of `_.slice` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
function Cr(t,e,n){var r=-1,i=t.length;e<0&&(e=-e>i?0:i+e),n=n>i?i:n,n<0&&(n+=i),i=e>n?0:n-e>>>0,e>>>=0;for(var o=Array(i);++r<i;)o[r]=t[r+e];return o}/**
	     * The base implementation of `_.some` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     */
function Sr(t,e){var n;return pl(t,function(t,r,i){return n=e(t,r,i),!n}),!!n}/**
	     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
	     * performs a binary search of `array` to determine the index at which `value`
	     * should be inserted into `array` in order to maintain its sort order.
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
function Ar(t,e,n){var r=0,i=t?t.length:r;if("number"==typeof e&&e===e&&i<=kt){for(;r<i;){var o=r+i>>>1,a=t[o];null!==a&&!Tu(a)&&(n?a<=e:a<e)?r=o+1:i=o}return i}return Er(t,e,Hs,n)}/**
	     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
	     * which invokes `iteratee` for `value` and each element of `array` to compute
	     * their sort ranking. The iteratee is invoked with one argument; (value).
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} iteratee The iteratee invoked per element.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
function Er(t,e,n,r){e=n(e);for(var i=0,o=t?t.length:0,a=e!==e,u=null===e,s=Tu(e),c=e===K;i<o;){var l=Lc((i+o)/2),f=n(t[l]),h=f!==K,p=null===f,d=f===f,v=Tu(f);if(a)var g=r||d;else g=c?d&&(r||h):u?d&&h&&(r||!p):s?d&&h&&!p&&(r||!v):!p&&!v&&(r?f<=e:f<e);g?i=l+1:o=l}return Bc(o,Et)}/**
	     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
	     * support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     */
function kr(t,e){for(var n=-1,r=t.length,i=0,o=[];++n<r;){var a=t[n],u=e?e(a):a;if(!n||!Za(u,s)){var s=u;o[i++]=0===a?0:a}}return o}/**
	     * The base implementation of `_.toNumber` which doesn't ensure correct
	     * conversions of binary, hexadecimal, or octal string values.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {number} Returns the number.
	     */
function Tr(t){return"number"==typeof t?t:Tu(t)?St:+t}/**
	     * The base implementation of `_.toString` which doesn't convert nullish
	     * values to empty strings.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {string} Returns the string.
	     */
function Or(t){
// Exit early for strings to avoid a performance hit in some environments.
if("string"==typeof t)return t;if(Tu(t))return hl?hl.call(t):"";var e=t+"";return"0"==e&&1/t==-xt?"-0":e}/**
	     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     */
function Rr(t,e,n){var r=-1,i=p,o=t.length,a=!0,u=[],s=u;if(n)a=!1,i=d;else if(o>=Q){var c=e?null:yl(t);if(c)return W(c);a=!1,i=j,s=new tn}else s=e?[]:u;t:for(;++r<o;){var l=t[r],f=e?e(l):l;if(l=n||0!==l?l:0,a&&f===f){for(var h=s.length;h--;)if(s[h]===f)continue t;e&&s.push(f),u.push(l)}else i(s,f,n)||(s!==u&&s.push(f),u.push(l))}return u}/**
	     * The base implementation of `_.unset`.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to unset.
	     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
	     */
function jr(t,e){e=Ji(e,t)?[e]:Ur(e),t=ro(t,e);var n=oo(Eo(e));return!(null!=t&&Xn(t,n))||delete t[n]}/**
	     * The base implementation of `_.update`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to update.
	     * @param {Function} updater The function to produce the updated value.
	     * @param {Function} [customizer] The function to customize path creation.
	     * @returns {Object} Returns `object`.
	     */
function Nr(t,e,n,r){return _r(t,e,n(Wn(t,e)),r)}/**
	     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
	     * without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {Function} predicate The function invoked per iteration.
	     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Array} Returns the slice of `array`.
	     */
function Pr(t,e,n,r){for(var i=t.length,o=r?i:-1;(r?o--:++o<i)&&e(t[o],o,t););return n?Cr(t,r?0:o,r?o+1:i):Cr(t,r?o+1:0,r?i:o)}/**
	     * The base implementation of `wrapperValue` which returns the result of
	     * performing a sequence of actions on the unwrapped `value`, where each
	     * successive action is supplied the return value of the previous.
	     *
	     * @private
	     * @param {*} value The unwrapped value.
	     * @param {Array} actions Actions to perform to resolve the unwrapped value.
	     * @returns {*} Returns the resolved value.
	     */
function Dr(t,e){var n=t;return n instanceof i&&(n=n.value()),m(e,function(t,e){return e.func.apply(e.thisArg,g([t],e.args))},n)}/**
	     * The base implementation of methods like `_.xor`, without support for
	     * iteratee shorthands, that accepts an array of arrays to inspect.
	     *
	     * @private
	     * @param {Array} arrays The arrays to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of values.
	     */
function Mr(t,e,n){for(var r=-1,i=t.length;++r<i;)var o=o?g(Rn(o,t[r],e,n),Rn(t[r],o,e,n)):t[r];return o&&o.length?Rr(o,e,n):[]}/**
	     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
	     *
	     * @private
	     * @param {Array} props The property identifiers.
	     * @param {Array} values The property values.
	     * @param {Function} assignFunc The function to assign values.
	     * @returns {Object} Returns the new object.
	     */
function Ir(t,e,n){for(var r=-1,i=t.length,o=e.length,a={};++r<i;){var u=r<o?e[r]:K;n(a,t[r],u)}return a}/**
	     * Casts `value` to an empty array if it's not an array like object.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {Array|Object} Returns the cast array-like object.
	     */
function Lr(t){return nu(t)?t:[]}/**
	     * Casts `value` to `identity` if it's not a function.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {Function} Returns cast function.
	     */
function qr(t){return"function"==typeof t?t:Hs}/**
	     * Casts `value` to a path array if it's not one.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {Array} Returns the cast property path array.
	     */
function Ur(t){return af(t)?t:_l(t)}/**
	     * Casts `array` to a slice if it's needed.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {number} start The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the cast slice.
	     */
function Fr(t,e,n){var r=t.length;return n=n===K?r:n,!e&&n>=r?t:Cr(t,e,n)}/**
	     * Creates a clone of  `buffer`.
	     *
	     * @private
	     * @param {Buffer} buffer The buffer to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Buffer} Returns the cloned buffer.
	     */
function Vr(t,e){if(e)return t.slice();var n=new t.constructor(t.length);return t.copy(n),n}/**
	     * Creates a clone of `arrayBuffer`.
	     *
	     * @private
	     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
	     * @returns {ArrayBuffer} Returns the cloned array buffer.
	     */
function Hr(t){var e=new t.constructor(t.byteLength);return new kc(e).set(new kc(t)),e}/**
	     * Creates a clone of `dataView`.
	     *
	     * @private
	     * @param {Object} dataView The data view to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned data view.
	     */
function Br(t,e){var n=e?Hr(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.byteLength)}/**
	     * Creates a clone of `map`.
	     *
	     * @private
	     * @param {Object} map The map to clone.
	     * @param {Function} cloneFunc The function to clone values.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned map.
	     */
function Wr(t,e,n){var r=e?n(H(t),!0):H(t);return m(r,o,new t.constructor)}/**
	     * Creates a clone of `regexp`.
	     *
	     * @private
	     * @param {Object} regexp The regexp to clone.
	     * @returns {Object} Returns the cloned regexp.
	     */
function zr(t){var e=new t.constructor(t.source,Ce.exec(t));return e.lastIndex=t.lastIndex,e}/**
	     * Creates a clone of `set`.
	     *
	     * @private
	     * @param {Object} set The set to clone.
	     * @param {Function} cloneFunc The function to clone values.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned set.
	     */
function Gr(t,e,n){var r=e?n(W(t),!0):W(t);return m(r,a,new t.constructor)}/**
	     * Creates a clone of the `symbol` object.
	     *
	     * @private
	     * @param {Object} symbol The symbol object to clone.
	     * @returns {Object} Returns the cloned symbol object.
	     */
function Xr(t){return fl?Object(fl.call(t)):{}}/**
	     * Creates a clone of `typedArray`.
	     *
	     * @private
	     * @param {Object} typedArray The typed array to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned typed array.
	     */
function Jr(t,e){var n=e?Hr(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.length)}/**
	     * Compares values to sort them in ascending order.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {number} Returns the sort order indicator for `value`.
	     */
function Yr(t,e){if(t!==e){var n=t!==K,r=null===t,i=t===t,o=Tu(t),a=e!==K,u=null===e,s=e===e,c=Tu(e);if(!u&&!c&&!o&&t>e||o&&a&&s&&!u&&!c||r&&a&&s||!n&&s||!i)return 1;if(!r&&!o&&!c&&t<e||c&&n&&i&&!r&&!o||u&&n&&i||!a&&i||!s)return-1}return 0}/**
	     * Used by `_.orderBy` to compare multiple properties of a value to another
	     * and stable sort them.
	     *
	     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
	     * specify an order of "desc" for descending or "asc" for ascending sort order
	     * of corresponding values.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {boolean[]|string[]} orders The order to sort by for each property.
	     * @returns {number} Returns the sort order indicator for `object`.
	     */
function Kr(t,e,n){for(var r=-1,i=t.criteria,o=e.criteria,a=i.length,u=n.length;++r<a;){var s=Yr(i[r],o[r]);if(s){if(r>=u)return s;var c=n[r];return s*("desc"==c?-1:1)}}
// Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
// that causes it, under certain circumstances, to provide the same value for
// `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
// for more details.
//
// This also ensures a stable sort in V8 and other engines.
// See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
return t.index-e.index}/**
	     * Creates an array that is the composition of partially applied arguments,
	     * placeholders, and provided arguments into a single array of arguments.
	     *
	     * @private
	     * @param {Array} args The provided arguments.
	     * @param {Array} partials The arguments to prepend to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @params {boolean} [isCurried] Specify composing for a curried function.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
function Zr(t,e,n,r){for(var i=-1,o=t.length,a=n.length,u=-1,s=e.length,c=Hc(o-a,0),l=Array(s+c),f=!r;++u<s;)l[u]=e[u];for(;++i<a;)(f||i<o)&&(l[n[i]]=t[i]);for(;c--;)l[u++]=t[i++];return l}/**
	     * This function is like `composeArgs` except that the arguments composition
	     * is tailored for `_.partialRight`.
	     *
	     * @private
	     * @param {Array} args The provided arguments.
	     * @param {Array} partials The arguments to append to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @params {boolean} [isCurried] Specify composing for a curried function.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
function Qr(t,e,n,r){for(var i=-1,o=t.length,a=-1,u=n.length,s=-1,c=e.length,l=Hc(o-u,0),f=Array(l+c),h=!r;++i<l;)f[i]=t[i];for(var p=i;++s<c;)f[p+s]=e[s];for(;++a<u;)(h||i<o)&&(f[p+n[a]]=t[i++]);return f}/**
	     * Copies the values of `source` to `array`.
	     *
	     * @private
	     * @param {Array} source The array to copy values from.
	     * @param {Array} [array=[]] The array to copy values to.
	     * @returns {Array} Returns `array`.
	     */
function ti(t,e){var n=-1,r=t.length;for(e||(e=Array(r));++n<r;)e[n]=t[n];return e}/**
	     * Copies properties of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy properties from.
	     * @param {Array} props The property identifiers to copy.
	     * @param {Object} [object={}] The object to copy properties to.
	     * @param {Function} [customizer] The function to customize copied values.
	     * @returns {Object} Returns `object`.
	     */
function ei(t,e,n,r){n||(n={});for(var i=-1,o=e.length;++i<o;){var a=e[i],u=r?r(n[a],t[a],a,n,t):t[a];hn(n,a,u)}return n}/**
	     * Copies own symbol properties of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy symbols from.
	     * @param {Object} [object={}] The object to copy symbols to.
	     * @returns {Object} Returns `object`.
	     */
function ni(t,e){return ei(t,Ii(t),e)}/**
	     * Creates a function like `_.groupBy`.
	     *
	     * @private
	     * @param {Function} setter The function to set accumulator values.
	     * @param {Function} [initializer] The accumulator object initializer.
	     * @returns {Function} Returns the new aggregator function.
	     */
function ri(t,e){return function(n,r){var i=af(n)?s:dn,o=e?e():{};return i(n,t,ji(r),o)}}/**
	     * Creates a function like `_.assign`.
	     *
	     * @private
	     * @param {Function} assigner The function to assign values.
	     * @returns {Function} Returns the new assigner function.
	     */
function ii(t){return Va(function(e,n){var r=-1,i=n.length,o=i>1?n[i-1]:K,a=i>2?n[2]:K;for(o=t.length>3&&"function"==typeof o?(i--,o):K,a&&Xi(n[0],n[1],a)&&(o=i<3?K:o,i=1),e=Object(e);++r<i;){var u=n[r];u&&t(e,u,r,o)}return e})}/**
	     * Creates a `baseEach` or `baseEachRight` function.
	     *
	     * @private
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
function oi(t,e){return function(n,r){if(null==n)return n;if(!eu(n))return t(n,r);for(var i=n.length,o=e?i:-1,a=Object(n);(e?o--:++o<i)&&r(a[o],o,a)!==!1;);return n}}/**
	     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
function ai(t){return function(e,n,r){for(var i=-1,o=Object(e),a=r(e),u=a.length;u--;){var s=a[t?u:++i];if(n(o[s],s,o)===!1)break}return e}}/**
	     * Creates a function that wraps `func` to invoke it with the optional `this`
	     * binding of `thisArg`.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper`
	     *  for more details.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
function ui(t,e,n){function r(){var e=this&&this!==Vn&&this instanceof r?o:t;return e.apply(i?n:this,arguments)}var i=e&rt,o=li(t);return r}/**
	     * Creates a function like `_.lowerFirst`.
	     *
	     * @private
	     * @param {string} methodName The name of the `String` case method to use.
	     * @returns {Function} Returns the new case function.
	     */
function si(t){return function(e){e=Fu(e);var n=xn.test(e)?X(e):K,r=n?n[0]:e.charAt(0),i=n?Fr(n,1).join(""):e.slice(1);return r[t]()+i}}/**
	     * Creates a function like `_.camelCase`.
	     *
	     * @private
	     * @param {Function} callback The function to combine each word.
	     * @returns {Function} Returns the new compounder function.
	     */
function ci(t){return function(e){return m(qs($s(e).replace(yn,"")),t,"")}}/**
	     * Creates a function that produces an instance of `Ctor` regardless of
	     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
	     *
	     * @private
	     * @param {Function} Ctor The constructor to wrap.
	     * @returns {Function} Returns the new wrapped function.
	     */
function li(t){return function(){
// Use a `switch` statement to work with class constructors. See
// http://ecma-international.org/ecma-262/6.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
// for more details.
var e=arguments;switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3]);case 5:return new t(e[0],e[1],e[2],e[3],e[4]);case 6:return new t(e[0],e[1],e[2],e[3],e[4],e[5]);case 7:return new t(e[0],e[1],e[2],e[3],e[4],e[5],e[6])}var n=Tn(t.prototype),r=t.apply(n,e);
// Mimic the constructor's `return` behavior.
// See https://es5.github.io/#x13.2.2 for more details.
return du(r)?r:n}}/**
	     * Creates a function that wraps `func` to enable currying.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper`
	     *  for more details.
	     * @param {number} arity The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
function fi(t,e,n){function r(){for(var o=arguments.length,a=Array(o),s=o,c=Ri(r);s--;)a[s]=arguments[s];var l=o<3&&a[0]!==c&&a[o-1]!==c?[]:B(a,c);if(o-=l.length,o<n)return wi(t,e,pi,r.placeholder,K,a,l,K,K,n-o);var f=this&&this!==Vn&&this instanceof r?i:t;return u(f,this,a)}var i=li(t);return r}/**
	     * Creates a `_.flow` or `_.flowRight` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new flow function.
	     */
function hi(t){return Va(function(e){e=qn(e,1);var n=e.length,i=n,o=r.prototype.thru;for(t&&e.reverse();i--;){var a=e[i];if("function"!=typeof a)throw new dc(tt);if(o&&!u&&"wrapper"==Oi(a))var u=new r([],(!0))}for(i=u?i:n;++i<n;){a=e[i];var s=Oi(a),c="wrapper"==s?$l(a):K;u=c&&Ki(c[0])&&c[1]==(lt|at|st|ft)&&!c[4].length&&1==c[9]?u[Oi(c[0])].apply(u,c[3]):1==a.length&&Ki(a)?u[s]():u.thru(a)}return function(){var t=arguments,r=t[0];if(u&&1==t.length&&af(r)&&r.length>=Q)return u.plant(r).value();for(var i=0,o=n?e[i].apply(this,t):r;++i<n;)o=e[i].call(this,o);return o}})}/**
	     * Creates a function that wraps `func` to invoke it with optional `this`
	     * binding of `thisArg`, partial application, and currying.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to wrap.
	     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper`
	     *  for more details.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to prepend to those provided to
	     *  the new function.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [partialsRight] The arguments to append to those provided
	     *  to the new function.
	     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
function pi(t,e,n,r,i,o,a,u,s,c){function l(){for(var m=arguments.length,y=Array(m),$=m;$--;)y[$]=arguments[$];if(d)var b=Ri(l),w=M(y,b);if(r&&(y=Zr(y,r,i,d)),o&&(y=Qr(y,o,a,d)),m-=w,d&&m<c){var x=B(y,b);return wi(t,e,pi,l.placeholder,n,y,x,u,s,c-m)}var _=h?n:this,C=p?_[t]:t;return m=y.length,u?y=io(y,u):v&&m>1&&y.reverse(),f&&s<m&&(y.length=s),this&&this!==Vn&&this instanceof l&&(C=g||li(C)),C.apply(_,y)}var f=e&lt,h=e&rt,p=e&it,d=e&(at|ut),v=e&ht,g=p?K:li(t);return l}/**
	     * Creates a function like `_.invertBy`.
	     *
	     * @private
	     * @param {Function} setter The function to set accumulator values.
	     * @param {Function} toIteratee The function to resolve iteratees.
	     * @returns {Function} Returns the new inverter function.
	     */
function di(t,e){return function(n,r){return Zn(n,t,e(r),{})}}/**
	     * Creates a function that performs a mathematical operation on two values.
	     *
	     * @private
	     * @param {Function} operator The function to perform the operation.
	     * @returns {Function} Returns the new mathematical operation function.
	     */
function vi(t){return function(e,n){var r;if(e===K&&n===K)return 0;if(e!==K&&(r=e),n!==K){if(r===K)return n;"string"==typeof e||"string"==typeof n?(e=Or(e),n=Or(n)):(e=Tr(e),n=Tr(n)),r=t(e,n)}return r}}/**
	     * Creates a function like `_.over`.
	     *
	     * @private
	     * @param {Function} arrayFunc The function to iterate over iteratees.
	     * @returns {Function} Returns the new over function.
	     */
function gi(t){return Va(function(e){return e=1==e.length&&af(e[0])?v(e[0],O(ji())):v(qn(e,1,zi),O(ji())),Va(function(n){var r=this;return t(e,function(t){return u(t,r,n)})})})}/**
	     * Creates the padding for `string` based on `length`. The `chars` string
	     * is truncated if the number of characters exceeds `length`.
	     *
	     * @private
	     * @param {number} length The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padding for `string`.
	     */
function mi(t,e){e=e===K?" ":Or(e);var n=e.length;if(n<2)return n?xr(e,t):e;var r=xr(e,Ic(t/G(e)));return xn.test(e)?Fr(X(r),0,t).join(""):r.slice(0,t)}/**
	     * Creates a function that wraps `func` to invoke it with the `this` binding
	     * of `thisArg` and `partials` prepended to the arguments it receives.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper`
	     *  for more details.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {Array} partials The arguments to prepend to those provided to
	     *  the new function.
	     * @returns {Function} Returns the new wrapped function.
	     */
function yi(t,e,n,r){function i(){for(var e=-1,s=arguments.length,c=-1,l=r.length,f=Array(l+s),h=this&&this!==Vn&&this instanceof i?a:t;++c<l;)f[c]=r[c];for(;s--;)f[c++]=arguments[++e];return u(h,o?n:this,f)}var o=e&rt,a=li(t);return i}/**
	     * Creates a `_.range` or `_.rangeRight` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new range function.
	     */
function $i(t){return function(e,n,r){
// Ensure the sign of `-0` is preserved.
return r&&"number"!=typeof r&&Xi(e,n,r)&&(n=r=K),e=Lu(e),e=e===e?e:0,n===K?(n=e,e=0):n=Lu(n)||0,r=r===K?e<n?1:-1:Lu(r)||0,wr(e,n,r,t)}}/**
	     * Creates a function that performs a relational operation on two values.
	     *
	     * @private
	     * @param {Function} operator The function to perform the operation.
	     * @returns {Function} Returns the new relational operation function.
	     */
function bi(t){return function(e,n){return"string"==typeof e&&"string"==typeof n||(e=Lu(e),n=Lu(n)),t(e,n)}}/**
	     * Creates a function that wraps `func` to continue currying.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper`
	     *  for more details.
	     * @param {Function} wrapFunc The function to create the `func` wrapper.
	     * @param {*} placeholder The placeholder value.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to prepend to those provided to
	     *  the new function.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
function wi(t,e,n,r,i,o,a,u,s,c){var l=e&at,f=l?a:K,h=l?K:a,p=l?o:K,d=l?K:o;e|=l?st:ct,e&=~(l?ct:st),e&ot||(e&=~(rt|it));var v=[t,e,i,p,f,d,h,u,s,c],g=n.apply(K,v);return Ki(t)&&xl(g,v),g.placeholder=r,g}/**
	     * Creates a function like `_.round`.
	     *
	     * @private
	     * @param {string} methodName The name of the `Math` method to use when rounding.
	     * @returns {Function} Returns the new round function.
	     */
function xi(t){var e=hc[t];return function(t,n){if(t=Lu(t),n=Mu(n)){
// Shift with exponential notation to avoid floating-point issues.
// See [MDN](https://mdn.io/round#Examples) for more details.
var r=(Fu(t)+"e").split("e"),i=e(r[0]+"e"+(+r[1]+n));return r=(Fu(i)+"e").split("e"),+(r[0]+"e"+(+r[1]-n))}return e(t)}}/**
	     * Creates a `_.toPairs` or `_.toPairsIn` function.
	     *
	     * @private
	     * @param {Function} keysFunc The function to get the keys of a given object.
	     * @returns {Function} Returns the new pairs function.
	     */
function _i(t){return function(e){var n=Li(e);return n==Mt?H(e):n==Ft?z(e):T(e,t(e))}}/**
	     * Creates a function that either curries or invokes `func` with optional
	     * `this` binding and partially applied arguments.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to wrap.
	     * @param {number} bitmask The bitmask of wrapper flags.
	     *  The bitmask may be composed of the following flags:
	     *     1 - `_.bind`
	     *     2 - `_.bindKey`
	     *     4 - `_.curry` or `_.curryRight` of a bound function
	     *     8 - `_.curry`
	     *    16 - `_.curryRight`
	     *    32 - `_.partial`
	     *    64 - `_.partialRight`
	     *   128 - `_.rearg`
	     *   256 - `_.ary`
	     *   512 - `_.flip`
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to be partially applied.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
function Ci(t,e,n,r,i,o,a,u){var s=e&it;if(!s&&"function"!=typeof t)throw new dc(tt);var c=r?r.length:0;if(c||(e&=~(st|ct),r=i=K),a=a===K?a:Hc(Mu(a),0),u=u===K?u:Mu(u),c-=i?i.length:0,e&ct){var l=r,f=i;r=i=K}var h=s?K:$l(t),p=[t,e,n,r,i,l,f,o,a,u];if(h&&eo(p,h),t=p[0],e=p[1],n=p[2],r=p[3],i=p[4],u=p[9]=null==p[9]?s?0:t.length:Hc(p[9]-c,0),!u&&e&(at|ut)&&(e&=~(at|ut)),e&&e!=rt)d=e==at||e==ut?fi(t,e,u):e!=st&&e!=(rt|st)||i.length?pi.apply(K,p):yi(t,e,n,r);else var d=ui(t,e,n);var v=h?ml:xl;return v(d,p)}/**
	     * A specialized version of `baseIsEqualDeep` for arrays with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Array} array The array to compare.
	     * @param {Array} other The other array to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
	     *  for more details.
	     * @param {Object} stack Tracks traversed `array` and `other` objects.
	     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	     */
function Si(t,e,n,r,i,o){var a=i&dt,u=t.length,s=e.length;if(u!=s&&!(a&&s>u))return!1;
// Assume cyclic values are equal.
var c=o.get(t);if(c)return c==e;var l=-1,f=!0,h=i&pt?new tn:K;
// Ignore non-index properties.
for(o.set(t,e);++l<u;){var p=t[l],d=e[l];if(r)var v=a?r(d,p,l,e,t,o):r(p,d,l,t,e,o);if(v!==K){if(v)continue;f=!1;break}
// Recursively compare arrays (susceptible to call stack limits).
if(h){if(!$(e,function(t,e){if(!h.has(e)&&(p===t||n(p,t,r,i,o)))return h.add(e)})){f=!1;break}}else if(p!==d&&!n(p,d,r,i,o)){f=!1;break}}return o["delete"](t),f}/**
	     * A specialized version of `baseIsEqualDeep` for comparing objects of
	     * the same `toStringTag`.
	     *
	     * **Note:** This function only supports comparing values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {string} tag The `toStringTag` of the objects to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
	     *  for more details.
	     * @param {Object} stack Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
function Ai(t,e,n,r,i,o,a){switch(n){case Gt:if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case zt:return!(t.byteLength!=e.byteLength||!r(new kc(t),new kc(e)));case Rt:case jt:
// Coerce dates and booleans to numbers, dates to milliseconds and
// booleans to `1` or `0` treating invalid dates coerced to `NaN` as
// not equal.
return+t==+e;case Nt:return t.name==e.name&&t.message==e.message;case It:
// Treat `NaN` vs. `NaN` as equal.
return t!=+t?e!=+e:t==+e;case Ut:case Vt:
// Coerce regexes to strings and treat strings, primitives and objects,
// as equal. See http://www.ecma-international.org/ecma-262/6.0/#sec-regexp.prototype.tostring
// for more details.
return t==e+"";case Mt:var u=H;case Ft:var s=o&dt;if(u||(u=W),t.size!=e.size&&!s)return!1;
// Assume cyclic values are equal.
var c=a.get(t);return c?c==e:(o|=pt,a.set(t,e),Si(u(t),u(e),r,i,o,a));case Ht:if(fl)return fl.call(t)==fl.call(e)}return!1}/**
	     * A specialized version of `baseIsEqualDeep` for objects with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
	     *  for more details.
	     * @param {Object} stack Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
function Ei(t,e,n,r,i,o){var a=i&dt,u=ts(t),s=u.length,c=ts(e),l=c.length;if(s!=l&&!a)return!1;for(var f=s;f--;){var h=u[f];if(!(a?h in e:Xn(e,h)))return!1}
// Assume cyclic values are equal.
var p=o.get(t);if(p)return p==e;var d=!0;o.set(t,e);for(var v=a;++f<s;){h=u[f];var g=t[h],m=e[h];if(r)var y=a?r(m,g,h,e,t,o):r(g,m,h,t,e,o);
// Recursively compare objects (susceptible to call stack limits).
if(!(y===K?g===m||n(g,m,r,i,o):y)){d=!1;break}v||(v="constructor"==h)}if(d&&!v){var $=t.constructor,b=e.constructor;
// Non `Object` object instances with different constructors are not equal.
$!=b&&"constructor"in t&&"constructor"in e&&!("function"==typeof $&&$ instanceof $&&"function"==typeof b&&b instanceof b)&&(d=!1)}return o["delete"](t),d}/**
	     * Creates an array of own enumerable property names and symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names and symbols.
	     */
function ki(t){return zn(t,ts,Ii)}/**
	     * Creates an array of own and inherited enumerable property names and
	     * symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names and symbols.
	     */
function Ti(t){return zn(t,es,wl)}/**
	     * Gets the name of `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {string} Returns the function name.
	     */
function Oi(t){for(var e=t.name+"",n=il[e],r=$c.call(il,e)?n.length:0;r--;){var i=n[r],o=i.func;if(null==o||o==t)return i.name}return e}/**
	     * Gets the argument placeholder value for `func`.
	     *
	     * @private
	     * @param {Function} func The function to inspect.
	     * @returns {*} Returns the placeholder value.
	     */
function Ri(t){var n=$c.call(e,"placeholder")?e:t;return n.placeholder}/**
	     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
	     * this function returns the custom method, otherwise it returns `baseIteratee`.
	     * If arguments are provided, the chosen function is invoked with them and
	     * its result is returned.
	     *
	     * @private
	     * @param {*} [value] The value to convert to an iteratee.
	     * @param {number} [arity] The arity of the created iteratee.
	     * @returns {Function} Returns the chosen function or its result.
	     */
function ji(){var t=e.iteratee||Bs;return t=t===Bs?rr:t,arguments.length?t(arguments[0],arguments[1]):t}/**
	     * Gets the data for `map`.
	     *
	     * @private
	     * @param {Object} map The map to query.
	     * @param {string} key The reference key.
	     * @returns {*} Returns the map data.
	     */
function Ni(t,e){var n=t.__data__;return Yi(e)?n["string"==typeof e?"string":"hash"]:n.map}/**
	     * Gets the property names, values, and compare flags of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the match data of `object`.
	     */
function Pi(t){for(var e=Cf(t),n=e.length;n--;)e[n][2]=Qi(e[n][1]);return e}/**
	     * Gets the native function at `key` of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {string} key The key of the method to get.
	     * @returns {*} Returns the function if it's native, else `undefined`.
	     */
function Di(t,e){var n=t[e];return bu(n)?n:K}/**
	     * Gets the `[[Prototype]]` of `value`.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @returns {null|Object} Returns the `[[Prototype]]`.
	     */
function Mi(t){return qc(Object(t))}/**
	     * Creates an array of the own enumerable symbol properties of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of symbols.
	     */
function Ii(t){
// Coerce `object` to an object to avoid non-object errors in V8.
// See https://bugs.chromium.org/p/v8/issues/detail?id=3443 for more details.
return Rc(Object(t))}/**
	     * Gets the `toStringTag` of `value`.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @returns {string} Returns the `toStringTag`.
	     */
function Li(t){return xc.call(t)}/**
	     * Gets the view, applying any `transforms` to the `start` and `end` positions.
	     *
	     * @private
	     * @param {number} start The start of the view.
	     * @param {number} end The end of the view.
	     * @param {Array} transforms The transformations to apply to the view.
	     * @returns {Object} Returns an object containing the `start` and `end`
	     *  positions of the view.
	     */
function qi(t,e,n){for(var r=-1,i=n.length;++r<i;){var o=n[r],a=o.size;switch(o.type){case"drop":t+=a;break;case"dropRight":e-=a;break;case"take":e=Bc(e,t+a);break;case"takeRight":t=Hc(t,e-a)}}return{start:t,end:e}}/**
	     * Checks if `path` exists on `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @param {Function} hasFunc The function to check properties.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     */
function Ui(t,e,n){e=Ji(e,t)?[e]:Ur(e);for(var r,i=-1,o=e.length;++i<o;){var a=oo(e[i]);if(!(r=null!=t&&n(t,a)))break;t=t[a]}if(r)return r;var o=t?t.length:0;return!!o&&pu(o)&&Gi(a,o)&&(af(t)||ku(t)||Qa(t))}/**
	     * Initializes an array clone.
	     *
	     * @private
	     * @param {Array} array The array to clone.
	     * @returns {Array} Returns the initialized clone.
	     */
function Fi(t){var e=t.length,n=t.constructor(e);
// Add properties assigned by `RegExp#exec`.
return e&&"string"==typeof t[0]&&$c.call(t,"index")&&(n.index=t.index,n.input=t.input),n}/**
	     * Initializes an object clone.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @returns {Object} Returns the initialized clone.
	     */
function Vi(t){return"function"!=typeof t.constructor||Zi(t)?{}:Tn(Mi(t))}/**
	     * Initializes an object clone based on its `toStringTag`.
	     *
	     * **Note:** This function only supports cloning values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @param {string} tag The `toStringTag` of the object to clone.
	     * @param {Function} cloneFunc The function to clone values.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the initialized clone.
	     */
function Hi(t,e,n,r){var i=t.constructor;switch(e){case zt:return Hr(t);case Rt:case jt:return new i((+t));case Gt:return Br(t,r);case Xt:case Jt:case Yt:case Kt:case Zt:case Qt:case te:case ee:case ne:return Jr(t,r);case Mt:return Wr(t,r,n);case It:case Vt:return new i(t);case Ut:return zr(t);case Ft:return Gr(t,r,n);case Ht:return Xr(t)}}/**
	     * Creates an array of index keys for `object` values of arrays,
	     * `arguments` objects, and strings, otherwise `null` is returned.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array|null} Returns index keys, else `null`.
	     */
function Bi(t){var e=t?t.length:K;return pu(e)&&(af(t)||ku(t)||Qa(t))?k(e,String):null}/**
	     * Checks if `value` is a flattenable `arguments` object or array.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
	     */
function Wi(t){return af(t)||Qa(t)}/**
	     * Checks if `value` is a flattenable array and not a `_.matchesProperty`
	     * iteratee shorthand.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
	     */
function zi(t){return af(t)&&!(2==t.length&&!fu(t[0]))}/**
	     * Checks if `value` is a valid array-like index.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	     */
function Gi(t,e){return e=null==e?_t:e,!!e&&("number"==typeof t||Oe.test(t))&&t>-1&&t%1==0&&t<e}/**
	     * Checks if the given arguments are from an iteratee call.
	     *
	     * @private
	     * @param {*} value The potential iteratee value argument.
	     * @param {*} index The potential iteratee index or key argument.
	     * @param {*} object The potential iteratee object argument.
	     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
	     *  else `false`.
	     */
function Xi(t,e,n){if(!du(n))return!1;var r=typeof e;return!!("number"==r?eu(n)&&Gi(e,n.length):"string"==r&&e in n)&&Za(n[e],t)}/**
	     * Checks if `value` is a property name and not a property path.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {Object} [object] The object to query keys on.
	     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	     */
function Ji(t,e){if(af(t))return!1;var n=typeof t;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=t&&!Tu(t))||(de.test(t)||!pe.test(t)||null!=e&&t in Object(e))}/**
	     * Checks if `value` is suitable for use as unique object key.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	     */
function Yi(t){var e=typeof t;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==t:null===t}/**
	     * Checks if `func` has a lazy counterpart.
	     *
	     * @private
	     * @param {Function} func The function to check.
	     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
	     *  else `false`.
	     */
function Ki(t){var n=Oi(t),r=e[n];if("function"!=typeof r||!(n in i.prototype))return!1;if(t===r)return!0;var o=$l(r);return!!o&&t===o[0]}/**
	     * Checks if `value` is likely a prototype object.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	     */
function Zi(t){var e=t&&t.constructor,n="function"==typeof e&&e.prototype||gc;return t===n}/**
	     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` if suitable for strict
	     *  equality comparisons, else `false`.
	     */
function Qi(t){return t===t&&!du(t)}/**
	     * A specialized version of `matchesProperty` for source values suitable
	     * for strict equality comparisons, i.e. `===`.
	     *
	     * @private
	     * @param {string} key The key of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new spec function.
	     */
function to(t,e){return function(n){return null!=n&&(n[t]===e&&(e!==K||t in Object(n)))}}/**
	     * Merges the function metadata of `source` into `data`.
	     *
	     * Merging metadata reduces the number of wrappers used to invoke a function.
	     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
	     * may be applied regardless of execution order. Methods like `_.ary` and
	     * `_.rearg` modify function arguments, making the order in which they are
	     * executed important, preventing the merging of metadata. However, we make
	     * an exception for a safe combined case where curried functions have `_.ary`
	     * and or `_.rearg` applied.
	     *
	     * @private
	     * @param {Array} data The destination metadata.
	     * @param {Array} source The source metadata.
	     * @returns {Array} Returns `data`.
	     */
function eo(t,e){var n=t[1],r=e[1],i=n|r,o=i<(rt|it|lt),a=r==lt&&n==at||r==lt&&n==ft&&t[7].length<=e[8]||r==(lt|ft)&&e[7].length<=e[8]&&n==at;
// Exit early if metadata can't be merged.
if(!o&&!a)return t;
// Use source `thisArg` if available.
r&rt&&(t[2]=e[2],
// Set when currying a bound function.
i|=n&rt?0:ot);
// Compose partial arguments.
var u=e[3];if(u){var s=t[3];t[3]=s?Zr(s,u,e[4]):u,t[4]=s?B(t[3],nt):e[4]}
// Compose partial right arguments.
// Use source `argPos` if available.
// Use source `ary` if it's smaller.
// Use source `arity` if one is not provided.
// Use source `func` and merge bitmasks.
return u=e[5],u&&(s=t[5],t[5]=s?Qr(s,u,e[6]):u,t[6]=s?B(t[5],nt):e[6]),u=e[7],u&&(t[7]=u),r&lt&&(t[8]=null==t[8]?e[8]:Bc(t[8],e[8])),null==t[9]&&(t[9]=e[9]),t[0]=e[0],t[1]=i,t}/**
	     * Used by `_.defaultsDeep` to customize its `_.merge` use.
	     *
	     * @private
	     * @param {*} objValue The destination value.
	     * @param {*} srcValue The source value.
	     * @param {string} key The key of the property to merge.
	     * @param {Object} object The parent object of `objValue`.
	     * @param {Object} source The parent object of `srcValue`.
	     * @param {Object} [stack] Tracks traversed source values and their merged
	     *  counterparts.
	     * @returns {*} Returns the value to assign.
	     */
function no(t,e,n,r,i,o){return du(t)&&du(e)&&lr(t,e,K,no,o.set(e,t)),t}/**
	     * Gets the parent value at `path` of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array} path The path to get the parent value of.
	     * @returns {*} Returns the parent value.
	     */
function ro(t,e){return 1==e.length?t:Wn(t,Cr(e,0,-1))}/**
	     * Reorder `array` according to the specified indexes where the element at
	     * the first index is assigned as the first element, the element at
	     * the second index is assigned as the second element, and so on.
	     *
	     * @private
	     * @param {Array} array The array to reorder.
	     * @param {Array} indexes The arranged array indexes.
	     * @returns {Array} Returns `array`.
	     */
function io(t,e){for(var n=t.length,r=Bc(e.length,n),i=ti(t);r--;){var o=e[r];t[r]=Gi(o,n)?i[o]:K}return t}/**
	     * Converts `value` to a string key if it's not a string or symbol.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {string|symbol} Returns the key.
	     */
function oo(t){if("string"==typeof t||Tu(t))return t;var e=t+"";return"0"==e&&1/t==-xt?"-0":e}/**
	     * Converts `func` to its source code.
	     *
	     * @private
	     * @param {Function} func The function to process.
	     * @returns {string} Returns the source code.
	     */
function ao(t){if(null!=t){try{return yc.call(t)}catch(e){}try{return t+""}catch(e){}}return""}/**
	     * Creates a clone of `wrapper`.
	     *
	     * @private
	     * @param {Object} wrapper The wrapper to clone.
	     * @returns {Object} Returns the cloned wrapper.
	     */
function uo(t){if(t instanceof i)return t.clone();var e=new r(t.__wrapped__,t.__chain__);return e.__actions__=ti(t.__actions__),e.__index__=t.__index__,e.__values__=t.__values__,e}/*------------------------------------------------------------------------*/
/**
	     * Creates an array of elements split into groups the length of `size`.
	     * If `array` can't be split evenly, the final chunk will be the remaining
	     * elements.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to process.
	     * @param {number} [size=1] The length of each chunk
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the new array of chunks.
	     * @example
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 2);
	     * // => [['a', 'b'], ['c', 'd']]
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 3);
	     * // => [['a', 'b', 'c'], ['d']]
	     */
function so(t,e,n){e=(n?Xi(t,e,n):e===K)?1:Hc(Mu(e),0);var r=t?t.length:0;if(!r||e<1)return[];for(var i=0,o=0,a=Array(Ic(r/e));i<r;)a[o++]=Cr(t,i,i+=e);return a}/**
	     * Creates an array with all falsey values removed. The values `false`, `null`,
	     * `0`, `""`, `undefined`, and `NaN` are falsey.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to compact.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.compact([0, 1, false, 2, '', 3]);
	     * // => [1, 2, 3]
	     */
function co(t){for(var e=-1,n=t?t.length:0,r=0,i=[];++e<n;){var o=t[e];o&&(i[r++]=o)}return i}/**
	     * Creates a new array concatenating `array` with any additional arrays
	     * and/or values.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to concatenate.
	     * @param {...*} [values] The values to concatenate.
	     * @returns {Array} Returns the new concatenated array.
	     * @example
	     *
	     * var array = [1];
	     * var other = _.concat(array, 2, [3], [[4]]);
	     *
	     * console.log(other);
	     * // => [1, 2, 3, [4]]
	     *
	     * console.log(array);
	     * // => [1]
	     */
function lo(){for(var t=arguments.length,e=Array(t?t-1:0),n=arguments[0],r=t;r--;)e[r-1]=arguments[r];return t?g(af(n)?ti(n):[n],qn(e,1)):[]}/**
	     * Creates a slice of `array` with `n` elements dropped from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.5.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.drop([1, 2, 3]);
	     * // => [2, 3]
	     *
	     * _.drop([1, 2, 3], 2);
	     * // => [3]
	     *
	     * _.drop([1, 2, 3], 5);
	     * // => []
	     *
	     * _.drop([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
function fo(t,e,n){var r=t?t.length:0;return r?(e=n||e===K?1:Mu(e),Cr(t,e<0?0:e,r)):[]}/**
	     * Creates a slice of `array` with `n` elements dropped from the end.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropRight([1, 2, 3]);
	     * // => [1, 2]
	     *
	     * _.dropRight([1, 2, 3], 2);
	     * // => [1]
	     *
	     * _.dropRight([1, 2, 3], 5);
	     * // => []
	     *
	     * _.dropRight([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
function ho(t,e,n){var r=t?t.length:0;return r?(e=n||e===K?1:Mu(e),e=r-e,Cr(t,0,e<0?0:e)):[]}/**
	     * Creates a slice of `array` excluding elements dropped from the end.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.dropRightWhile(users, function(o) { return !o.active; });
	     * // => objects for ['barney']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.dropRightWhile(users, ['active', false]);
	     * // => objects for ['barney']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.dropRightWhile(users, 'active');
	     * // => objects for ['barney', 'fred', 'pebbles']
	     */
function po(t,e){return t&&t.length?Pr(t,ji(e,3),!0,!0):[]}/**
	     * Creates a slice of `array` excluding elements dropped from the beginning.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.dropWhile(users, function(o) { return !o.active; });
	     * // => objects for ['pebbles']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.dropWhile(users, { 'user': 'barney', 'active': false });
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.dropWhile(users, ['active', false]);
	     * // => objects for ['pebbles']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.dropWhile(users, 'active');
	     * // => objects for ['barney', 'fred', 'pebbles']
	     */
function vo(t,e){return t&&t.length?Pr(t,ji(e,3),!0):[]}/**
	     * Fills elements of `array` with `value` from `start` up to, but not
	     * including, `end`.
	     *
	     * **Note:** This method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.2.0
	     * @category Array
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _.fill(array, 'a');
	     * console.log(array);
	     * // => ['a', 'a', 'a']
	     *
	     * _.fill(Array(3), 2);
	     * // => [2, 2, 2]
	     *
	     * _.fill([4, 6, 8, 10], '*', 1, 3);
	     * // => [4, '*', '*', 10]
	     */
function go(t,e,n,r){var i=t?t.length:0;return i?(n&&"number"!=typeof n&&Xi(t,e,n)&&(n=0,r=i),Mn(t,e,n,r)):[]}/**
	     * This method is like `_.find` except that it returns the index of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.1.0
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.findIndex(users, function(o) { return o.user == 'barney'; });
	     * // => 0
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findIndex(users, { 'user': 'fred', 'active': false });
	     * // => 1
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findIndex(users, ['active', false]);
	     * // => 0
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findIndex(users, 'active');
	     * // => 2
	     */
function mo(t,e){return t&&t.length?w(t,ji(e,3)):-1}/**
	     * This method is like `_.findIndex` except that it iterates over elements
	     * of `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
	     * // => 2
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
	     * // => 0
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findLastIndex(users, ['active', false]);
	     * // => 2
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findLastIndex(users, 'active');
	     * // => 0
	     */
function yo(t,e){return t&&t.length?w(t,ji(e,3),!0):-1}/**
	     * Flattens `array` a single level deep.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flatten([1, [2, [3, [4]], 5]]);
	     * // => [1, 2, [3, [4]], 5]
	     */
function $o(t){var e=t?t.length:0;return e?qn(t,1):[]}/**
	     * Recursively flattens `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flattenDeep([1, [2, [3, [4]], 5]]);
	     * // => [1, 2, 3, 4, 5]
	     */
function bo(t){var e=t?t.length:0;return e?qn(t,xt):[]}/**
	     * Recursively flatten `array` up to `depth` times.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.4.0
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @param {number} [depth=1] The maximum recursion depth.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * var array = [1, [2, [3, [4]], 5]];
	     *
	     * _.flattenDepth(array, 1);
	     * // => [1, 2, [3, [4]], 5]
	     *
	     * _.flattenDepth(array, 2);
	     * // => [1, 2, 3, [4], 5]
	     */
function wo(t,e){var n=t?t.length:0;return n?(e=e===K?1:Mu(e),qn(t,e)):[]}/**
	     * The inverse of `_.toPairs`; this method returns an object composed
	     * from key-value `pairs`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} pairs The key-value pairs.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.fromPairs([['fred', 30], ['barney', 40]]);
	     * // => { 'fred': 30, 'barney': 40 }
	     */
function xo(t){for(var e=-1,n=t?t.length:0,r={};++e<n;){var i=t[e];r[i[0]]=i[1]}return r}/**
	     * Gets the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @alias first
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the first element of `array`.
	     * @example
	     *
	     * _.head([1, 2, 3]);
	     * // => 1
	     *
	     * _.head([]);
	     * // => undefined
	     */
function _o(t){return t&&t.length?t[0]:K}/**
	     * Gets the index at which the first occurrence of `value` is found in `array`
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons. If `fromIndex` is negative, it's used as the
	     * offset from the end of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.indexOf([1, 2, 1, 2], 2);
	     * // => 1
	     *
	     * // Search from the `fromIndex`.
	     * _.indexOf([1, 2, 1, 2], 2, 2);
	     * // => 3
	     */
function Co(t,e,n){var r=t?t.length:0;return r?(n=Mu(n),n<0&&(n=Hc(r+n,0)),x(t,e,n)):-1}/**
	     * Gets all but the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.initial([1, 2, 3]);
	     * // => [1, 2]
	     */
function So(t){return ho(t,1)}/**
	     * Converts all elements in `array` into a string separated by `separator`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to convert.
	     * @param {string} [separator=','] The element separator.
	     * @returns {string} Returns the joined string.
	     * @example
	     *
	     * _.join(['a', 'b', 'c'], '~');
	     * // => 'a~b~c'
	     */
function Ao(t,e){return t?Fc.call(t,e):""}/**
	     * Gets the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the last element of `array`.
	     * @example
	     *
	     * _.last([1, 2, 3]);
	     * // => 3
	     */
function Eo(t){var e=t?t.length:0;return e?t[e-1]:K}/**
	     * This method is like `_.indexOf` except that it iterates over elements of
	     * `array` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=array.length-1] The index to search from.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.lastIndexOf([1, 2, 1, 2], 2);
	     * // => 3
	     *
	     * // Search from the `fromIndex`.
	     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
	     * // => 1
	     */
function ko(t,e,n){var r=t?t.length:0;if(!r)return-1;var i=r;if(n!==K&&(i=Mu(n),i=(i<0?Hc(r+i,0):Bc(i,r-1))+1),e!==e)return U(t,i,!0);for(;i--;)if(t[i]===e)return i;return-1}/**
	     * Gets the element at `n` index of `array`. If `n` is negative, the nth
	     * element from the end is returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.11.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=0] The index of the element to return.
	     * @returns {*} Returns the nth element of `array`.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'd'];
	     *
	     * _.nth(array, 1);
	     * // => 'b'
	     *
	     * _.nth(array, -2);
	     * // => 'c';
	     */
function To(t,e){return t&&t.length?hr(t,Mu(e)):K}/**
	     * This method is like `_.pull` except that it accepts an array of values to remove.
	     *
	     * **Note:** Unlike `_.difference`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3, 1, 2, 3];
	     *
	     * _.pullAll(array, [2, 3]);
	     * console.log(array);
	     * // => [1, 1]
	     */
function Oo(t,e){return t&&t.length&&e&&e.length?yr(t,e):t}/**
	     * This method is like `_.pullAll` except that it accepts `iteratee` which is
	     * invoked for each element of `array` and `values` to generate the criterion
	     * by which they're compared. The iteratee is invoked with one argument: (value).
	     *
	     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
	     *
	     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
	     * console.log(array);
	     * // => [{ 'x': 2 }]
	     */
function Ro(t,e,n){return t&&t.length&&e&&e.length?yr(t,e,ji(n)):t}/**
	     * This method is like `_.pullAll` except that it accepts `comparator` which
	     * is invoked to compare elements of `array` to `values`. The comparator is
	     * invoked with two arguments: (arrVal, othVal).
	     *
	     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.6.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
	     *
	     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
	     * console.log(array);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
	     */
function jo(t,e,n){return t&&t.length&&e&&e.length?yr(t,e,K,n):t}/**
	     * Removes all elements from `array` that `predicate` returns truthy for
	     * and returns an array of the removed elements. The predicate is invoked
	     * with three arguments: (value, index, array).
	     *
	     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
	     * to pull elements from an array by value.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = [1, 2, 3, 4];
	     * var evens = _.remove(array, function(n) {
	     *   return n % 2 == 0;
	     * });
	     *
	     * console.log(array);
	     * // => [1, 3]
	     *
	     * console.log(evens);
	     * // => [2, 4]
	     */
function No(t,e){var n=[];if(!t||!t.length)return n;var r=-1,i=[],o=t.length;for(e=ji(e,3);++r<o;){var a=t[r];e(a,r,t)&&(n.push(a),i.push(r))}return $r(t,i),n}/**
	     * Reverses `array` so that the first element becomes the last, the second
	     * element becomes the second to last, and so on.
	     *
	     * **Note:** This method mutates `array` and is based on
	     * [`Array#reverse`](https://mdn.io/Array/reverse).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _.reverse(array);
	     * // => [3, 2, 1]
	     *
	     * console.log(array);
	     * // => [3, 2, 1]
	     */
function Po(t){return t?Xc.call(t):t}/**
	     * Creates a slice of `array` from `start` up to, but not including, `end`.
	     *
	     * **Note:** This method is used instead of
	     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
	     * returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
function Do(t,e,n){var r=t?t.length:0;return r?(n&&"number"!=typeof n&&Xi(t,e,n)?(e=0,n=r):(e=null==e?0:Mu(e),n=n===K?r:Mu(n)),Cr(t,e,n)):[]}/**
	     * Uses a binary search to determine the lowest index at which `value`
	     * should be inserted into `array` in order to maintain its sort order.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedIndex([30, 50], 40);
	     * // => 1
	     *
	     * _.sortedIndex([4, 5], 4);
	     * // => 0
	     */
function Mo(t,e){return Ar(t,e)}/**
	     * This method is like `_.sortedIndex` except that it accepts `iteratee`
	     * which is invoked for `value` and each element of `array` to compute their
	     * sort ranking. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * var dict = { 'thirty': 30, 'forty': 40, 'fifty': 50 };
	     *
	     * _.sortedIndexBy(['thirty', 'fifty'], 'forty', _.propertyOf(dict));
	     * // => 1
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sortedIndexBy([{ 'x': 4 }, { 'x': 5 }], { 'x': 4 }, 'x');
	     * // => 0
	     */
function Io(t,e,n){return Er(t,e,ji(n))}/**
	     * This method is like `_.indexOf` except that it performs a binary
	     * search on a sorted `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {*} value The value to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.sortedIndexOf([1, 1, 2, 2], 2);
	     * // => 2
	     */
function Lo(t,e){var n=t?t.length:0;if(n){var r=Ar(t,e);if(r<n&&Za(t[r],e))return r}return-1}/**
	     * This method is like `_.sortedIndex` except that it returns the highest
	     * index at which `value` should be inserted into `array` in order to
	     * maintain its sort order.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedLastIndex([4, 5], 4);
	     * // => 1
	     */
function qo(t,e){return Ar(t,e,!0)}/**
	     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
	     * which is invoked for `value` and each element of `array` to compute their
	     * sort ranking. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sortedLastIndexBy([{ 'x': 4 }, { 'x': 5 }], { 'x': 4 }, 'x');
	     * // => 1
	     */
function Uo(t,e,n){return Er(t,e,ji(n),!0)}/**
	     * This method is like `_.lastIndexOf` except that it performs a binary
	     * search on a sorted `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {*} value The value to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.sortedLastIndexOf([1, 1, 2, 2], 2);
	     * // => 3
	     */
function Fo(t,e){var n=t?t.length:0;if(n){var r=Ar(t,e,!0)-1;if(Za(t[r],e))return r}return-1}/**
	     * This method is like `_.uniq` except that it's designed and optimized
	     * for sorted arrays.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.sortedUniq([1, 1, 2]);
	     * // => [1, 2]
	     */
function Vo(t){return t&&t.length?kr(t):[]}/**
	     * This method is like `_.uniqBy` except that it's designed and optimized
	     * for sorted arrays.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
	     * // => [1.1, 2.3]
	     */
function Ho(t,e){return t&&t.length?kr(t,ji(e)):[]}/**
	     * Gets all but the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.tail([1, 2, 3]);
	     * // => [2, 3]
	     */
function Bo(t){return fo(t,1)}/**
	     * Creates a slice of `array` with `n` elements taken from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.take([1, 2, 3]);
	     * // => [1]
	     *
	     * _.take([1, 2, 3], 2);
	     * // => [1, 2]
	     *
	     * _.take([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.take([1, 2, 3], 0);
	     * // => []
	     */
function Wo(t,e,n){return t&&t.length?(e=n||e===K?1:Mu(e),Cr(t,0,e<0?0:e)):[]}/**
	     * Creates a slice of `array` with `n` elements taken from the end.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeRight([1, 2, 3]);
	     * // => [3]
	     *
	     * _.takeRight([1, 2, 3], 2);
	     * // => [2, 3]
	     *
	     * _.takeRight([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.takeRight([1, 2, 3], 0);
	     * // => []
	     */
function zo(t,e,n){var r=t?t.length:0;return r?(e=n||e===K?1:Mu(e),e=r-e,Cr(t,e<0?0:e,r)):[]}/**
	     * Creates a slice of `array` with elements taken from the end. Elements are
	     * taken until `predicate` returns falsey. The predicate is invoked with
	     * three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.takeRightWhile(users, function(o) { return !o.active; });
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
	     * // => objects for ['pebbles']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.takeRightWhile(users, ['active', false]);
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.takeRightWhile(users, 'active');
	     * // => []
	     */
function Go(t,e){return t&&t.length?Pr(t,ji(e,3),!1,!0):[]}/**
	     * Creates a slice of `array` with elements taken from the beginning. Elements
	     * are taken until `predicate` returns falsey. The predicate is invoked with
	     * three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false},
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.takeWhile(users, function(o) { return !o.active; });
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.takeWhile(users, { 'user': 'barney', 'active': false });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.takeWhile(users, ['active', false]);
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.takeWhile(users, 'active');
	     * // => []
	     */
function Xo(t,e){return t&&t.length?Pr(t,ji(e,3)):[]}/**
	     * Creates a duplicate-free version of an array, using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons, in which only the first occurrence of each
	     * element is kept.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.uniq([2, 1, 2]);
	     * // => [2, 1]
	     */
function Jo(t){return t&&t.length?Rr(t):[]}/**
	     * This method is like `_.uniq` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * uniqueness is computed. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
	     * // => [2.1, 1.2]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }, { 'x': 2 }]
	     */
function Yo(t,e){return t&&t.length?Rr(t,ji(e)):[]}/**
	     * This method is like `_.uniq` except that it accepts `comparator` which
	     * is invoked to compare elements of `array`. The comparator is invoked with
	     * two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 },  { 'x': 1, 'y': 2 }];
	     *
	     * _.uniqWith(objects, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
	     */
function Ko(t,e){return t&&t.length?Rr(t,K,e):[]}/**
	     * This method is like `_.zip` except that it accepts an array of grouped
	     * elements and creates an array regrouping the elements to their pre-zip
	     * configuration.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.2.0
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);
	     * // => [['fred', 30, true], ['barney', 40, false]]
	     *
	     * _.unzip(zipped);
	     * // => [['fred', 'barney'], [30, 40], [true, false]]
	     */
function Zo(t){if(!t||!t.length)return[];var e=0;return t=h(t,function(t){if(nu(t))return e=Hc(t.length,e),!0}),k(e,function(e){return v(t,gr(e))})}/**
	     * This method is like `_.unzip` except that it accepts `iteratee` to specify
	     * how regrouped values should be combined. The iteratee is invoked with the
	     * elements of each group: (...group).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.8.0
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @param {Function} [iteratee=_.identity] The function to combine
	     *  regrouped values.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
	     * // => [[1, 10, 100], [2, 20, 200]]
	     *
	     * _.unzipWith(zipped, _.add);
	     * // => [3, 30, 300]
	     */
function Qo(t,e){if(!t||!t.length)return[];var n=Zo(t);return null==e?n:v(n,function(t){return u(e,K,t)})}/**
	     * This method is like `_.fromPairs` except that it accepts two arrays,
	     * one of property identifiers and one of corresponding values.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.4.0
	     * @category Array
	     * @param {Array} [props=[]] The property identifiers.
	     * @param {Array} [values=[]] The property values.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.zipObject(['a', 'b'], [1, 2]);
	     * // => { 'a': 1, 'b': 2 }
	     */
function ta(t,e){return Ir(t||[],e||[],hn)}/**
	     * This method is like `_.zipObject` except that it supports property paths.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.1.0
	     * @category Array
	     * @param {Array} [props=[]] The property identifiers.
	     * @param {Array} [values=[]] The property values.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
	     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
	     */
function ea(t,e){return Ir(t||[],e||[],_r)}/*------------------------------------------------------------------------*/
/**
	     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
	     * chain sequences enabled. The result of such sequences must be unwrapped
	     * with `_#value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.3.0
	     * @category Seq
	     * @param {*} value The value to wrap.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36 },
	     *   { 'user': 'fred',    'age': 40 },
	     *   { 'user': 'pebbles', 'age': 1 }
	     * ];
	     *
	     * var youngest = _
	     *   .chain(users)
	     *   .sortBy('age')
	     *   .map(function(o) {
	     *     return o.user + ' is ' + o.age;
	     *   })
	     *   .head()
	     *   .value();
	     * // => 'pebbles is 1'
	     */
function na(t){var n=e(t);return n.__chain__=!0,n}/**
	     * This method invokes `interceptor` and returns `value`. The interceptor
	     * is invoked with one argument; (value). The purpose of this method is to
	     * "tap into" a method chain sequence in order to modify intermediate results.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Seq
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * _([1, 2, 3])
	     *  .tap(function(array) {
	     *    // Mutate input array.
	     *    array.pop();
	     *  })
	     *  .reverse()
	     *  .value();
	     * // => [2, 1]
	     */
function ra(t,e){return e(t),t}/**
	     * This method is like `_.tap` except that it returns the result of `interceptor`.
	     * The purpose of this method is to "pass thru" values replacing intermediate
	     * results in a method chain sequence.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Seq
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @returns {*} Returns the result of `interceptor`.
	     * @example
	     *
	     * _('  abc  ')
	     *  .chain()
	     *  .trim()
	     *  .thru(function(value) {
	     *    return [value];
	     *  })
	     *  .value();
	     * // => ['abc']
	     */
function ia(t,e){return e(t)}/**
	     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
	     *
	     * @name chain
	     * @memberOf _
	     * @since 0.1.0
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * // A sequence without explicit chaining.
	     * _(users).head();
	     * // => { 'user': 'barney', 'age': 36 }
	     *
	     * // A sequence with explicit chaining.
	     * _(users)
	     *   .chain()
	     *   .head()
	     *   .pick('user')
	     *   .value();
	     * // => { 'user': 'barney' }
	     */
function oa(){return na(this)}/**
	     * Executes the chain sequence and returns the wrapped result.
	     *
	     * @name commit
	     * @memberOf _
	     * @since 3.2.0
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2];
	     * var wrapped = _(array).push(3);
	     *
	     * console.log(array);
	     * // => [1, 2]
	     *
	     * wrapped = wrapped.commit();
	     * console.log(array);
	     * // => [1, 2, 3]
	     *
	     * wrapped.last();
	     * // => 3
	     *
	     * console.log(array);
	     * // => [1, 2, 3]
	     */
function aa(){return new r(this.value(),this.__chain__)}/**
	     * Gets the next value on a wrapped object following the
	     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
	     *
	     * @name next
	     * @memberOf _
	     * @since 4.0.0
	     * @category Seq
	     * @returns {Object} Returns the next iterator value.
	     * @example
	     *
	     * var wrapped = _([1, 2]);
	     *
	     * wrapped.next();
	     * // => { 'done': false, 'value': 1 }
	     *
	     * wrapped.next();
	     * // => { 'done': false, 'value': 2 }
	     *
	     * wrapped.next();
	     * // => { 'done': true, 'value': undefined }
	     */
function ua(){this.__values__===K&&(this.__values__=Pu(this.value()));var t=this.__index__>=this.__values__.length,e=t?K:this.__values__[this.__index__++];return{done:t,value:e}}/**
	     * Enables the wrapper to be iterable.
	     *
	     * @name Symbol.iterator
	     * @memberOf _
	     * @since 4.0.0
	     * @category Seq
	     * @returns {Object} Returns the wrapper object.
	     * @example
	     *
	     * var wrapped = _([1, 2]);
	     *
	     * wrapped[Symbol.iterator]() === wrapped;
	     * // => true
	     *
	     * Array.from(wrapped);
	     * // => [1, 2]
	     */
function sa(){return this}/**
	     * Creates a clone of the chain sequence planting `value` as the wrapped value.
	     *
	     * @name plant
	     * @memberOf _
	     * @since 3.2.0
	     * @category Seq
	     * @param {*} value The value to plant.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var wrapped = _([1, 2]).map(square);
	     * var other = wrapped.plant([3, 4]);
	     *
	     * other.value();
	     * // => [9, 16]
	     *
	     * wrapped.value();
	     * // => [1, 4]
	     */
function ca(t){for(var e,r=this;r instanceof n;){var i=uo(r);i.__index__=0,i.__values__=K,e?o.__wrapped__=i:e=i;var o=i;r=r.__wrapped__}return o.__wrapped__=t,e}/**
	     * This method is the wrapper version of `_.reverse`.
	     *
	     * **Note:** This method mutates the wrapped array.
	     *
	     * @name reverse
	     * @memberOf _
	     * @since 0.1.0
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _(array).reverse().value()
	     * // => [3, 2, 1]
	     *
	     * console.log(array);
	     * // => [3, 2, 1]
	     */
function la(){var t=this.__wrapped__;if(t instanceof i){var e=t;return this.__actions__.length&&(e=new i(this)),e=e.reverse(),e.__actions__.push({func:ia,args:[Po],thisArg:K}),new r(e,this.__chain__)}return this.thru(Po)}/**
	     * Executes the chain sequence to resolve the unwrapped value.
	     *
	     * @name value
	     * @memberOf _
	     * @since 0.1.0
	     * @alias toJSON, valueOf
	     * @category Seq
	     * @returns {*} Returns the resolved unwrapped value.
	     * @example
	     *
	     * _([1, 2, 3]).value();
	     * // => [1, 2, 3]
	     */
function fa(){return Dr(this.__wrapped__,this.__actions__)}/**
	     * Checks if `predicate` returns truthy for **all** elements of `collection`.
	     * Iteration is stopped once `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.every([true, 1, null, 'yes'], Boolean);
	     * // => false
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.every(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.every(users, ['active', false]);
	     * // => true
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.every(users, 'active');
	     * // => false
	     */
function ha(t,e,n){var r=af(t)?f:jn;return n&&Xi(t,e,n)&&(e=K),r(t,ji(e,3))}/**
	     * Iterates over elements of `collection`, returning an array of all elements
	     * `predicate` returns truthy for. The predicate is invoked with three
	     * arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     * @see _.reject
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * _.filter(users, function(o) { return !o.active; });
	     * // => objects for ['fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.filter(users, { 'age': 36, 'active': true });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.filter(users, ['active', false]);
	     * // => objects for ['fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.filter(users, 'active');
	     * // => objects for ['barney']
	     */
function pa(t,e){var n=af(t)?h:Ln;return n(t,ji(e,3))}/**
	     * Iterates over elements of `collection`, returning the first element
	     * `predicate` returns truthy for. The predicate is invoked with three
	     * arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to search.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': true },
	     *   { 'user': 'fred',    'age': 40, 'active': false },
	     *   { 'user': 'pebbles', 'age': 1,  'active': true }
	     * ];
	     *
	     * _.find(users, function(o) { return o.age < 40; });
	     * // => object for 'barney'
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.find(users, { 'age': 1, 'active': true });
	     * // => object for 'pebbles'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.find(users, ['active', false]);
	     * // => object for 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.find(users, 'active');
	     * // => object for 'barney'
	     */
function da(t,e){if(e=ji(e,3),af(t)){var n=w(t,e);return n>-1?t[n]:K}return b(t,e,pl)}/**
	     * This method is like `_.find` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to search.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * _.findLast([1, 2, 3, 4], function(n) {
	     *   return n % 2 == 1;
	     * });
	     * // => 3
	     */
function va(t,e){if(e=ji(e,3),af(t)){var n=w(t,e,!0);return n>-1?t[n]:K}return b(t,e,dl)}/**
	     * Creates a flattened array of values by running each element in `collection`
	     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
	     * with three arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [n, n];
	     * }
	     *
	     * _.flatMap([1, 2], duplicate);
	     * // => [1, 1, 2, 2]
	     */
function ga(t,e){return qn(xa(t,e),1)}/**
	     * This method is like `_.flatMap` except that it recursively flattens the
	     * mapped results.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [[[n, n]]];
	     * }
	     *
	     * _.flatMapDeep([1, 2], duplicate);
	     * // => [1, 1, 2, 2]
	     */
function ma(t,e){return qn(xa(t,e),xt)}/**
	     * This method is like `_.flatMap` except that it recursively flattens the
	     * mapped results up to `depth` times.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The function invoked per iteration.
	     * @param {number} [depth=1] The maximum recursion depth.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [[[n, n]]];
	     * }
	     *
	     * _.flatMapDepth([1, 2], duplicate, 2);
	     * // => [[1, 1], [2, 2]]
	     */
function ya(t,e,n){return n=n===K?1:Mu(n),qn(xa(t,e),n)}/**
	     * Iterates over elements of `collection` and invokes `iteratee` for each element.
	     * The iteratee is invoked with three arguments: (value, index|key, collection).
	     * Iteratee functions may exit iteration early by explicitly returning `false`.
	     *
	     * **Note:** As with other "Collections" methods, objects with a "length"
	     * property are iterated like arrays. To avoid this behavior use `_.forIn`
	     * or `_.forOwn` for object iteration.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @alias each
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     * @see _.forEachRight
	     * @example
	     *
	     * _([1, 2]).forEach(function(value) {
	     *   console.log(value);
	     * });
	     * // => Logs `1` then `2`.
	     *
	     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
	     */
function $a(t,e){var n=af(t)?c:pl;return n(t,ji(e,3))}/**
	     * This method is like `_.forEach` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @alias eachRight
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     * @see _.forEach
	     * @example
	     *
	     * _.forEachRight([1, 2], function(value) {
	     *   console.log(value);
	     * });
	     * // => Logs `2` then `1`.
	     */
function ba(t,e){var n=af(t)?l:dl;return n(t,ji(e,3))}/**
	     * Checks if `value` is in `collection`. If `collection` is a string, it's
	     * checked for a substring of `value`, otherwise
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * is used for equality comparisons. If `fromIndex` is negative, it's used as
	     * the offset from the end of `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
	     * @returns {boolean} Returns `true` if `value` is found, else `false`.
	     * @example
	     *
	     * _.includes([1, 2, 3], 1);
	     * // => true
	     *
	     * _.includes([1, 2, 3], 1, 2);
	     * // => false
	     *
	     * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');
	     * // => true
	     *
	     * _.includes('pebbles', 'eb');
	     * // => true
	     */
function wa(t,e,n,r){t=eu(t)?t:ps(t),n=n&&!r?Mu(n):0;var i=t.length;return n<0&&(n=Hc(i+n,0)),ku(t)?n<=i&&t.indexOf(e,n)>-1:!!i&&x(t,e,n)>-1}/**
	     * Creates an array of values by running each element in `collection` thru
	     * `iteratee`. The iteratee is invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
	     *
	     * The guarded methods are:
	     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
	     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
	     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
	     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * _.map([4, 8], square);
	     * // => [16, 64]
	     *
	     * _.map({ 'a': 4, 'b': 8 }, square);
	     * // => [16, 64] (iteration order is not guaranteed)
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.map(users, 'user');
	     * // => ['barney', 'fred']
	     */
function xa(t,e){var n=af(t)?v:ur;return n(t,ji(e,3))}/**
	     * This method is like `_.sortBy` except that it allows specifying the sort
	     * orders of the iteratees to sort by. If `orders` is unspecified, all values
	     * are sorted in ascending order. Otherwise, specify an order of "desc" for
	     * descending or "asc" for ascending sort order of corresponding values.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
	     *  The iteratees to sort by.
	     * @param {string[]} [orders] The sort orders of `iteratees`.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 34 },
	     *   { 'user': 'fred',   'age': 40 },
	     *   { 'user': 'barney', 'age': 36 }
	     * ];
	     *
	     * // Sort by `user` in ascending order and by `age` in descending order.
	     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
	     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
	     */
function _a(t,e,n,r){return null==t?[]:(af(e)||(e=null==e?[]:[e]),n=r?K:n,af(n)||(n=null==n?[]:[n]),pr(t,e,n))}/**
	     * Reduces `collection` to a value which is the accumulated result of running
	     * each element in `collection` thru `iteratee`, where each successive
	     * invocation is supplied the return value of the previous. If `accumulator`
	     * is not given, the first element of `collection` is used as the initial
	     * value. The iteratee is invoked with four arguments:
	     * (accumulator, value, index|key, collection).
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.reduce`, `_.reduceRight`, and `_.transform`.
	     *
	     * The guarded methods are:
	     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
	     * and `sortBy`
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @returns {*} Returns the accumulated value.
	     * @see _.reduceRight
	     * @example
	     *
	     * _.reduce([1, 2], function(sum, n) {
	     *   return sum + n;
	     * }, 0);
	     * // => 3
	     *
	     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
	     *   (result[value] || (result[value] = [])).push(key);
	     *   return result;
	     * }, {});
	     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
	     */
function Ca(t,e,n){var r=af(t)?m:S,i=arguments.length<3;return r(t,ji(e,4),n,i,pl)}/**
	     * This method is like `_.reduce` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @returns {*} Returns the accumulated value.
	     * @see _.reduce
	     * @example
	     *
	     * var array = [[0, 1], [2, 3], [4, 5]];
	     *
	     * _.reduceRight(array, function(flattened, other) {
	     *   return flattened.concat(other);
	     * }, []);
	     * // => [4, 5, 2, 3, 0, 1]
	     */
function Sa(t,e,n){var r=af(t)?y:S,i=arguments.length<3;return r(t,ji(e,4),n,i,dl)}/**
	     * The opposite of `_.filter`; this method returns the elements of `collection`
	     * that `predicate` does **not** return truthy for.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     * @see _.filter
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false },
	     *   { 'user': 'fred',   'age': 40, 'active': true }
	     * ];
	     *
	     * _.reject(users, function(o) { return !o.active; });
	     * // => objects for ['fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.reject(users, { 'age': 40, 'active': true });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.reject(users, ['active', false]);
	     * // => objects for ['fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.reject(users, 'active');
	     * // => objects for ['barney']
	     */
function Aa(t,e){var n=af(t)?h:Ln;return e=ji(e,3),n(t,function(t,n,r){return!e(t,n,r)})}/**
	     * Gets a random element from `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to sample.
	     * @returns {*} Returns the random element.
	     * @example
	     *
	     * _.sample([1, 2, 3, 4]);
	     * // => 2
	     */
function Ea(t){var e=eu(t)?t:ps(t),n=e.length;return n>0?e[br(0,n-1)]:K}/**
	     * Gets `n` random elements at unique keys from `collection` up to the
	     * size of `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to sample.
	     * @param {number} [n=1] The number of elements to sample.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the random elements.
	     * @example
	     *
	     * _.sampleSize([1, 2, 3], 2);
	     * // => [3, 1]
	     *
	     * _.sampleSize([1, 2, 3], 4);
	     * // => [2, 3, 1]
	     */
function ka(t,e,n){var r=-1,i=Pu(t),o=i.length,a=o-1;for(e=(n?Xi(t,e,n):e===K)?1:mn(Mu(e),0,o);++r<e;){var u=br(r,a),s=i[u];i[u]=i[r],i[r]=s}return i.length=e,i}/**
	     * Creates an array of shuffled values, using a version of the
	     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     * @example
	     *
	     * _.shuffle([1, 2, 3, 4]);
	     * // => [4, 1, 3, 2]
	     */
function Ta(t){return ka(t,At)}/**
	     * Gets the size of `collection` by returning its length for array-like
	     * values or the number of own enumerable string keyed properties for objects.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to inspect.
	     * @returns {number} Returns the collection size.
	     * @example
	     *
	     * _.size([1, 2, 3]);
	     * // => 3
	     *
	     * _.size({ 'a': 1, 'b': 2 });
	     * // => 2
	     *
	     * _.size('pebbles');
	     * // => 7
	     */
function Oa(t){if(null==t)return 0;if(eu(t)){var e=t.length;return e&&ku(t)?G(t):e}if(vu(t)){var n=Li(t);if(n==Mt||n==Ft)return t.size}return ts(t).length}/**
	     * Checks if `predicate` returns truthy for **any** element of `collection`.
	     * Iteration is stopped once `predicate` returns truthy. The predicate is
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.some([null, 0, 'yes', false], Boolean);
	     * // => true
	     *
	     * var users = [
	     *   { 'user': 'barney', 'active': true },
	     *   { 'user': 'fred',   'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.some(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.some(users, ['active', false]);
	     * // => true
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.some(users, 'active');
	     * // => true
	     */
function Ra(t,e,n){var r=af(t)?$:Sr;return n&&Xi(t,e,n)&&(e=K),r(t,ji(e,3))}/*------------------------------------------------------------------------*/
/**
	     * The opposite of `_.before`; this method creates a function that invokes
	     * `func` once it's called `n` or more times.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {number} n The number of calls before `func` is invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var saves = ['profile', 'settings'];
	     *
	     * var done = _.after(saves.length, function() {
	     *   console.log('done saving!');
	     * });
	     *
	     * _.forEach(saves, function(type) {
	     *   asyncSave({ 'type': type, 'complete': done });
	     * });
	     * // => Logs 'done saving!' after the two async saves have completed.
	     */
function ja(t,e){if("function"!=typeof e)throw new dc(tt);return t=Mu(t),function(){if(--t<1)return e.apply(this,arguments)}}/**
	     * Creates a function that invokes `func`, with up to `n` arguments,
	     * ignoring any additional arguments.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} func The function to cap arguments for.
	     * @param {number} [n=func.length] The arity cap.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the new capped function.
	     * @example
	     *
	     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
	     * // => [6, 8, 10]
	     */
function Na(t,e,n){return e=n?K:e,e=t&&null==e?t.length:e,Ci(t,lt,K,K,K,K,e)}/**
	     * Creates a function that invokes `func`, with the `this` binding and arguments
	     * of the created function, while it's called less than `n` times. Subsequent
	     * calls to the created function return the result of the last `func` invocation.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {number} n The number of calls at which `func` is no longer invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * jQuery(element).on('click', _.before(5, addContactToList));
	     * // => allows adding up to 4 contacts to the list
	     */
function Pa(t,e){var n;if("function"!=typeof e)throw new dc(tt);return t=Mu(t),function(){return--t>0&&(n=e.apply(this,arguments)),t<=1&&(e=K),n}}/**
	     * Creates a function that accepts arguments of `func` and either invokes
	     * `func` returning its result, if at least `arity` number of arguments have
	     * been provided, or returns a function that accepts the remaining `func`
	     * arguments, and so on. The arity of `func` may be specified if `func.length`
	     * is not sufficient.
	     *
	     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curry(abc);
	     *
	     * curried(1)(2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // Curried with placeholders.
	     * curried(1)(_, 3)(2);
	     * // => [1, 2, 3]
	     */
function Da(t,e,n){e=n?K:e;var r=Ci(t,at,K,K,K,K,K,e);return r.placeholder=Da.placeholder,r}/**
	     * This method is like `_.curry` except that arguments are applied to `func`
	     * in the manner of `_.partialRight` instead of `_.partial`.
	     *
	     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curryRight(abc);
	     *
	     * curried(3)(2)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(2, 3)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // Curried with placeholders.
	     * curried(3)(1, _)(2);
	     * // => [1, 2, 3]
	     */
function Ma(t,e,n){e=n?K:e;var r=Ci(t,ut,K,K,K,K,K,e);return r.placeholder=Ma.placeholder,r}/**
	     * Creates a debounced function that delays invoking `func` until after `wait`
	     * milliseconds have elapsed since the last time the debounced function was
	     * invoked. The debounced function comes with a `cancel` method to cancel
	     * delayed `func` invocations and a `flush` method to immediately invoke them.
	     * Provide an options object to indicate whether `func` should be invoked on
	     * the leading and/or trailing edge of the `wait` timeout. The `func` is invoked
	     * with the last arguments provided to the debounced function. Subsequent calls
	     * to the debounced function return the result of the last `func` invocation.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
	     * on the trailing edge of the timeout only if the debounced function is
	     * invoked more than once during the `wait` timeout.
	     *
	     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	     * for details over the differences between `_.debounce` and `_.throttle`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to debounce.
	     * @param {number} [wait=0] The number of milliseconds to delay.
	     * @param {Object} [options={}] The options object.
	     * @param {boolean} [options.leading=false]
	     *  Specify invoking on the leading edge of the timeout.
	     * @param {number} [options.maxWait]
	     *  The maximum time `func` is allowed to be delayed before it's invoked.
	     * @param {boolean} [options.trailing=true]
	     *  Specify invoking on the trailing edge of the timeout.
	     * @returns {Function} Returns the new debounced function.
	     * @example
	     *
	     * // Avoid costly calculations while the window size is in flux.
	     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
	     *
	     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
	     * jQuery(element).on('click', _.debounce(sendMail, 300, {
	     *   'leading': true,
	     *   'trailing': false
	     * }));
	     *
	     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
	     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
	     * var source = new EventSource('/stream');
	     * jQuery(source).on('message', debounced);
	     *
	     * // Cancel the trailing debounced invocation.
	     * jQuery(window).on('popstate', debounced.cancel);
	     */
function Ia(t,e,n){function r(e){var n=h,r=p;return h=p=K,y=e,v=t.apply(r,n)}function i(t){
// Invoke the leading edge.
// Reset any `maxWait` timer.
// Start the timer for the trailing edge.
return y=t,g=Dc(u,e),$?r(t):v}function o(t){var n=t-m,r=t-y,i=e-n;return b?Bc(i,d-r):i}function a(t){var n=t-m,r=t-y;
// Either this is the first call, activity has stopped and we're at the
// trailing edge, the system time has gone backwards and we're treating
// it as the trailing edge, or we've hit the `maxWait` limit.
return!m||n>=e||n<0||b&&r>=d}function u(){var t=Xl();
// Restart the timer.
return a(t)?s(t):void(g=Dc(u,o(t)))}function s(t){
// Only invoke if we have `lastArgs` which means `func` has been
// debounced at least once.
// Only invoke if we have `lastArgs` which means `func` has been
// debounced at least once.
return Tc(g),g=K,w&&h?r(t):(h=p=K,v)}function c(){g!==K&&Tc(g),m=y=0,h=p=g=K}function l(){return g===K?v:s(Xl())}function f(){var t=Xl(),n=a(t);if(h=arguments,p=this,m=t,n){if(g===K)return i(m);if(b)
// Handle invocations in a tight loop.
return Tc(g),g=Dc(u,e),r(m)}return g===K&&(g=Dc(u,e)),v}var h,p,d,v,g,m=0,y=0,$=!1,b=!1,w=!0;if("function"!=typeof t)throw new dc(tt);return e=Lu(e)||0,du(n)&&($=!!n.leading,b="maxWait"in n,d=b?Hc(Lu(n.maxWait)||0,e):d,w="trailing"in n?!!n.trailing:w),f.cancel=c,f.flush=l,f}/**
	     * Creates a function that invokes `func` with arguments reversed.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Function
	     * @param {Function} func The function to flip arguments for.
	     * @returns {Function} Returns the new flipped function.
	     * @example
	     *
	     * var flipped = _.flip(function() {
	     *   return _.toArray(arguments);
	     * });
	     *
	     * flipped('a', 'b', 'c', 'd');
	     * // => ['d', 'c', 'b', 'a']
	     */
function La(t){return Ci(t,ht)}/**
	     * Creates a function that memoizes the result of `func`. If `resolver` is
	     * provided, it determines the cache key for storing the result based on the
	     * arguments provided to the memoized function. By default, the first argument
	     * provided to the memoized function is used as the map cache key. The `func`
	     * is invoked with the `this` binding of the memoized function.
	     *
	     * **Note:** The cache is exposed as the `cache` property on the memoized
	     * function. Its creation may be customized by replacing the `_.memoize.Cache`
	     * constructor with one whose instances implement the
	     * [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)
	     * method interface of `delete`, `get`, `has`, and `set`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to have its output memoized.
	     * @param {Function} [resolver] The function to resolve the cache key.
	     * @returns {Function} Returns the new memoized function.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2 };
	     * var other = { 'c': 3, 'd': 4 };
	     *
	     * var values = _.memoize(_.values);
	     * values(object);
	     * // => [1, 2]
	     *
	     * values(other);
	     * // => [3, 4]
	     *
	     * object.a = 2;
	     * values(object);
	     * // => [1, 2]
	     *
	     * // Modify the result cache.
	     * values.cache.set(object, ['a', 'b']);
	     * values(object);
	     * // => ['a', 'b']
	     *
	     * // Replace `_.memoize.Cache`.
	     * _.memoize.Cache = WeakMap;
	     */
function qa(t,e){if("function"!=typeof t||e&&"function"!=typeof e)throw new dc(tt);var n=function(){var r=arguments,i=e?e.apply(this,r):r[0],o=n.cache;if(o.has(i))return o.get(i);var a=t.apply(this,r);return n.cache=o.set(i,a),a};return n.cache=new(qa.Cache||Xe),n}/**
	     * Creates a function that negates the result of the predicate `func`. The
	     * `func` predicate is invoked with the `this` binding and arguments of the
	     * created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} predicate The predicate to negate.
	     * @returns {Function} Returns the new negated function.
	     * @example
	     *
	     * function isEven(n) {
	     *   return n % 2 == 0;
	     * }
	     *
	     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
	     * // => [1, 3, 5]
	     */
function Ua(t){if("function"!=typeof t)throw new dc(tt);return function(){return!t.apply(this,arguments)}}/**
	     * Creates a function that is restricted to invoking `func` once. Repeat calls
	     * to the function return the value of the first invocation. The `func` is
	     * invoked with the `this` binding and arguments of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var initialize = _.once(createApplication);
	     * initialize();
	     * initialize();
	     * // `initialize` invokes `createApplication` once
	     */
function Fa(t){return Pa(2,t)}/**
	     * Creates a function that invokes `func` with the `this` binding of the
	     * created function and arguments from `start` and beyond provided as
	     * an array.
	     *
	     * **Note:** This method is based on the
	     * [rest parameter](https://mdn.io/rest_parameters).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Function
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.rest(function(what, names) {
	     *   return what + ' ' + _.initial(names).join(', ') +
	     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
	     * });
	     *
	     * say('hello', 'fred', 'barney', 'pebbles');
	     * // => 'hello fred, barney, & pebbles'
	     */
function Va(t,e){if("function"!=typeof t)throw new dc(tt);return e=Hc(e===K?t.length-1:Mu(e),0),function(){for(var n=arguments,r=-1,i=Hc(n.length-e,0),o=Array(i);++r<i;)o[r]=n[e+r];switch(e){case 0:return t.call(this,o);case 1:return t.call(this,n[0],o);case 2:return t.call(this,n[0],n[1],o)}var a=Array(e+1);for(r=-1;++r<e;)a[r]=n[r];return a[e]=o,u(t,this,a)}}/**
	     * Creates a function that invokes `func` with the `this` binding of the
	     * create function and an array of arguments much like
	     * [`Function#apply`](http://www.ecma-international.org/ecma-262/6.0/#sec-function.prototype.apply).
	     *
	     * **Note:** This method is based on the
	     * [spread operator](https://mdn.io/spread_operator).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.2.0
	     * @category Function
	     * @param {Function} func The function to spread arguments over.
	     * @param {number} [start=0] The start position of the spread.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.spread(function(who, what) {
	     *   return who + ' says ' + what;
	     * });
	     *
	     * say(['fred', 'hello']);
	     * // => 'fred says hello'
	     *
	     * var numbers = Promise.all([
	     *   Promise.resolve(40),
	     *   Promise.resolve(36)
	     * ]);
	     *
	     * numbers.then(_.spread(function(x, y) {
	     *   return x + y;
	     * }));
	     * // => a Promise of 76
	     */
function Ha(t,e){if("function"!=typeof t)throw new dc(tt);return e=e===K?0:Hc(Mu(e),0),Va(function(n){var r=n[e],i=Fr(n,0,e);return r&&g(i,r),u(t,this,i)})}/**
	     * Creates a throttled function that only invokes `func` at most once per
	     * every `wait` milliseconds. The throttled function comes with a `cancel`
	     * method to cancel delayed `func` invocations and a `flush` method to
	     * immediately invoke them. Provide an options object to indicate whether
	     * `func` should be invoked on the leading and/or trailing edge of the `wait`
	     * timeout. The `func` is invoked with the last arguments provided to the
	     * throttled function. Subsequent calls to the throttled function return the
	     * result of the last `func` invocation.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is
	     * invoked on the trailing edge of the timeout only if the throttled function
	     * is invoked more than once during the `wait` timeout.
	     *
	     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	     * for details over the differences between `_.throttle` and `_.debounce`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to throttle.
	     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
	     * @param {Object} [options={}] The options object.
	     * @param {boolean} [options.leading=true]
	     *  Specify invoking on the leading edge of the timeout.
	     * @param {boolean} [options.trailing=true]
	     *  Specify invoking on the trailing edge of the timeout.
	     * @returns {Function} Returns the new throttled function.
	     * @example
	     *
	     * // Avoid excessively updating the position while scrolling.
	     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
	     *
	     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
	     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
	     * jQuery(element).on('click', throttled);
	     *
	     * // Cancel the trailing throttled invocation.
	     * jQuery(window).on('popstate', throttled.cancel);
	     */
function Ba(t,e,n){var r=!0,i=!0;if("function"!=typeof t)throw new dc(tt);return du(n)&&(r="leading"in n?!!n.leading:r,i="trailing"in n?!!n.trailing:i),Ia(t,e,{leading:r,maxWait:e,trailing:i})}/**
	     * Creates a function that accepts up to one argument, ignoring any
	     * additional arguments.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Function
	     * @param {Function} func The function to cap arguments for.
	     * @returns {Function} Returns the new capped function.
	     * @example
	     *
	     * _.map(['6', '8', '10'], _.unary(parseInt));
	     * // => [6, 8, 10]
	     */
function Wa(t){return Na(t,1)}/**
	     * Creates a function that provides `value` to the wrapper function as its
	     * first argument. Any additional arguments provided to the function are
	     * appended to those provided to the wrapper function. The wrapper is invoked
	     * with the `this` binding of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {*} value The value to wrap.
	     * @param {Function} [wrapper=identity] The wrapper function.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var p = _.wrap(_.escape, function(func, text) {
	     *   return '<p>' + func(text) + '</p>';
	     * });
	     *
	     * p('fred, barney, & pebbles');
	     * // => '<p>fred, barney, &amp; pebbles</p>'
	     */
function za(t,e){return e=null==e?Hs:e,tf(e,t)}/*------------------------------------------------------------------------*/
/**
	     * Casts `value` as an array if it's not one.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.4.0
	     * @category Lang
	     * @param {*} value The value to inspect.
	     * @returns {Array} Returns the cast array.
	     * @example
	     *
	     * _.castArray(1);
	     * // => [1]
	     *
	     * _.castArray({ 'a': 1 });
	     * // => [{ 'a': 1 }]
	     *
	     * _.castArray('abc');
	     * // => ['abc']
	     *
	     * _.castArray(null);
	     * // => [null]
	     *
	     * _.castArray(undefined);
	     * // => [undefined]
	     *
	     * _.castArray();
	     * // => []
	     *
	     * var array = [1, 2, 3];
	     * console.log(_.castArray(array) === array);
	     * // => true
	     */
function Ga(){if(!arguments.length)return[];var t=arguments[0];return af(t)?t:[t]}/**
	     * Creates a shallow clone of `value`.
	     *
	     * **Note:** This method is loosely based on the
	     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
	     * and supports cloning arrays, array buffers, booleans, date objects, maps,
	     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
	     * arrays. The own enumerable properties of `arguments` objects are cloned
	     * as plain objects. An empty object is returned for uncloneable values such
	     * as error objects, functions, DOM nodes, and WeakMaps.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to clone.
	     * @returns {*} Returns the cloned value.
	     * @see _.cloneDeep
	     * @example
	     *
	     * var objects = [{ 'a': 1 }, { 'b': 2 }];
	     *
	     * var shallow = _.clone(objects);
	     * console.log(shallow[0] === objects[0]);
	     * // => true
	     */
function Xa(t){return bn(t,!1,!0)}/**
	     * This method is like `_.clone` except that it accepts `customizer` which
	     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
	     * cloning is handled by the method instead. The `customizer` is invoked with
	     * up to four arguments; (value [, index|key, object, stack]).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to clone.
	     * @param {Function} [customizer] The function to customize cloning.
	     * @returns {*} Returns the cloned value.
	     * @see _.cloneDeepWith
	     * @example
	     *
	     * function customizer(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(false);
	     *   }
	     * }
	     *
	     * var el = _.cloneWith(document.body, customizer);
	     *
	     * console.log(el === document.body);
	     * // => false
	     * console.log(el.nodeName);
	     * // => 'BODY'
	     * console.log(el.childNodes.length);
	     * // => 0
	     */
function Ja(t,e){return bn(t,!1,!0,e)}/**
	     * This method is like `_.clone` except that it recursively clones `value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.0.0
	     * @category Lang
	     * @param {*} value The value to recursively clone.
	     * @returns {*} Returns the deep cloned value.
	     * @see _.clone
	     * @example
	     *
	     * var objects = [{ 'a': 1 }, { 'b': 2 }];
	     *
	     * var deep = _.cloneDeep(objects);
	     * console.log(deep[0] === objects[0]);
	     * // => false
	     */
function Ya(t){return bn(t,!0,!0)}/**
	     * This method is like `_.cloneWith` except that it recursively clones `value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to recursively clone.
	     * @param {Function} [customizer] The function to customize cloning.
	     * @returns {*} Returns the deep cloned value.
	     * @see _.cloneWith
	     * @example
	     *
	     * function customizer(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(true);
	     *   }
	     * }
	     *
	     * var el = _.cloneDeepWith(document.body, customizer);
	     *
	     * console.log(el === document.body);
	     * // => false
	     * console.log(el.nodeName);
	     * // => 'BODY'
	     * console.log(el.childNodes.length);
	     * // => 20
	     */
function Ka(t,e){return bn(t,!0,!0,e)}/**
	     * Performs a
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * comparison between two values to determine if they are equivalent.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     * var other = { 'user': 'fred' };
	     *
	     * _.eq(object, object);
	     * // => true
	     *
	     * _.eq(object, other);
	     * // => false
	     *
	     * _.eq('a', 'a');
	     * // => true
	     *
	     * _.eq('a', Object('a'));
	     * // => false
	     *
	     * _.eq(NaN, NaN);
	     * // => true
	     */
function Za(t,e){return t===e||t!==t&&e!==e}/**
	     * Checks if `value` is likely an `arguments` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isArguments(function() { return arguments; }());
	     * // => true
	     *
	     * _.isArguments([1, 2, 3]);
	     * // => false
	     */
function Qa(t){
// Safari 8.1 incorrectly makes `arguments.callee` enumerable in strict mode.
return nu(t)&&$c.call(t,"callee")&&(!Pc.call(t,"callee")||xc.call(t)==Tt)}/**
	     * Checks if `value` is classified as an `ArrayBuffer` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isArrayBuffer(new ArrayBuffer(2));
	     * // => true
	     *
	     * _.isArrayBuffer(new Array(2));
	     * // => false
	     */
function tu(t){return vu(t)&&xc.call(t)==zt}/**
	     * Checks if `value` is array-like. A value is considered array-like if it's
	     * not a function and has a `value.length` that's an integer greater than or
	     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	     * @example
	     *
	     * _.isArrayLike([1, 2, 3]);
	     * // => true
	     *
	     * _.isArrayLike(document.body.children);
	     * // => true
	     *
	     * _.isArrayLike('abc');
	     * // => true
	     *
	     * _.isArrayLike(_.noop);
	     * // => false
	     */
function eu(t){return null!=t&&pu(bl(t))&&!fu(t)}/**
	     * This method is like `_.isArrayLike` except that it also checks if `value`
	     * is an object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array-like object,
	     *  else `false`.
	     * @example
	     *
	     * _.isArrayLikeObject([1, 2, 3]);
	     * // => true
	     *
	     * _.isArrayLikeObject(document.body.children);
	     * // => true
	     *
	     * _.isArrayLikeObject('abc');
	     * // => false
	     *
	     * _.isArrayLikeObject(_.noop);
	     * // => false
	     */
function nu(t){return vu(t)&&eu(t)}/**
	     * Checks if `value` is classified as a boolean primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isBoolean(false);
	     * // => true
	     *
	     * _.isBoolean(null);
	     * // => false
	     */
function ru(t){return t===!0||t===!1||vu(t)&&xc.call(t)==Rt}/**
	     * Checks if `value` is classified as a `Date` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isDate(new Date);
	     * // => true
	     *
	     * _.isDate('Mon April 23 2012');
	     * // => false
	     */
function iu(t){return vu(t)&&xc.call(t)==jt}/**
	     * Checks if `value` is likely a DOM element.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a DOM element,
	     *  else `false`.
	     * @example
	     *
	     * _.isElement(document.body);
	     * // => true
	     *
	     * _.isElement('<body>');
	     * // => false
	     */
function ou(t){return!!t&&1===t.nodeType&&vu(t)&&!Cu(t)}/**
	     * Checks if `value` is an empty object, collection, map, or set.
	     *
	     * Objects are considered empty if they have no own enumerable string keyed
	     * properties.
	     *
	     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
	     * jQuery-like collections are considered empty if they have a `length` of `0`.
	     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
	     * @example
	     *
	     * _.isEmpty(null);
	     * // => true
	     *
	     * _.isEmpty(true);
	     * // => true
	     *
	     * _.isEmpty(1);
	     * // => true
	     *
	     * _.isEmpty([1, 2, 3]);
	     * // => false
	     *
	     * _.isEmpty({ 'a': 1 });
	     * // => false
	     */
function au(t){if(eu(t)&&(af(t)||ku(t)||fu(t.splice)||Qa(t)||uf(t)))return!t.length;if(vu(t)){var e=Li(t);if(e==Mt||e==Ft)return!t.size}for(var n in t)if($c.call(t,n))return!1;return!(rl&&ts(t).length)}/**
	     * Performs a deep comparison between two values to determine if they are
	     * equivalent.
	     *
	     * **Note:** This method supports comparing arrays, array buffers, booleans,
	     * date objects, error objects, maps, numbers, `Object` objects, regexes,
	     * sets, strings, symbols, and typed arrays. `Object` objects are compared
	     * by their own, not inherited, enumerable properties. Functions and DOM
	     * nodes are **not** supported.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if the values are equivalent,
	     *  else `false`.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     * var other = { 'user': 'fred' };
	     *
	     * _.isEqual(object, other);
	     * // => true
	     *
	     * object === other;
	     * // => false
	     */
function uu(t,e){return tr(t,e)}/**
	     * This method is like `_.isEqual` except that it accepts `customizer` which
	     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
	     * are handled by the method instead. The `customizer` is invoked with up to
	     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if the values are equivalent,
	     *  else `false`.
	     * @example
	     *
	     * function isGreeting(value) {
	     *   return /^h(?:i|ello)$/.test(value);
	     * }
	     *
	     * function customizer(objValue, othValue) {
	     *   if (isGreeting(objValue) && isGreeting(othValue)) {
	     *     return true;
	     *   }
	     * }
	     *
	     * var array = ['hello', 'goodbye'];
	     * var other = ['hi', 'goodbye'];
	     *
	     * _.isEqualWith(array, other, customizer);
	     * // => true
	     */
function su(t,e,n){n="function"==typeof n?n:K;var r=n?n(t,e):K;return r===K?tr(t,e,n):!!r}/**
	     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
	     * `SyntaxError`, `TypeError`, or `URIError` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an error object,
	     *  else `false`.
	     * @example
	     *
	     * _.isError(new Error);
	     * // => true
	     *
	     * _.isError(Error);
	     * // => false
	     */
function cu(t){return!!vu(t)&&(xc.call(t)==Nt||"string"==typeof t.message&&"string"==typeof t.name)}/**
	     * Checks if `value` is a finite primitive number.
	     *
	     * **Note:** This method is based on
	     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a finite number,
	     *  else `false`.
	     * @example
	     *
	     * _.isFinite(3);
	     * // => true
	     *
	     * _.isFinite(Number.MIN_VALUE);
	     * // => true
	     *
	     * _.isFinite(Infinity);
	     * // => false
	     *
	     * _.isFinite('3');
	     * // => false
	     */
function lu(t){return"number"==typeof t&&Uc(t)}/**
	     * Checks if `value` is classified as a `Function` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isFunction(_);
	     * // => true
	     *
	     * _.isFunction(/abc/);
	     * // => false
	     */
function fu(t){
// The use of `Object#toString` avoids issues with the `typeof` operator
// in Safari 8 which returns 'object' for typed array and weak map constructors,
// and PhantomJS 1.9 which returns 'function' for `NodeList` instances.
var e=du(t)?xc.call(t):"";return e==Pt||e==Dt}/**
	     * Checks if `value` is an integer.
	     *
	     * **Note:** This method is based on
	     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
	     * @example
	     *
	     * _.isInteger(3);
	     * // => true
	     *
	     * _.isInteger(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isInteger(Infinity);
	     * // => false
	     *
	     * _.isInteger('3');
	     * // => false
	     */
function hu(t){return"number"==typeof t&&t==Mu(t)}/**
	     * Checks if `value` is a valid array-like length.
	     *
	     * **Note:** This function is loosely based on
	     * [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a valid length,
	     *  else `false`.
	     * @example
	     *
	     * _.isLength(3);
	     * // => true
	     *
	     * _.isLength(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isLength(Infinity);
	     * // => false
	     *
	     * _.isLength('3');
	     * // => false
	     */
function pu(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=_t}/**
	     * Checks if `value` is the
	     * [language type](http://www.ecma-international.org/ecma-262/6.0/#sec-ecmascript-language-types)
	     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	     * @example
	     *
	     * _.isObject({});
	     * // => true
	     *
	     * _.isObject([1, 2, 3]);
	     * // => true
	     *
	     * _.isObject(_.noop);
	     * // => true
	     *
	     * _.isObject(null);
	     * // => false
	     */
function du(t){var e=typeof t;return!!t&&("object"==e||"function"==e)}/**
	     * Checks if `value` is object-like. A value is object-like if it's not `null`
	     * and has a `typeof` result of "object".
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	     * @example
	     *
	     * _.isObjectLike({});
	     * // => true
	     *
	     * _.isObjectLike([1, 2, 3]);
	     * // => true
	     *
	     * _.isObjectLike(_.noop);
	     * // => false
	     *
	     * _.isObjectLike(null);
	     * // => false
	     */
function vu(t){return!!t&&"object"==typeof t}/**
	     * Checks if `value` is classified as a `Map` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isMap(new Map);
	     * // => true
	     *
	     * _.isMap(new WeakMap);
	     * // => false
	     */
function gu(t){return vu(t)&&Li(t)==Mt}/**
	     * Performs a partial deep comparison between `object` and `source` to
	     * determine if `object` contains equivalent property values. This method is
	     * equivalent to a `_.matches` function when `source` is partially applied.
	     *
	     * **Note:** This method supports comparing the same values as `_.isEqual`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     * @example
	     *
	     * var object = { 'user': 'fred', 'age': 40 };
	     *
	     * _.isMatch(object, { 'age': 40 });
	     * // => true
	     *
	     * _.isMatch(object, { 'age': 36 });
	     * // => false
	     */
function mu(t,e){return t===e||nr(t,e,Pi(e))}/**
	     * This method is like `_.isMatch` except that it accepts `customizer` which
	     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
	     * are handled by the method instead. The `customizer` is invoked with five
	     * arguments: (objValue, srcValue, index|key, object, source).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     * @example
	     *
	     * function isGreeting(value) {
	     *   return /^h(?:i|ello)$/.test(value);
	     * }
	     *
	     * function customizer(objValue, srcValue) {
	     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
	     *     return true;
	     *   }
	     * }
	     *
	     * var object = { 'greeting': 'hello' };
	     * var source = { 'greeting': 'hi' };
	     *
	     * _.isMatchWith(object, source, customizer);
	     * // => true
	     */
function yu(t,e,n){return n="function"==typeof n?n:K,nr(t,e,Pi(e),n)}/**
	     * Checks if `value` is `NaN`.
	     *
	     * **Note:** This method is based on
	     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
	     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
	     * `undefined` and other non-number values.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	     * @example
	     *
	     * _.isNaN(NaN);
	     * // => true
	     *
	     * _.isNaN(new Number(NaN));
	     * // => true
	     *
	     * isNaN(undefined);
	     * // => true
	     *
	     * _.isNaN(undefined);
	     * // => false
	     */
function $u(t){
// An `NaN` primitive is the only value that is not equal to itself.
// Perform the `toStringTag` check first to avoid errors with some
// ActiveX objects in IE.
return _u(t)&&t!=+t}/**
	     * Checks if `value` is a native function.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a native function,
	     *  else `false`.
	     * @example
	     *
	     * _.isNative(Array.prototype.push);
	     * // => true
	     *
	     * _.isNative(_);
	     * // => false
	     */
function bu(t){if(!du(t))return!1;var e=fu(t)||F(t)?Cc:ke;return e.test(ao(t))}/**
	     * Checks if `value` is `null`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
	     * @example
	     *
	     * _.isNull(null);
	     * // => true
	     *
	     * _.isNull(void 0);
	     * // => false
	     */
function wu(t){return null===t}/**
	     * Checks if `value` is `null` or `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
	     * @example
	     *
	     * _.isNil(null);
	     * // => true
	     *
	     * _.isNil(void 0);
	     * // => true
	     *
	     * _.isNil(NaN);
	     * // => false
	     */
function xu(t){return null==t}/**
	     * Checks if `value` is classified as a `Number` primitive or object.
	     *
	     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
	     * classified as numbers, use the `_.isFinite` method.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isNumber(3);
	     * // => true
	     *
	     * _.isNumber(Number.MIN_VALUE);
	     * // => true
	     *
	     * _.isNumber(Infinity);
	     * // => true
	     *
	     * _.isNumber('3');
	     * // => false
	     */
function _u(t){return"number"==typeof t||vu(t)&&xc.call(t)==It}/**
	     * Checks if `value` is a plain object, that is, an object created by the
	     * `Object` constructor or one with a `[[Prototype]]` of `null`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.8.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a plain object,
	     *  else `false`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * _.isPlainObject(new Foo);
	     * // => false
	     *
	     * _.isPlainObject([1, 2, 3]);
	     * // => false
	     *
	     * _.isPlainObject({ 'x': 0, 'y': 0 });
	     * // => true
	     *
	     * _.isPlainObject(Object.create(null));
	     * // => true
	     */
function Cu(t){if(!vu(t)||xc.call(t)!=Lt||F(t))return!1;var e=Mi(t);if(null===e)return!0;var n=$c.call(e,"constructor")&&e.constructor;return"function"==typeof n&&n instanceof n&&yc.call(n)==wc}/**
	     * Checks if `value` is classified as a `RegExp` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isRegExp(/abc/);
	     * // => true
	     *
	     * _.isRegExp('/abc/');
	     * // => false
	     */
function Su(t){return du(t)&&xc.call(t)==Ut}/**
	     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
	     * double precision number which isn't the result of a rounded unsafe integer.
	     *
	     * **Note:** This method is based on
	     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a safe integer,
	     *  else `false`.
	     * @example
	     *
	     * _.isSafeInteger(3);
	     * // => true
	     *
	     * _.isSafeInteger(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isSafeInteger(Infinity);
	     * // => false
	     *
	     * _.isSafeInteger('3');
	     * // => false
	     */
function Au(t){return hu(t)&&t>=-_t&&t<=_t}/**
	     * Checks if `value` is classified as a `Set` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isSet(new Set);
	     * // => true
	     *
	     * _.isSet(new WeakSet);
	     * // => false
	     */
function Eu(t){return vu(t)&&Li(t)==Ft}/**
	     * Checks if `value` is classified as a `String` primitive or object.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isString('abc');
	     * // => true
	     *
	     * _.isString(1);
	     * // => false
	     */
function ku(t){return"string"==typeof t||!af(t)&&vu(t)&&xc.call(t)==Vt}/**
	     * Checks if `value` is classified as a `Symbol` primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isSymbol(Symbol.iterator);
	     * // => true
	     *
	     * _.isSymbol('abc');
	     * // => false
	     */
function Tu(t){return"symbol"==typeof t||vu(t)&&xc.call(t)==Ht}/**
	     * Checks if `value` is classified as a typed array.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isTypedArray(new Uint8Array);
	     * // => true
	     *
	     * _.isTypedArray([]);
	     * // => false
	     */
function Ou(t){return vu(t)&&pu(t.length)&&!!An[xc.call(t)]}/**
	     * Checks if `value` is `undefined`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
	     * @example
	     *
	     * _.isUndefined(void 0);
	     * // => true
	     *
	     * _.isUndefined(null);
	     * // => false
	     */
function Ru(t){return t===K}/**
	     * Checks if `value` is classified as a `WeakMap` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isWeakMap(new WeakMap);
	     * // => true
	     *
	     * _.isWeakMap(new Map);
	     * // => false
	     */
function ju(t){return vu(t)&&Li(t)==Bt}/**
	     * Checks if `value` is classified as a `WeakSet` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isWeakSet(new WeakSet);
	     * // => true
	     *
	     * _.isWeakSet(new Set);
	     * // => false
	     */
function Nu(t){return vu(t)&&xc.call(t)==Wt}/**
	     * Converts `value` to an array.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Array} Returns the converted array.
	     * @example
	     *
	     * _.toArray({ 'a': 1, 'b': 2 });
	     * // => [1, 2]
	     *
	     * _.toArray('abc');
	     * // => ['a', 'b', 'c']
	     *
	     * _.toArray(1);
	     * // => []
	     *
	     * _.toArray(null);
	     * // => []
	     */
function Pu(t){if(!t)return[];if(eu(t))return ku(t)?X(t):ti(t);if(jc&&t[jc])return V(t[jc]());var e=Li(t),n=e==Mt?H:e==Ft?W:ps;return n(t)}/**
	     * Converts `value` to a finite number.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.12.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted number.
	     * @example
	     *
	     * _.toFinite(3.2);
	     * // => 3.2
	     *
	     * _.toFinite(Number.MIN_VALUE);
	     * // => 5e-324
	     *
	     * _.toFinite(Infinity);
	     * // => 1.7976931348623157e+308
	     *
	     * _.toFinite('3.2');
	     * // => 3.2
	     */
function Du(t){if(!t)return 0===t?t:0;if(t=Lu(t),t===xt||t===-xt){var e=t<0?-1:1;return e*Ct}return t===t?t:0}/**
	     * Converts `value` to an integer.
	     *
	     * **Note:** This function is loosely based on
	     * [`ToInteger`](http://www.ecma-international.org/ecma-262/6.0/#sec-tointeger).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toInteger(3.2);
	     * // => 3
	     *
	     * _.toInteger(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toInteger(Infinity);
	     * // => 1.7976931348623157e+308
	     *
	     * _.toInteger('3.2');
	     * // => 3
	     */
function Mu(t){var e=Du(t),n=e%1;return e===e?n?e-n:e:0}/**
	     * Converts `value` to an integer suitable for use as the length of an
	     * array-like object.
	     *
	     * **Note:** This method is based on
	     * [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toLength(3.2);
	     * // => 3
	     *
	     * _.toLength(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toLength(Infinity);
	     * // => 4294967295
	     *
	     * _.toLength('3.2');
	     * // => 3
	     */
function Iu(t){return t?mn(Mu(t),0,At):0}/**
	     * Converts `value` to a number.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to process.
	     * @returns {number} Returns the number.
	     * @example
	     *
	     * _.toNumber(3.2);
	     * // => 3.2
	     *
	     * _.toNumber(Number.MIN_VALUE);
	     * // => 5e-324
	     *
	     * _.toNumber(Infinity);
	     * // => Infinity
	     *
	     * _.toNumber('3.2');
	     * // => 3.2
	     */
function Lu(t){if("number"==typeof t)return t;if(Tu(t))return St;if(du(t)){var e=fu(t.valueOf)?t.valueOf():t;t=du(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=t.replace(ye,"");var n=Ee.test(t);return n||Te.test(t)?Pn(t.slice(2),n?2:8):Ae.test(t)?St:+t}/**
	     * Converts `value` to a plain object flattening inherited enumerable string
	     * keyed properties of `value` to own properties of the plain object.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Object} Returns the converted plain object.
	     * @example
	     *
	     * function Foo() {
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.assign({ 'a': 1 }, new Foo);
	     * // => { 'a': 1, 'b': 2 }
	     *
	     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
	     * // => { 'a': 1, 'b': 2, 'c': 3 }
	     */
function qu(t){return ei(t,es(t))}/**
	     * Converts `value` to a safe integer. A safe integer can be compared and
	     * represented correctly.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toSafeInteger(3.2);
	     * // => 3
	     *
	     * _.toSafeInteger(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toSafeInteger(Infinity);
	     * // => 9007199254740991
	     *
	     * _.toSafeInteger('3.2');
	     * // => 3
	     */
function Uu(t){return mn(Mu(t),-_t,_t)}/**
	     * Converts `value` to a string. An empty string is returned for `null`
	     * and `undefined` values. The sign of `-0` is preserved.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to process.
	     * @returns {string} Returns the string.
	     * @example
	     *
	     * _.toString(null);
	     * // => ''
	     *
	     * _.toString(-0);
	     * // => '-0'
	     *
	     * _.toString([1, 2, 3]);
	     * // => '1,2,3'
	     */
function Fu(t){return null==t?"":Or(t)}/**
	     * Creates an object that inherits from the `prototype` object. If a
	     * `properties` object is given, its own enumerable string keyed properties
	     * are assigned to the created object.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.3.0
	     * @category Object
	     * @param {Object} prototype The object to inherit from.
	     * @param {Object} [properties] The properties to assign to the object.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * function Shape() {
	     *   this.x = 0;
	     *   this.y = 0;
	     * }
	     *
	     * function Circle() {
	     *   Shape.call(this);
	     * }
	     *
	     * Circle.prototype = _.create(Shape.prototype, {
	     *   'constructor': Circle
	     * });
	     *
	     * var circle = new Circle;
	     * circle instanceof Circle;
	     * // => true
	     *
	     * circle instanceof Shape;
	     * // => true
	     */
function Vu(t,e){var n=Tn(t);return e?vn(n,e):n}/**
	     * This method is like `_.find` except that it returns the key of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.1.0
	     * @category Object
	     * @param {Object} object The object to search.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {string|undefined} Returns the key of the matched element,
	     *  else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findKey(users, function(o) { return o.age < 40; });
	     * // => 'barney' (iteration order is not guaranteed)
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findKey(users, { 'age': 1, 'active': true });
	     * // => 'pebbles'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findKey(users, ['active', false]);
	     * // => 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findKey(users, 'active');
	     * // => 'barney'
	     */
function Hu(t,e){return b(t,ji(e,3),Un,!0)}/**
	     * This method is like `_.findKey` except that it iterates over elements of
	     * a collection in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Object
	     * @param {Object} object The object to search.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {string|undefined} Returns the key of the matched element,
	     *  else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findLastKey(users, function(o) { return o.age < 40; });
	     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findLastKey(users, { 'age': 36, 'active': true });
	     * // => 'barney'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findLastKey(users, ['active', false]);
	     * // => 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findLastKey(users, 'active');
	     * // => 'pebbles'
	     */
function Bu(t,e){return b(t,ji(e,3),Fn,!0)}/**
	     * Iterates over own and inherited enumerable string keyed properties of an
	     * object and invokes `iteratee` for each property. The iteratee is invoked
	     * with three arguments: (value, key, object). Iteratee functions may exit
	     * iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.3.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forInRight
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forIn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
	     */
function Wu(t,e){return null==t?t:vl(t,ji(e,3),es)}/**
	     * This method is like `_.forIn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forIn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forInRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
	     */
function zu(t,e){return null==t?t:gl(t,ji(e,3),es)}/**
	     * Iterates over own enumerable string keyed properties of an object and
	     * invokes `iteratee` for each property. The iteratee is invoked with three
	     * arguments: (value, key, object). Iteratee functions may exit iteration
	     * early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.3.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forOwnRight
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
	     */
function Gu(t,e){return t&&Un(t,ji(e,3))}/**
	     * This method is like `_.forOwn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forOwn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwnRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
	     */
function Xu(t,e){return t&&Fn(t,ji(e,3))}/**
	     * Creates an array of function property names from own enumerable properties
	     * of `object`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the function names.
	     * @see _.functionsIn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = _.constant('a');
	     *   this.b = _.constant('b');
	     * }
	     *
	     * Foo.prototype.c = _.constant('c');
	     *
	     * _.functions(new Foo);
	     * // => ['a', 'b']
	     */
function Ju(t){return null==t?[]:Bn(t,ts(t))}/**
	     * Creates an array of function property names from own and inherited
	     * enumerable properties of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the function names.
	     * @see _.functions
	     * @example
	     *
	     * function Foo() {
	     *   this.a = _.constant('a');
	     *   this.b = _.constant('b');
	     * }
	     *
	     * Foo.prototype.c = _.constant('c');
	     *
	     * _.functionsIn(new Foo);
	     * // => ['a', 'b', 'c']
	     */
function Yu(t){return null==t?[]:Bn(t,es(t))}/**
	     * Gets the value at `path` of `object`. If the resolved value is
	     * `undefined`, the `defaultValue` is used in its place.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.get(object, 'a[0].b.c');
	     * // => 3
	     *
	     * _.get(object, ['a', '0', 'b', 'c']);
	     * // => 3
	     *
	     * _.get(object, 'a.b.c', 'default');
	     * // => 'default'
	     */
function Ku(t,e,n){var r=null==t?K:Wn(t,e);return r===K?n:r}/**
	     * Checks if `path` is a direct property of `object`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     * @example
	     *
	     * var object = { 'a': { 'b': 2 } };
	     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
	     *
	     * _.has(object, 'a');
	     * // => true
	     *
	     * _.has(object, 'a.b');
	     * // => true
	     *
	     * _.has(object, ['a', 'b']);
	     * // => true
	     *
	     * _.has(other, 'a');
	     * // => false
	     */
function Zu(t,e){return null!=t&&Ui(t,e,Xn)}/**
	     * Checks if `path` is a direct or inherited property of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     * @example
	     *
	     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
	     *
	     * _.hasIn(object, 'a');
	     * // => true
	     *
	     * _.hasIn(object, 'a.b');
	     * // => true
	     *
	     * _.hasIn(object, ['a', 'b']);
	     * // => true
	     *
	     * _.hasIn(object, 'b');
	     * // => false
	     */
function Qu(t,e){return null!=t&&Ui(t,e,Jn)}/**
	     * Creates an array of the own enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects. See the
	     * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
	     * for more details.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keys(new Foo);
	     * // => ['a', 'b'] (iteration order is not guaranteed)
	     *
	     * _.keys('hi');
	     * // => ['0', '1']
	     */
function ts(t){var e=Zi(t);if(!e&&!eu(t))return ir(t);var n=Bi(t),r=!!n,i=n||[],o=i.length;for(var a in t)!Xn(t,a)||r&&("length"==a||Gi(a,o))||e&&"constructor"==a||i.push(a);return i}/**
	     * Creates an array of the own and inherited enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keysIn(new Foo);
	     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	     */
function es(t){for(var e=-1,n=Zi(t),r=or(t),i=r.length,o=Bi(t),a=!!o,u=o||[],s=u.length;++e<i;){var c=r[e];a&&("length"==c||Gi(c,s))||"constructor"==c&&(n||!$c.call(t,c))||u.push(c)}return u}/**
	     * The opposite of `_.mapValues`; this method creates an object with the
	     * same values as `object` and keys generated by running each own enumerable
	     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
	     * with three arguments: (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.8.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Object} Returns the new mapped object.
	     * @see _.mapValues
	     * @example
	     *
	     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
	     *   return key + value;
	     * });
	     * // => { 'a1': 1, 'b2': 2 }
	     */
function ns(t,e){var n={};return e=ji(e,3),Un(t,function(t,r,i){n[e(t,r,i)]=t}),n}/**
	     * Creates an object with the same keys as `object` and values generated
	     * by running each own enumerable string keyed property of `object` thru
	     * `iteratee`. The iteratee is invoked with three arguments:
	     * (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Object} Returns the new mapped object.
	     * @see _.mapKeys
	     * @example
	     *
	     * var users = {
	     *   'fred':    { 'user': 'fred',    'age': 40 },
	     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
	     * };
	     *
	     * _.mapValues(users, function(o) { return o.age; });
	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.mapValues(users, 'age');
	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	     */
function rs(t,e){var n={};return e=ji(e,3),Un(t,function(t,r,i){n[r]=e(t,r,i)}),n}/**
	     * The opposite of `_.pickBy`; this method creates an object composed of
	     * the own and inherited enumerable string keyed properties of `object` that
	     * `predicate` doesn't return truthy for. The predicate is invoked with two
	     * arguments: (value, key).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per property.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.omitBy(object, _.isNumber);
	     * // => { 'b': '2' }
	     */
function is(t,e){return e=ji(e),vr(t,function(t,n){return!e(t,n)})}/**
	     * Creates an object composed of the `object` properties `predicate` returns
	     * truthy for. The predicate is invoked with two arguments: (value, key).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per property.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.pickBy(object, _.isNumber);
	     * // => { 'a': 1, 'c': 3 }
	     */
function os(t,e){return null==t?{}:vr(t,ji(e))}/**
	     * This method is like `_.get` except that if the resolved value is a
	     * function it's invoked with the `this` binding of its parent object and
	     * its result is returned.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to resolve.
	     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
	     *
	     * _.result(object, 'a[0].b.c1');
	     * // => 3
	     *
	     * _.result(object, 'a[0].b.c2');
	     * // => 4
	     *
	     * _.result(object, 'a[0].b.c3', 'default');
	     * // => 'default'
	     *
	     * _.result(object, 'a[0].b.c3', _.constant('default'));
	     * // => 'default'
	     */
function as(t,e,n){e=Ji(e,t)?[e]:Ur(e);var r=-1,i=e.length;for(
// Ensure the loop is entered when path is empty.
i||(t=K,i=1);++r<i;){var o=null==t?K:t[oo(e[r])];o===K&&(r=i,o=n),t=fu(o)?o.call(t):o}return t}/**
	     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
	     * it's created. Arrays are created for missing index properties while objects
	     * are created for all other missing properties. Use `_.setWith` to customize
	     * `path` creation.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.set(object, 'a[0].b.c', 4);
	     * console.log(object.a[0].b.c);
	     * // => 4
	     *
	     * _.set(object, ['x', '0', 'y', 'z'], 5);
	     * console.log(object.x[0].y.z);
	     * // => 5
	     */
function us(t,e,n){return null==t?t:_r(t,e,n)}/**
	     * This method is like `_.set` except that it accepts `customizer` which is
	     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
	     * path creation is handled by the method instead. The `customizer` is invoked
	     * with three arguments: (nsValue, key, nsObject).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = {};
	     *
	     * _.setWith(object, '[0][1]', 'a', Object);
	     * // => { '0': { '1': 'a' } }
	     */
function ss(t,e,n,r){return r="function"==typeof r?r:K,null==t?t:_r(t,e,n,r)}/**
	     * An alternative to `_.reduce`; this method transforms `object` to a new
	     * `accumulator` object which is the result of running each of its own
	     * enumerable string keyed properties thru `iteratee`, with each invocation
	     * potentially mutating the `accumulator` object. The iteratee is invoked
	     * with four arguments: (accumulator, value, key, object). Iteratee functions
	     * may exit iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.3.0
	     * @category Object
	     * @param {Array|Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The custom accumulator value.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * _.transform([2, 3, 4], function(result, n) {
	     *   result.push(n *= n);
	     *   return n % 2 == 0;
	     * }, []);
	     * // => [4, 9]
	     *
	     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
	     *   (result[value] || (result[value] = [])).push(key);
	     * }, {});
	     * // => { '1': ['a', 'c'], '2': ['b'] }
	     */
function cs(t,e,n){var r=af(t)||Ou(t);if(e=ji(e,4),null==n)if(r||du(t)){var i=t.constructor;n=r?af(t)?new i:[]:fu(i)?Tn(Mi(t)):{}}else n={};return(r?c:Un)(t,function(t,r,i){return e(n,t,r,i)}),n}/**
	     * Removes the property at `path` of `object`.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to unset.
	     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
	     * _.unset(object, 'a[0].b.c');
	     * // => true
	     *
	     * console.log(object);
	     * // => { 'a': [{ 'b': {} }] };
	     *
	     * _.unset(object, ['a', '0', 'b', 'c']);
	     * // => true
	     *
	     * console.log(object);
	     * // => { 'a': [{ 'b': {} }] };
	     */
function ls(t,e){return null==t||jr(t,e)}/**
	     * This method is like `_.set` except that accepts `updater` to produce the
	     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
	     * is invoked with one argument: (value).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.6.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {Function} updater The function to produce the updated value.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
	     * console.log(object.a[0].b.c);
	     * // => 9
	     *
	     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
	     * console.log(object.x[0].y.z);
	     * // => 0
	     */
function fs(t,e,n){return null==t?t:Nr(t,e,qr(n))}/**
	     * This method is like `_.update` except that it accepts `customizer` which is
	     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
	     * path creation is handled by the method instead. The `customizer` is invoked
	     * with three arguments: (nsValue, key, nsObject).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.6.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {Function} updater The function to produce the updated value.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = {};
	     *
	     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
	     * // => { '0': { '1': 'a' } }
	     */
function hs(t,e,n,r){return r="function"==typeof r?r:K,null==t?t:Nr(t,e,qr(n),r)}/**
	     * Creates an array of the own enumerable string keyed property values of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.values(new Foo);
	     * // => [1, 2] (iteration order is not guaranteed)
	     *
	     * _.values('hi');
	     * // => ['h', 'i']
	     */
function ps(t){return t?R(t,ts(t)):[]}/**
	     * Creates an array of the own and inherited enumerable string keyed property
	     * values of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.valuesIn(new Foo);
	     * // => [1, 2, 3] (iteration order is not guaranteed)
	     */
function ds(t){return null==t?[]:R(t,es(t))}/*------------------------------------------------------------------------*/
/**
	     * Clamps `number` within the inclusive `lower` and `upper` bounds.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Number
	     * @param {number} number The number to clamp.
	     * @param {number} [lower] The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the clamped number.
	     * @example
	     *
	     * _.clamp(-10, -5, 5);
	     * // => -5
	     *
	     * _.clamp(10, -5, 5);
	     * // => 5
	     */
function vs(t,e,n){return n===K&&(n=e,e=K),n!==K&&(n=Lu(n),n=n===n?n:0),e!==K&&(e=Lu(e),e=e===e?e:0),mn(Lu(t),e,n)}/**
	     * Checks if `n` is between `start` and up to, but not including, `end`. If
	     * `end` is not specified, it's set to `start` with `start` then set to `0`.
	     * If `start` is greater than `end` the params are swapped to support
	     * negative ranges.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.3.0
	     * @category Number
	     * @param {number} number The number to check.
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
	     * @see _.range, _.rangeRight
	     * @example
	     *
	     * _.inRange(3, 2, 4);
	     * // => true
	     *
	     * _.inRange(4, 8);
	     * // => true
	     *
	     * _.inRange(4, 2);
	     * // => false
	     *
	     * _.inRange(2, 2);
	     * // => false
	     *
	     * _.inRange(1.2, 2);
	     * // => true
	     *
	     * _.inRange(5.2, 4);
	     * // => false
	     *
	     * _.inRange(-3, -2, -6);
	     * // => true
	     */
function gs(t,e,n){return e=Lu(e)||0,n===K?(n=e,e=0):n=Lu(n)||0,t=Lu(t),Yn(t,e,n)}/**
	     * Produces a random number between the inclusive `lower` and `upper` bounds.
	     * If only one argument is provided a number between `0` and the given number
	     * is returned. If `floating` is `true`, or either `lower` or `upper` are
	     * floats, a floating-point number is returned instead of an integer.
	     *
	     * **Note:** JavaScript follows the IEEE-754 standard for resolving
	     * floating-point values which can produce unexpected results.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.7.0
	     * @category Number
	     * @param {number} [lower=0] The lower bound.
	     * @param {number} [upper=1] The upper bound.
	     * @param {boolean} [floating] Specify returning a floating-point number.
	     * @returns {number} Returns the random number.
	     * @example
	     *
	     * _.random(0, 5);
	     * // => an integer between 0 and 5
	     *
	     * _.random(5);
	     * // => also an integer between 0 and 5
	     *
	     * _.random(5, true);
	     * // => a floating-point number between 0 and 5
	     *
	     * _.random(1.2, 5.2);
	     * // => a floating-point number between 1.2 and 5.2
	     */
function ms(t,e,n){if(n&&"boolean"!=typeof n&&Xi(t,e,n)&&(e=n=K),n===K&&("boolean"==typeof e?(n=e,e=K):"boolean"==typeof t&&(n=t,t=K)),t===K&&e===K?(t=0,e=1):(t=Lu(t)||0,e===K?(e=t,t=0):e=Lu(e)||0),t>e){var r=t;t=e,e=r}if(n||t%1||e%1){var i=zc();return Bc(t+i*(e-t+Nn("1e-"+((i+"").length-1))),e)}return br(t,e)}/**
	     * Converts the first character of `string` to upper case and the remaining
	     * to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to capitalize.
	     * @returns {string} Returns the capitalized string.
	     * @example
	     *
	     * _.capitalize('FRED');
	     * // => 'Fred'
	     */
function ys(t){return Nf(Fu(t).toLowerCase())}/**
	     * Deburrs `string` by converting
	     * [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
	     * to basic latin letters and removing
	     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to deburr.
	     * @returns {string} Returns the deburred string.
	     * @example
	     *
	     * _.deburr('déjà vu');
	     * // => 'deja vu'
	     */
function $s(t){return t=Fu(t),t&&t.replace(Re,I).replace($n,"")}/**
	     * Checks if `string` ends with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to search.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=string.length] The position to search from.
	     * @returns {boolean} Returns `true` if `string` ends with `target`,
	     *  else `false`.
	     * @example
	     *
	     * _.endsWith('abc', 'c');
	     * // => true
	     *
	     * _.endsWith('abc', 'b');
	     * // => false
	     *
	     * _.endsWith('abc', 'b', 2);
	     * // => true
	     */
function bs(t,e,n){t=Fu(t),e=Or(e);var r=t.length;return n=n===K?r:mn(Mu(n),0,r),n-=e.length,n>=0&&t.indexOf(e,n)==n}/**
	     * Converts the characters "&", "<", ">", '"', "'", and "\`" in `string` to
	     * their corresponding HTML entities.
	     *
	     * **Note:** No other characters are escaped. To escape additional
	     * characters use a third-party library like [_he_](https://mths.be/he).
	     *
	     * Though the ">" character is escaped for symmetry, characters like
	     * ">" and "/" don't need escaping in HTML and have no special meaning
	     * unless they're part of a tag or unquoted attribute value. See
	     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
	     * (under "semi-related fun fact") for more details.
	     *
	     * Backticks are escaped because in IE < 9, they can break out of
	     * attribute values or HTML comments. See [#59](https://html5sec.org/#59),
	     * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and
	     * [#133](https://html5sec.org/#133) of the
	     * [HTML5 Security Cheatsheet](https://html5sec.org/) for more details.
	     *
	     * When working with HTML you should always
	     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
	     * XSS vectors.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escape('fred, barney, & pebbles');
	     * // => 'fred, barney, &amp; pebbles'
	     */
function ws(t){return t=Fu(t),t&&ce.test(t)?t.replace(ue,L):t}/**
	     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
	     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escapeRegExp('[lodash](https://lodash.com/)');
	     * // => '\[lodash\]\(https://lodash\.com/\)'
	     */
function xs(t){return t=Fu(t),t&&me.test(t)?t.replace(ge,"\\$&"):t}/**
	     * Pads `string` on the left and right sides if it's shorter than `length`.
	     * Padding characters are truncated if they can't be evenly divided by `length`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.pad('abc', 8);
	     * // => '  abc   '
	     *
	     * _.pad('abc', 8, '_-');
	     * // => '_-abc_-_'
	     *
	     * _.pad('abc', 3);
	     * // => 'abc'
	     */
function _s(t,e,n){t=Fu(t),e=Mu(e);var r=e?G(t):0;if(!e||r>=e)return t;var i=(e-r)/2;return mi(Lc(i),n)+t+mi(Ic(i),n)}/**
	     * Pads `string` on the right side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padEnd('abc', 6);
	     * // => 'abc   '
	     *
	     * _.padEnd('abc', 6, '_-');
	     * // => 'abc_-_'
	     *
	     * _.padEnd('abc', 3);
	     * // => 'abc'
	     */
function Cs(t,e,n){t=Fu(t),e=Mu(e);var r=e?G(t):0;return e&&r<e?t+mi(e-r,n):t}/**
	     * Pads `string` on the left side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padStart('abc', 6);
	     * // => '   abc'
	     *
	     * _.padStart('abc', 6, '_-');
	     * // => '_-_abc'
	     *
	     * _.padStart('abc', 3);
	     * // => 'abc'
	     */
function Ss(t,e,n){t=Fu(t),e=Mu(e);var r=e?G(t):0;return e&&r<e?mi(e-r,n)+t:t}/**
	     * Converts `string` to an integer of the specified radix. If `radix` is
	     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
	     * hexadecimal, in which case a `radix` of `16` is used.
	     *
	     * **Note:** This method aligns with the
	     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.1.0
	     * @category String
	     * @param {string} string The string to convert.
	     * @param {number} [radix=10] The radix to interpret `value` by.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.parseInt('08');
	     * // => 8
	     *
	     * _.map(['6', '08', '10'], _.parseInt);
	     * // => [6, 8, 10]
	     */
function As(t,e,n){
// Chrome fails to trim leading <BOM> whitespace characters.
// See https://bugs.chromium.org/p/v8/issues/detail?id=3109 for more details.
return n||null==e?e=0:e&&(e=+e),t=Fu(t).replace(ye,""),Wc(t,e||(Se.test(t)?16:10))}/**
	     * Repeats the given string `n` times.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to repeat.
	     * @param {number} [n=1] The number of times to repeat the string.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the repeated string.
	     * @example
	     *
	     * _.repeat('*', 3);
	     * // => '***'
	     *
	     * _.repeat('abc', 2);
	     * // => 'abcabc'
	     *
	     * _.repeat('abc', 0);
	     * // => ''
	     */
function Es(t,e,n){return e=(n?Xi(t,e,n):e===K)?1:Mu(e),xr(Fu(t),e)}/**
	     * Replaces matches for `pattern` in `string` with `replacement`.
	     *
	     * **Note:** This method is based on
	     * [`String#replace`](https://mdn.io/String/replace).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to modify.
	     * @param {RegExp|string} pattern The pattern to replace.
	     * @param {Function|string} replacement The match replacement.
	     * @returns {string} Returns the modified string.
	     * @example
	     *
	     * _.replace('Hi Fred', 'Fred', 'Barney');
	     * // => 'Hi Barney'
	     */
function ks(){var t=arguments,e=Fu(t[0]);return t.length<3?e:Gc.call(e,t[1],t[2])}/**
	     * Splits `string` by `separator`.
	     *
	     * **Note:** This method is based on
	     * [`String#split`](https://mdn.io/String/split).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to split.
	     * @param {RegExp|string} separator The separator pattern to split by.
	     * @param {number} [limit] The length to truncate results to.
	     * @returns {Array} Returns the string segments.
	     * @example
	     *
	     * _.split('a-b-c', '-', 2);
	     * // => ['a', 'b']
	     */
function Ts(t,e,n){return n&&"number"!=typeof n&&Xi(t,e,n)&&(e=n=K),(n=n===K?At:n>>>0)?(t=Fu(t),t&&("string"==typeof e||null!=e&&!Su(e))&&(e=Or(e),""==e&&xn.test(t))?Fr(X(t),0,n):Jc.call(t,e,n)):[]}/**
	     * Checks if `string` starts with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to search.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=0] The position to search from.
	     * @returns {boolean} Returns `true` if `string` starts with `target`,
	     *  else `false`.
	     * @example
	     *
	     * _.startsWith('abc', 'a');
	     * // => true
	     *
	     * _.startsWith('abc', 'b');
	     * // => false
	     *
	     * _.startsWith('abc', 'b', 1);
	     * // => true
	     */
function Os(t,e,n){return t=Fu(t),n=mn(Mu(n),0,t.length),t.lastIndexOf(Or(e),n)==n}/**
	     * Creates a compiled template function that can interpolate data properties
	     * in "interpolate" delimiters, HTML-escape interpolated data properties in
	     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
	     * properties may be accessed as free variables in the template. If a setting
	     * object is given, it takes precedence over `_.templateSettings` values.
	     *
	     * **Note:** In the development build `_.template` utilizes
	     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
	     * for easier debugging.
	     *
	     * For more information on precompiling templates see
	     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
	     *
	     * For more information on Chrome extension sandboxes see
	     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The template string.
	     * @param {Object} [options={}] The options object.
	     * @param {RegExp} [options.escape=_.templateSettings.escape]
	     *  The HTML "escape" delimiter.
	     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
	     *  The "evaluate" delimiter.
	     * @param {Object} [options.imports=_.templateSettings.imports]
	     *  An object to import into the template as free variables.
	     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
	     *  The "interpolate" delimiter.
	     * @param {string} [options.sourceURL='lodash.templateSources[n]']
	     *  The sourceURL of the compiled template.
	     * @param {string} [options.variable='obj']
	     *  The data object variable name.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the compiled template function.
	     * @example
	     *
	     * // Use the "interpolate" delimiter to create a compiled template.
	     * var compiled = _.template('hello <%= user %>!');
	     * compiled({ 'user': 'fred' });
	     * // => 'hello fred!'
	     *
	     * // Use the HTML "escape" delimiter to escape data property values.
	     * var compiled = _.template('<b><%- value %></b>');
	     * compiled({ 'value': '<script>' });
	     * // => '<b>&lt;script&gt;</b>'
	     *
	     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
	     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // Use the internal `print` function in "evaluate" delimiters.
	     * var compiled = _.template('<% print("hello " + user); %>!');
	     * compiled({ 'user': 'barney' });
	     * // => 'hello barney!'
	     *
	     * // Use the ES delimiter as an alternative to the default "interpolate" delimiter.
	     * var compiled = _.template('hello ${ user }!');
	     * compiled({ 'user': 'pebbles' });
	     * // => 'hello pebbles!'
	     *
	     * // Use backslashes to treat delimiters as plain text.
	     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
	     * compiled({ 'value': 'ignored' });
	     * // => '<%- value %>'
	     *
	     * // Use the `imports` option to import `jQuery` as `jq`.
	     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
	     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
	     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
	     * compiled(data);
	     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
	     *
	     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
	     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
	     * compiled.source;
	     * // => function(data) {
	     * //   var __t, __p = '';
	     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
	     * //   return __p;
	     * // }
	     *
	     * // Use custom template delimiters.
	     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
	     * var compiled = _.template('hello {{ user }}!');
	     * compiled({ 'user': 'mustache' });
	     * // => 'hello mustache!'
	     *
	     * // Use the `source` property to inline compiled templates for meaningful
	     * // line numbers in error messages and stack traces.
	     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
	     *   var JST = {\
	     *     "main": ' + _.template(mainText).source + '\
	     *   };\
	     * ');
	     */
function Rs(t,n,r){
// Based on John Resig's `tmpl` implementation
// (http://ejohn.org/blog/javascript-micro-templating/)
// and Laura Doktorova's doT.js (https://github.com/olado/doT).
var i=e.templateSettings;r&&Xi(t,n,r)&&(n=K),t=Fu(t),n=hf({},n,i,ln);var o,a,u=hf({},n.imports,i.imports,ln),s=ts(u),c=R(u,s),l=0,f=n.interpolate||je,h="__p += '",p=pc((n.escape||je).source+"|"+f.source+"|"+(f===he?_e:je).source+"|"+(n.evaluate||je).source+"|$","g"),d="//# sourceURL="+("sourceURL"in n?n.sourceURL:"lodash.templateSources["+ ++Sn+"]")+"\n";t.replace(p,function(e,n,r,i,u,s){
// The JS engine embedded in Adobe products needs `match` returned in
// order to produce the correct `offset` value.
// Escape characters that can't be included in string literals.
// Replace delimiters with snippets.
return r||(r=i),h+=t.slice(l,s).replace(Ne,q),n&&(o=!0,h+="' +\n__e("+n+") +\n'"),u&&(a=!0,h+="';\n"+u+";\n__p += '"),r&&(h+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),l=s+e.length,e}),h+="';\n";
// If `variable` is not specified wrap a with-statement around the generated
// code to add the data object to the top of the scope chain.
var v=n.variable;v||(h="with (obj) {\n"+h+"\n}\n"),
// Cleanup code by stripping empty strings.
h=(a?h.replace(re,""):h).replace(ie,"$1").replace(oe,"$1;"),
// Frame code as the function body.
h="function("+(v||"obj")+") {\n"+(v?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(o?", __e = _.escape":"")+(a?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+h+"return __p\n}";var g=Pf(function(){return Function(s,d+"return "+h).apply(K,c)});if(
// Provide the compiled function's source by its `toString` method or
// the `source` property as a convenience for inlining compiled templates.
g.source=h,cu(g))throw g;return g}/**
	     * Converts `string`, as a whole, to lower case just like
	     * [String#toLowerCase](https://mdn.io/toLowerCase).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the lower cased string.
	     * @example
	     *
	     * _.toLower('--Foo-Bar--');
	     * // => '--foo-bar--'
	     *
	     * _.toLower('fooBar');
	     * // => 'foobar'
	     *
	     * _.toLower('__FOO_BAR__');
	     * // => '__foo_bar__'
	     */
function js(t){return Fu(t).toLowerCase()}/**
	     * Converts `string`, as a whole, to upper case just like
	     * [String#toUpperCase](https://mdn.io/toUpperCase).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the upper cased string.
	     * @example
	     *
	     * _.toUpper('--foo-bar--');
	     * // => '--FOO-BAR--'
	     *
	     * _.toUpper('fooBar');
	     * // => 'FOOBAR'
	     *
	     * _.toUpper('__foo_bar__');
	     * // => '__FOO_BAR__'
	     */
function Ns(t){return Fu(t).toUpperCase()}/**
	     * Removes leading and trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trim('  abc  ');
	     * // => 'abc'
	     *
	     * _.trim('-_-abc-_-', '_-');
	     * // => 'abc'
	     *
	     * _.map(['  foo  ', '  bar  '], _.trim);
	     * // => ['foo', 'bar']
	     */
function Ps(t,e,n){if(t=Fu(t),t&&(n||e===K))return t.replace(ye,"");if(!t||!(e=Or(e)))return t;var r=X(t),i=X(e),o=N(r,i),a=P(r,i)+1;return Fr(r,o,a).join("")}/**
	     * Removes trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimEnd('  abc  ');
	     * // => '  abc'
	     *
	     * _.trimEnd('-_-abc-_-', '_-');
	     * // => '-_-abc'
	     */
function Ds(t,e,n){if(t=Fu(t),t&&(n||e===K))return t.replace(be,"");if(!t||!(e=Or(e)))return t;var r=X(t),i=P(r,X(e))+1;return Fr(r,0,i).join("")}/**
	     * Removes leading whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimStart('  abc  ');
	     * // => 'abc  '
	     *
	     * _.trimStart('-_-abc-_-', '_-');
	     * // => 'abc-_-'
	     */
function Ms(t,e,n){if(t=Fu(t),t&&(n||e===K))return t.replace($e,"");if(!t||!(e=Or(e)))return t;var r=X(t),i=N(r,X(e));return Fr(r,i).join("")}/**
	     * Truncates `string` if it's longer than the given maximum string length.
	     * The last characters of the truncated string are replaced with the omission
	     * string which defaults to "...".
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to truncate.
	     * @param {Object} [options={}] The options object.
	     * @param {number} [options.length=30] The maximum string length.
	     * @param {string} [options.omission='...'] The string to indicate text is omitted.
	     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
	     * @returns {string} Returns the truncated string.
	     * @example
	     *
	     * _.truncate('hi-diddly-ho there, neighborino');
	     * // => 'hi-diddly-ho there, neighbo...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': ' '
	     * });
	     * // => 'hi-diddly-ho there,...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': /,? +/
	     * });
	     * // => 'hi-diddly-ho there...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'omission': ' [...]'
	     * });
	     * // => 'hi-diddly-ho there, neig [...]'
	     */
function Is(t,e){var n=vt,r=gt;if(du(e)){var i="separator"in e?e.separator:i;n="length"in e?Mu(e.length):n,r="omission"in e?Or(e.omission):r}t=Fu(t);var o=t.length;if(xn.test(t)){var a=X(t);o=a.length}if(n>=o)return t;var u=n-G(r);if(u<1)return r;var s=a?Fr(a,0,u).join(""):t.slice(0,u);if(i===K)return s+r;if(a&&(u+=s.length-u),Su(i)){if(t.slice(u).search(i)){var c,l=s;for(i.global||(i=pc(i.source,Fu(Ce.exec(i))+"g")),i.lastIndex=0;c=i.exec(l);)var f=c.index;s=s.slice(0,f===K?u:f)}}else if(t.indexOf(Or(i),u)!=u){var h=s.lastIndexOf(i);h>-1&&(s=s.slice(0,h))}return s+r}/**
	     * The inverse of `_.escape`; this method converts the HTML entities
	     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to
	     * their corresponding characters.
	     *
	     * **Note:** No other HTML entities are unescaped. To unescape additional
	     * HTML entities use a third-party library like [_he_](https://mths.be/he).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.6.0
	     * @category String
	     * @param {string} [string=''] The string to unescape.
	     * @returns {string} Returns the unescaped string.
	     * @example
	     *
	     * _.unescape('fred, barney, &amp; pebbles');
	     * // => 'fred, barney, & pebbles'
	     */
function Ls(t){return t=Fu(t),t&&se.test(t)?t.replace(ae,J):t}/**
	     * Splits `string` into an array of its words.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {RegExp|string} [pattern] The pattern to match words.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the words of `string`.
	     * @example
	     *
	     * _.words('fred, barney, & pebbles');
	     * // => ['fred', 'barney', 'pebbles']
	     *
	     * _.words('fred, barney, & pebbles', /[^, ]+/g);
	     * // => ['fred', 'barney', '&', 'pebbles']
	     */
function qs(t,e,n){return t=Fu(t),e=n?K:e,e===K&&(e=_n.test(t)?wn:we),t.match(e)||[]}/**
	     * Creates a function that iterates over `pairs` and invokes the corresponding
	     * function of the first predicate to return truthy. The predicate-function
	     * pairs are invoked with the `this` binding and arguments of the created
	     * function.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {Array} pairs The predicate-function pairs.
	     * @returns {Function} Returns the new composite function.
	     * @example
	     *
	     * var func = _.cond([
	     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
	     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
	     *   [_.constant(true),                _.constant('no match')]
	     * ]);
	     *
	     * func({ 'a': 1, 'b': 2 });
	     * // => 'matches A'
	     *
	     * func({ 'a': 0, 'b': 1 });
	     * // => 'matches B'
	     *
	     * func({ 'a': '1', 'b': '2' });
	     * // => 'no match'
	     */
function Us(t){var e=t?t.length:0,n=ji();return t=e?v(t,function(t){if("function"!=typeof t[1])throw new dc(tt);return[n(t[0]),t[1]]}):[],Va(function(n){for(var r=-1;++r<e;){var i=t[r];if(u(i[0],this,n))return u(i[1],this,n)}})}/**
	     * Creates a function that invokes the predicate properties of `source` with
	     * the corresponding property values of a given object, returning `true` if
	     * all predicates return truthy, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {Function} Returns the new spec function.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * _.filter(users, _.conforms({ 'age': _.partial(_.gt, _, 38) }));
	     * // => [{ 'user': 'fred', 'age': 40 }]
	     */
function Fs(t){return kn(bn(t,!0))}/**
	     * Creates a function that returns `value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Util
	     * @param {*} value The value to return from the new function.
	     * @returns {Function} Returns the new constant function.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     * var getter = _.constant(object);
	     *
	     * getter() === object;
	     * // => true
	     */
function Vs(t){return function(){return t}}/**
	     * This method returns the first argument given to it.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {*} value Any value.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * _.identity(object) === object;
	     * // => true
	     */
function Hs(t){return t}/**
	     * Creates a function that invokes `func` with the arguments of the created
	     * function. If `func` is a property name, the created function returns the
	     * property value for a given element. If `func` is an array or object, the
	     * created function returns `true` for elements that contain the equivalent
	     * source properties, otherwise it returns `false`.
	     *
	     * @static
	     * @since 4.0.0
	     * @memberOf _
	     * @category Util
	     * @param {*} [func=_.identity] The value to convert to a callback.
	     * @returns {Function} Returns the callback.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
	     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.filter(users, _.iteratee(['user', 'fred']));
	     * // => [{ 'user': 'fred', 'age': 40 }]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.map(users, _.iteratee('user'));
	     * // => ['barney', 'fred']
	     *
	     * // Create custom iteratee shorthands.
	     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
	     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
	     *     return func.test(string);
	     *   };
	     * });
	     *
	     * _.filter(['abc', 'def'], /ef/);
	     * // => ['def']
	     */
function Bs(t){return rr("function"==typeof t?t:bn(t,!0))}/**
	     * Creates a function that performs a partial deep comparison between a given
	     * object and `source`, returning `true` if the given object has equivalent
	     * property values, else `false`. The created function is equivalent to
	     * `_.isMatch` with a `source` partially applied.
	     *
	     * **Note:** This method supports comparing the same values as `_.isEqual`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new spec function.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * _.filter(users, _.matches({ 'age': 40, 'active': false }));
	     * // => [{ 'user': 'fred', 'age': 40, 'active': false }]
	     */
function Ws(t){return sr(bn(t,!0))}/**
	     * Creates a function that performs a partial deep comparison between the
	     * value at `path` of a given object to `srcValue`, returning `true` if the
	     * object value is equivalent, else `false`.
	     *
	     * **Note:** This method supports comparing the same values as `_.isEqual`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.2.0
	     * @category Util
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new spec function.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * _.find(users, _.matchesProperty('user', 'fred'));
	     * // => { 'user': 'fred' }
	     */
function zs(t,e){return cr(t,bn(e,!0))}/**
	     * Adds all own enumerable string keyed function properties of a source
	     * object to the destination object. If `object` is a function, then methods
	     * are added to its prototype as well.
	     *
	     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
	     * avoid conflicts caused by modifying the original.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {Function|Object} [object=lodash] The destination object.
	     * @param {Object} source The object of functions to add.
	     * @param {Object} [options={}] The options object.
	     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
	     * @returns {Function|Object} Returns `object`.
	     * @example
	     *
	     * function vowels(string) {
	     *   return _.filter(string, function(v) {
	     *     return /[aeiou]/i.test(v);
	     *   });
	     * }
	     *
	     * _.mixin({ 'vowels': vowels });
	     * _.vowels('fred');
	     * // => ['e']
	     *
	     * _('fred').vowels().value();
	     * // => ['e']
	     *
	     * _.mixin({ 'vowels': vowels }, { 'chain': false });
	     * _('fred').vowels();
	     * // => ['e']
	     */
function Gs(t,e,n){var r=ts(e),i=Bn(e,r);null!=n||du(e)&&(i.length||!r.length)||(n=e,e=t,t=this,i=Bn(e,ts(e)));var o=!(du(n)&&"chain"in n&&!n.chain),a=fu(t);return c(i,function(n){var r=e[n];t[n]=r,a&&(t.prototype[n]=function(){var e=this.__chain__;if(o||e){var n=t(this.__wrapped__),i=n.__actions__=ti(this.__actions__);return i.push({func:r,args:arguments,thisArg:t}),n.__chain__=e,n}return r.apply(t,g([this.value()],arguments))})}),t}/**
	     * Reverts the `_` variable to its previous value and returns a reference to
	     * the `lodash` function.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @returns {Function} Returns the `lodash` function.
	     * @example
	     *
	     * var lodash = _.noConflict();
	     */
function Xs(){return Vn._===this&&(Vn._=_c),this}/**
	     * A no-operation function that returns `undefined` regardless of the
	     * arguments it receives.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.3.0
	     * @category Util
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * _.noop(object) === undefined;
	     * // => true
	     */
function Js(){}/**
	     * Creates a function that gets the argument at `n` index. If `n` is negative,
	     * the nth argument from the end is returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {number} [n=0] The index of the argument to return.
	     * @returns {Function} Returns the new pass-thru function.
	     * @example
	     *
	     * var func = _.nthArg(1);
	     * func('a', 'b', 'c', 'd');
	     * // => 'b'
	     *
	     * var func = _.nthArg(-2);
	     * func('a', 'b', 'c', 'd');
	     * // => 'c'
	     */
function Ys(t){return t=Mu(t),Va(function(e){return hr(e,t)})}/**
	     * Creates a function that returns the value at `path` of a given object.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Util
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new accessor function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': 2 } },
	     *   { 'a': { 'b': 1 } }
	     * ];
	     *
	     * _.map(objects, _.property('a.b'));
	     * // => [2, 1]
	     *
	     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
	     * // => [1, 2]
	     */
function Ks(t){return Ji(t)?gr(oo(t)):mr(t)}/**
	     * The opposite of `_.property`; this method creates a function that returns
	     * the value at a given path of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {Object} object The object to query.
	     * @returns {Function} Returns the new accessor function.
	     * @example
	     *
	     * var array = [0, 1, 2],
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
	     * // => [2, 0]
	     */
function Zs(t){return function(e){return null==t?K:Wn(t,e)}}/**
	     * Invokes the iteratee `n` times, returning an array of the results of
	     * each invocation. The iteratee is invoked with one argument; (index).
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {number} n The number of times to invoke `iteratee`.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * _.times(3, String);
	     * // => ['0', '1', '2']
	     *
	     *  _.times(4, _.constant(true));
	     * // => [true, true, true, true]
	     */
function Qs(t,e){if(t=Mu(t),t<1||t>_t)return[];var n=At,r=Bc(t,At);e=ji(e),t-=At;for(var i=k(r,e);++n<t;)e(n);return i}/**
	     * Converts `value` to a property path array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {*} value The value to convert.
	     * @returns {Array} Returns the new property path array.
	     * @example
	     *
	     * _.toPath('a.b.c');
	     * // => ['a', 'b', 'c']
	     *
	     * _.toPath('a[0].b.c');
	     * // => ['a', '0', 'b', 'c']
	     *
	     * var path = ['a', 'b', 'c'],
	     *     newPath = _.toPath(path);
	     *
	     * console.log(newPath);
	     * // => ['a', 'b', 'c']
	     *
	     * console.log(path === newPath);
	     * // => false
	     */
function tc(t){return af(t)?v(t,oo):Tu(t)?[t]:ti(_l(t))}/**
	     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {string} [prefix=''] The value to prefix the ID with.
	     * @returns {string} Returns the unique ID.
	     * @example
	     *
	     * _.uniqueId('contact_');
	     * // => 'contact_104'
	     *
	     * _.uniqueId();
	     * // => '105'
	     */
function ec(t){var e=++bc;return Fu(t)+e}/**
	     * Computes the maximum value of `array`. If `array` is empty or falsey,
	     * `undefined` is returned.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {*} Returns the maximum value.
	     * @example
	     *
	     * _.max([4, 2, 8, 6]);
	     * // => 8
	     *
	     * _.max([]);
	     * // => undefined
	     */
function nc(t){return t&&t.length?Dn(t,Hs,Gn):K}/**
	     * This method is like `_.max` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * the value is ranked. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {*} Returns the maximum value.
	     * @example
	     *
	     * var objects = [{ 'n': 1 }, { 'n': 2 }];
	     *
	     * _.maxBy(objects, function(o) { return o.n; });
	     * // => { 'n': 2 }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.maxBy(objects, 'n');
	     * // => { 'n': 2 }
	     */
function rc(t,e){return t&&t.length?Dn(t,ji(e),Gn):K}/**
	     * Computes the mean of the values in `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {number} Returns the mean.
	     * @example
	     *
	     * _.mean([4, 2, 8, 6]);
	     * // => 5
	     */
function ic(t){return C(t,Hs)}/**
	     * This method is like `_.mean` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the value to be averaged.
	     * The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {number} Returns the mean.
	     * @example
	     *
	     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
	     *
	     * _.meanBy(objects, function(o) { return o.n; });
	     * // => 5
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.meanBy(objects, 'n');
	     * // => 5
	     */
function oc(t,e){return C(t,ji(e))}/**
	     * Computes the minimum value of `array`. If `array` is empty or falsey,
	     * `undefined` is returned.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {*} Returns the minimum value.
	     * @example
	     *
	     * _.min([4, 2, 8, 6]);
	     * // => 2
	     *
	     * _.min([]);
	     * // => undefined
	     */
function ac(t){return t&&t.length?Dn(t,Hs,ar):K}/**
	     * This method is like `_.min` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * the value is ranked. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {*} Returns the minimum value.
	     * @example
	     *
	     * var objects = [{ 'n': 1 }, { 'n': 2 }];
	     *
	     * _.minBy(objects, function(o) { return o.n; });
	     * // => { 'n': 1 }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.minBy(objects, 'n');
	     * // => { 'n': 1 }
	     */
function uc(t,e){return t&&t.length?Dn(t,ji(e),ar):K}/**
	     * Computes the sum of the values in `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.4.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * _.sum([4, 2, 8, 6]);
	     * // => 20
	     */
function sc(t){return t&&t.length?E(t,Hs):0}/**
	     * This method is like `_.sum` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the value to be summed.
	     * The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
	     *
	     * _.sumBy(objects, function(o) { return o.n; });
	     * // => 20
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sumBy(objects, 'n');
	     * // => 20
	     */
function cc(t,e){return t&&t.length?E(t,ji(e)):0}t=t?Hn.defaults({},t,Hn.pick(Vn,Cn)):Vn;/** Built-in constructor references. */
var lc=t.Date,fc=t.Error,hc=t.Math,pc=t.RegExp,dc=t.TypeError,vc=t.Array.prototype,gc=t.Object.prototype,mc=t.String.prototype,yc=t.Function.prototype.toString,$c=gc.hasOwnProperty,bc=0,wc=yc.call(Object),xc=gc.toString,_c=Vn._,Cc=pc("^"+yc.call($c).replace(ge,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Sc=In?t.Buffer:K,Ac=t.Reflect,Ec=t.Symbol,kc=t.Uint8Array,Tc=t.clearTimeout,Oc=Ac?Ac.enumerate:K,Rc=Object.getOwnPropertySymbols,jc="symbol"==typeof(jc=Ec&&Ec.iterator)?jc:K,Nc=Object.create,Pc=gc.propertyIsEnumerable,Dc=t.setTimeout,Mc=vc.splice,Ic=hc.ceil,Lc=hc.floor,qc=Object.getPrototypeOf,Uc=t.isFinite,Fc=vc.join,Vc=Object.keys,Hc=hc.max,Bc=hc.min,Wc=t.parseInt,zc=hc.random,Gc=mc.replace,Xc=vc.reverse,Jc=mc.split,Yc=Di(t,"DataView"),Kc=Di(t,"Map"),Zc=Di(t,"Promise"),Qc=Di(t,"Set"),tl=Di(t,"WeakMap"),el=Di(Object,"create"),nl=tl&&new tl,rl=!Pc.call({valueOf:1},"valueOf"),il={},ol=ao(Yc),al=ao(Kc),ul=ao(Zc),sl=ao(Qc),cl=ao(tl),ll=Ec?Ec.prototype:K,fl=ll?ll.valueOf:K,hl=ll?ll.toString:K;/**
	     * By default, the template delimiters used by lodash are like those in
	     * embedded Ruby (ERB). Change the following template settings to use
	     * alternative delimiters.
	     *
	     * @static
	     * @memberOf _
	     * @type {Object}
	     */
e.templateSettings={/**
	       * Used to detect `data` property values to be HTML-escaped.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */
escape:le,/**
	       * Used to detect code to be evaluated.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */
evaluate:fe,/**
	       * Used to detect `data` property values to inject.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */
interpolate:he,/**
	       * Used to reference the data object in the template text.
	       *
	       * @memberOf _.templateSettings
	       * @type {string}
	       */
variable:"",/**
	       * Used to import variables into the compiled template.
	       *
	       * @memberOf _.templateSettings
	       * @type {Object}
	       */
imports:{/**
	         * A reference to the `lodash` function.
	         *
	         * @memberOf _.templateSettings.imports
	         * @type {Function}
	         */
_:e}},
// Ensure wrappers are instances of `baseLodash`.
e.prototype=n.prototype,e.prototype.constructor=e,r.prototype=Tn(n.prototype),r.prototype.constructor=r,
// Ensure `LazyWrapper` is an instance of `baseLodash`.
i.prototype=Tn(n.prototype),i.prototype.constructor=i,
// Add methods to `Hash`.
Me.prototype.clear=Ie,Me.prototype["delete"]=Le,Me.prototype.get=qe,Me.prototype.has=Ue,Me.prototype.set=Fe,
// Add methods to `ListCache`.
Ve.prototype.clear=He,Ve.prototype["delete"]=Be,Ve.prototype.get=We,Ve.prototype.has=ze,Ve.prototype.set=Ge,
// Add methods to `MapCache`.
Xe.prototype.clear=Je,Xe.prototype["delete"]=Ye,Xe.prototype.get=Ke,Xe.prototype.has=Ze,Xe.prototype.set=Qe,
// Add methods to `SetCache`.
tn.prototype.add=tn.prototype.push=en,tn.prototype.has=nn,
// Add methods to `Stack`.
rn.prototype.clear=on,rn.prototype["delete"]=an,rn.prototype.get=un,rn.prototype.has=sn,rn.prototype.set=cn;/**
	     * The base implementation of `_.forEach` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     */
var pl=oi(Un),dl=oi(Fn,!0),vl=ai(),gl=ai(!0);
// Fallback for IE < 9 with es6-shim.
Oc&&!Pc.call({valueOf:1},"valueOf")&&(or=function(t){return V(Oc(t))});/**
	     * The base implementation of `setData` without support for hot loop detection.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
var ml=nl?function(t,e){return nl.set(t,e),t}:Hs,yl=Qc&&1/W(new Qc([,-0]))[1]==xt?function(t){return new Qc(t)}:Js,$l=nl?function(t){return nl.get(t)}:Js,bl=gr("length");
// Fallback for IE < 11.
Rc||(Ii=function(){return[]});/**
	     * Creates an array of the own and inherited enumerable symbol properties
	     * of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of symbols.
	     */
var wl=Rc?function(t){for(var e=[];t;)g(e,Ii(t)),t=Mi(t);return e}:Ii;
// Fallback for data views, maps, sets, and weak maps in IE 11,
// for data views in Edge, and promises in Node.js.
(Yc&&Li(new Yc(new ArrayBuffer(1)))!=Gt||Kc&&Li(new Kc)!=Mt||Zc&&Li(Zc.resolve())!=qt||Qc&&Li(new Qc)!=Ft||tl&&Li(new tl)!=Bt)&&(Li=function(t){var e=xc.call(t),n=e==Lt?t.constructor:K,r=n?ao(n):K;if(r)switch(r){case ol:return Gt;case al:return Mt;case ul:return qt;case sl:return Ft;case cl:return Bt}return e});/**
	     * Sets metadata for `func`.
	     *
	     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
	     * period of time, it will trip its breaker and transition to an identity
	     * function to avoid garbage collection pauses in V8. See
	     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
	     * for more details.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
var xl=function(){var t=0,e=0;return function(n,r){var i=Xl(),o=yt-(i-e);if(e=i,o>0){if(++t>=mt)return n}else t=0;return ml(n,r)}}(),_l=qa(function(t){var e=[];return Fu(t).replace(ve,function(t,n,r,i){e.push(r?i.replace(xe,"$1"):n||t)}),e}),Cl=Va(function(t,e){return nu(t)?Rn(t,qn(e,1,nu,!0)):[]}),Sl=Va(function(t,e){var n=Eo(e);return nu(n)&&(n=K),nu(t)?Rn(t,qn(e,1,nu,!0),ji(n)):[]}),Al=Va(function(t,e){var n=Eo(e);return nu(n)&&(n=K),nu(t)?Rn(t,qn(e,1,nu,!0),K,n):[]}),El=Va(function(t){var e=v(t,Lr);return e.length&&e[0]===t[0]?Kn(e):[]}),kl=Va(function(t){var e=Eo(t),n=v(t,Lr);return e===Eo(n)?e=K:n.pop(),n.length&&n[0]===t[0]?Kn(n,ji(e)):[]}),Tl=Va(function(t){var e=Eo(t),n=v(t,Lr);return e===Eo(n)?e=K:n.pop(),n.length&&n[0]===t[0]?Kn(n,K,e):[]}),Ol=Va(Oo),Rl=Va(function(t,e){e=qn(e,1);var n=t?t.length:0,r=gn(t,e);return $r(t,v(e,function(t){return Gi(t,n)?+t:t}).sort(Yr)),r}),jl=Va(function(t){return Rr(qn(t,1,nu,!0))}),Nl=Va(function(t){var e=Eo(t);return nu(e)&&(e=K),Rr(qn(t,1,nu,!0),ji(e))}),Pl=Va(function(t){var e=Eo(t);return nu(e)&&(e=K),Rr(qn(t,1,nu,!0),K,e)}),Dl=Va(function(t,e){return nu(t)?Rn(t,e):[]}),Ml=Va(function(t){return Mr(h(t,nu))}),Il=Va(function(t){var e=Eo(t);return nu(e)&&(e=K),Mr(h(t,nu),ji(e))}),Ll=Va(function(t){var e=Eo(t);return nu(e)&&(e=K),Mr(h(t,nu),K,e)}),ql=Va(Zo),Ul=Va(function(t){var e=t.length,n=e>1?t[e-1]:K;return n="function"==typeof n?(t.pop(),n):K,Qo(t,n)}),Fl=Va(function(t){t=qn(t,1);var e=t.length,n=e?t[0]:0,o=this.__wrapped__,a=function(e){return gn(e,t)};return!(e>1||this.__actions__.length)&&o instanceof i&&Gi(n)?(o=o.slice(n,+n+(e?1:0)),o.__actions__.push({func:ia,args:[a],thisArg:K}),new r(o,this.__chain__).thru(function(t){return e&&!t.length&&t.push(K),t})):this.thru(a)}),Vl=ri(function(t,e,n){$c.call(t,n)?++t[n]:t[n]=1}),Hl=ri(function(t,e,n){$c.call(t,n)?t[n].push(e):t[n]=[e]}),Bl=Va(function(t,e,n){var r=-1,i="function"==typeof e,o=Ji(e),a=eu(t)?Array(t.length):[];return pl(t,function(t){var s=i?e:o&&null!=t?t[e]:K;a[++r]=s?u(s,t,n):Qn(t,e,n)}),a}),Wl=ri(function(t,e,n){t[n]=e}),zl=ri(function(t,e,n){t[n?0:1].push(e)},function(){return[[],[]]}),Gl=Va(function(t,e){if(null==t)return[];var n=e.length;return n>1&&Xi(t,e[0],e[1])?e=[]:n>2&&Xi(e[0],e[1],e[2])&&(e=[e[0]]),e=1==e.length&&af(e[0])?e[0]:qn(e,1,zi),pr(t,e,[])}),Xl=lc.now,Jl=Va(function(t,e,n){var r=rt;if(n.length){var i=B(n,Ri(Jl));r|=st}return Ci(t,r,e,n,i)}),Yl=Va(function(t,e,n){var r=rt|it;if(n.length){var i=B(n,Ri(Yl));r|=st}return Ci(e,r,t,n,i)}),Kl=Va(function(t,e){return On(t,1,e)}),Zl=Va(function(t,e,n){return On(t,Lu(e)||0,n)});
// Assign cache to `_.memoize`.
qa.Cache=Xe;/**
	     * Creates a function that invokes `func` with arguments transformed by
	     * corresponding `transforms`.
	     *
	     * @static
	     * @since 4.0.0
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to wrap.
	     * @param {...(Array|Array[]|Function|Function[]|Object|Object[]|string|string[])}
	     *  [transforms[_.identity]] The functions to transform.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function doubled(n) {
	     *   return n * 2;
	     * }
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var func = _.overArgs(function(x, y) {
	     *   return [x, y];
	     * }, square, doubled);
	     *
	     * func(9, 3);
	     * // => [81, 6]
	     *
	     * func(10, 5);
	     * // => [100, 10]
	     */
var Ql=Va(function(t,e){e=1==e.length&&af(e[0])?v(e[0],O(ji())):v(qn(e,1,zi),O(ji()));var n=e.length;return Va(function(r){for(var i=-1,o=Bc(r.length,n);++i<o;)r[i]=e[i].call(this,r[i]);return u(t,this,r)})}),tf=Va(function(t,e){var n=B(e,Ri(tf));return Ci(t,st,K,e,n)}),ef=Va(function(t,e){var n=B(e,Ri(ef));return Ci(t,ct,K,e,n)}),nf=Va(function(t,e){return Ci(t,ft,K,K,K,qn(e,1))}),rf=bi(Gn),of=bi(function(t,e){return t>=e}),af=Array.isArray,uf=Sc?function(t){return t instanceof Sc}:Vs(!1),sf=bi(ar),cf=bi(function(t,e){return t<=e}),lf=ii(function(t,e){if(rl||Zi(e)||eu(e))return void ei(e,ts(e),t);for(var n in e)$c.call(e,n)&&hn(t,n,e[n])}),ff=ii(function(t,e){if(rl||Zi(e)||eu(e))return void ei(e,es(e),t);for(var n in e)hn(t,n,e[n])}),hf=ii(function(t,e,n,r){ei(e,es(e),t,r)}),pf=ii(function(t,e,n,r){ei(e,ts(e),t,r)}),df=Va(function(t,e){return gn(t,qn(e,1))}),vf=Va(function(t){return t.push(K,ln),u(hf,K,t)}),gf=Va(function(t){return t.push(K,no),u(wf,K,t)}),mf=di(function(t,e,n){t[e]=n},Vs(Hs)),yf=di(function(t,e,n){$c.call(t,e)?t[e].push(n):t[e]=[n]},ji),$f=Va(Qn),bf=ii(function(t,e,n){lr(t,e,n)}),wf=ii(function(t,e,n,r){lr(t,e,n,r)}),xf=Va(function(t,e){return null==t?{}:(e=v(qn(e,1),oo),dr(t,Rn(Ti(t),e)))}),_f=Va(function(t,e){return null==t?{}:dr(t,v(qn(e,1),oo))}),Cf=_i(ts),Sf=_i(es),Af=ci(function(t,e,n){return e=e.toLowerCase(),t+(n?ys(e):e)}),Ef=ci(function(t,e,n){return t+(n?"-":"")+e.toLowerCase()}),kf=ci(function(t,e,n){return t+(n?" ":"")+e.toLowerCase()}),Tf=si("toLowerCase"),Of=ci(function(t,e,n){return t+(n?"_":"")+e.toLowerCase()}),Rf=ci(function(t,e,n){return t+(n?" ":"")+Nf(e)}),jf=ci(function(t,e,n){return t+(n?" ":"")+e.toUpperCase()}),Nf=si("toUpperCase"),Pf=Va(function(t,e){try{return u(t,K,e)}catch(n){return cu(n)?n:new fc(n)}}),Df=Va(function(t,e){return c(qn(e,1),function(e){e=oo(e),t[e]=Jl(t[e],t)}),t}),Mf=hi(),If=hi(!0),Lf=Va(function(t,e){return function(n){return Qn(n,t,e)}}),qf=Va(function(t,e){return function(n){return Qn(t,n,e)}}),Uf=gi(v),Ff=gi(f),Vf=gi($),Hf=$i(),Bf=$i(!0),Wf=vi(function(t,e){return t+e}),zf=xi("ceil"),Gf=vi(function(t,e){return t/e}),Xf=xi("floor"),Jf=vi(function(t,e){return t*e}),Yf=xi("round"),Kf=vi(function(t,e){return t-e});/*------------------------------------------------------------------------*/
// Add methods that return wrapped values in chain sequences.
// Add aliases.
// Add methods to `lodash.prototype`.
/*------------------------------------------------------------------------*/
// Add methods that return unwrapped values in chain sequences.
// Add aliases.
/*------------------------------------------------------------------------*/
/**
	     * The semantic version number.
	     *
	     * @static
	     * @memberOf _
	     * @type {string}
	     */
// Assign default placeholders.
// Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
// Add `LazyWrapper` methods that accept an `iteratee` value.
// Add `LazyWrapper` methods for `_.head` and `_.last`.
// Add `LazyWrapper` methods for `_.initial` and `_.tail`.
// Add `LazyWrapper` methods to `lodash.prototype`.
// Add `Array` methods to `lodash.prototype`.
// Map minified method names to their real names.
// Add methods to `LazyWrapper`.
// Add chain sequence methods to the `lodash` wrapper.
return e.after=ja,e.ary=Na,e.assign=lf,e.assignIn=ff,e.assignInWith=hf,e.assignWith=pf,e.at=df,e.before=Pa,e.bind=Jl,e.bindAll=Df,e.bindKey=Yl,e.castArray=Ga,e.chain=na,e.chunk=so,e.compact=co,e.concat=lo,e.cond=Us,e.conforms=Fs,e.constant=Vs,e.countBy=Vl,e.create=Vu,e.curry=Da,e.curryRight=Ma,e.debounce=Ia,e.defaults=vf,e.defaultsDeep=gf,e.defer=Kl,e.delay=Zl,e.difference=Cl,e.differenceBy=Sl,e.differenceWith=Al,e.drop=fo,e.dropRight=ho,e.dropRightWhile=po,e.dropWhile=vo,e.fill=go,e.filter=pa,e.flatMap=ga,e.flatMapDeep=ma,e.flatMapDepth=ya,e.flatten=$o,e.flattenDeep=bo,e.flattenDepth=wo,e.flip=La,e.flow=Mf,e.flowRight=If,e.fromPairs=xo,e.functions=Ju,e.functionsIn=Yu,e.groupBy=Hl,e.initial=So,e.intersection=El,e.intersectionBy=kl,e.intersectionWith=Tl,e.invert=mf,e.invertBy=yf,e.invokeMap=Bl,e.iteratee=Bs,e.keyBy=Wl,e.keys=ts,e.keysIn=es,e.map=xa,e.mapKeys=ns,e.mapValues=rs,e.matches=Ws,e.matchesProperty=zs,e.memoize=qa,e.merge=bf,e.mergeWith=wf,e.method=Lf,e.methodOf=qf,e.mixin=Gs,e.negate=Ua,e.nthArg=Ys,e.omit=xf,e.omitBy=is,e.once=Fa,e.orderBy=_a,e.over=Uf,e.overArgs=Ql,e.overEvery=Ff,e.overSome=Vf,e.partial=tf,e.partialRight=ef,e.partition=zl,e.pick=_f,e.pickBy=os,e.property=Ks,e.propertyOf=Zs,e.pull=Ol,e.pullAll=Oo,e.pullAllBy=Ro,e.pullAllWith=jo,e.pullAt=Rl,e.range=Hf,e.rangeRight=Bf,e.rearg=nf,e.reject=Aa,e.remove=No,e.rest=Va,e.reverse=Po,e.sampleSize=ka,e.set=us,e.setWith=ss,e.shuffle=Ta,e.slice=Do,e.sortBy=Gl,e.sortedUniq=Vo,e.sortedUniqBy=Ho,e.split=Ts,e.spread=Ha,e.tail=Bo,e.take=Wo,e.takeRight=zo,e.takeRightWhile=Go,e.takeWhile=Xo,e.tap=ra,e.throttle=Ba,e.thru=ia,e.toArray=Pu,e.toPairs=Cf,e.toPairsIn=Sf,e.toPath=tc,e.toPlainObject=qu,e.transform=cs,e.unary=Wa,e.union=jl,e.unionBy=Nl,e.unionWith=Pl,e.uniq=Jo,e.uniqBy=Yo,e.uniqWith=Ko,e.unset=ls,e.unzip=Zo,e.unzipWith=Qo,e.update=fs,e.updateWith=hs,e.values=ps,e.valuesIn=ds,e.without=Dl,e.words=qs,e.wrap=za,e.xor=Ml,e.xorBy=Il,e.xorWith=Ll,e.zip=ql,e.zipObject=ta,e.zipObjectDeep=ea,e.zipWith=Ul,e.entries=Cf,e.entriesIn=Sf,e.extend=ff,e.extendWith=hf,Gs(e,e),e.add=Wf,e.attempt=Pf,e.camelCase=Af,e.capitalize=ys,e.ceil=zf,e.clamp=vs,e.clone=Xa,e.cloneDeep=Ya,e.cloneDeepWith=Ka,e.cloneWith=Ja,e.deburr=$s,e.divide=Gf,e.endsWith=bs,e.eq=Za,e.escape=ws,e.escapeRegExp=xs,e.every=ha,e.find=da,e.findIndex=mo,e.findKey=Hu,e.findLast=va,e.findLastIndex=yo,e.findLastKey=Bu,e.floor=Xf,e.forEach=$a,e.forEachRight=ba,e.forIn=Wu,e.forInRight=zu,e.forOwn=Gu,e.forOwnRight=Xu,e.get=Ku,e.gt=rf,e.gte=of,e.has=Zu,e.hasIn=Qu,e.head=_o,e.identity=Hs,e.includes=wa,e.indexOf=Co,e.inRange=gs,e.invoke=$f,e.isArguments=Qa,e.isArray=af,e.isArrayBuffer=tu,e.isArrayLike=eu,e.isArrayLikeObject=nu,e.isBoolean=ru,e.isBuffer=uf,e.isDate=iu,e.isElement=ou,e.isEmpty=au,e.isEqual=uu,e.isEqualWith=su,e.isError=cu,e.isFinite=lu,e.isFunction=fu,e.isInteger=hu,e.isLength=pu,e.isMap=gu,e.isMatch=mu,e.isMatchWith=yu,e.isNaN=$u,e.isNative=bu,e.isNil=xu,e.isNull=wu,e.isNumber=_u,e.isObject=du,e.isObjectLike=vu,e.isPlainObject=Cu,e.isRegExp=Su,e.isSafeInteger=Au,e.isSet=Eu,e.isString=ku,e.isSymbol=Tu,e.isTypedArray=Ou,e.isUndefined=Ru,e.isWeakMap=ju,e.isWeakSet=Nu,e.join=Ao,e.kebabCase=Ef,e.last=Eo,e.lastIndexOf=ko,e.lowerCase=kf,e.lowerFirst=Tf,e.lt=sf,e.lte=cf,e.max=nc,e.maxBy=rc,e.mean=ic,e.meanBy=oc,e.min=ac,e.minBy=uc,e.multiply=Jf,e.nth=To,e.noConflict=Xs,e.noop=Js,e.now=Xl,e.pad=_s,e.padEnd=Cs,e.padStart=Ss,e.parseInt=As,e.random=ms,e.reduce=Ca,e.reduceRight=Sa,e.repeat=Es,e.replace=ks,e.result=as,e.round=Yf,e.runInContext=Y,e.sample=Ea,e.size=Oa,e.snakeCase=Of,e.some=Ra,e.sortedIndex=Mo,e.sortedIndexBy=Io,e.sortedIndexOf=Lo,e.sortedLastIndex=qo,e.sortedLastIndexBy=Uo,e.sortedLastIndexOf=Fo,e.startCase=Rf,e.startsWith=Os,e.subtract=Kf,e.sum=sc,e.sumBy=cc,e.template=Rs,e.times=Qs,e.toFinite=Du,e.toInteger=Mu,e.toLength=Iu,e.toLower=js,e.toNumber=Lu,e.toSafeInteger=Uu,e.toString=Fu,e.toUpper=Ns,e.trim=Ps,e.trimEnd=Ds,e.trimStart=Ms,e.truncate=Is,e.unescape=Ls,e.uniqueId=ec,e.upperCase=jf,e.upperFirst=Nf,e.each=$a,e.eachRight=ba,e.first=_o,Gs(e,function(){var t={};return Un(e,function(n,r){$c.call(e.prototype,r)||(t[r]=n)}),t}(),{chain:!1}),e.VERSION=Z,c(["bind","bindKey","curry","curryRight","partial","partialRight"],function(t){e[t].placeholder=e}),c(["drop","take"],function(t,e){i.prototype[t]=function(n){var r=this.__filtered__;if(r&&!e)return new i(this);n=n===K?1:Hc(Mu(n),0);var o=this.clone();return r?o.__takeCount__=Bc(n,o.__takeCount__):o.__views__.push({size:Bc(n,At),type:t+(o.__dir__<0?"Right":"")}),o},i.prototype[t+"Right"]=function(e){return this.reverse()[t](e).reverse()}}),c(["filter","map","takeWhile"],function(t,e){var n=e+1,r=n==$t||n==wt;i.prototype[t]=function(t){var e=this.clone();return e.__iteratees__.push({iteratee:ji(t,3),type:n}),e.__filtered__=e.__filtered__||r,e}}),c(["head","last"],function(t,e){var n="take"+(e?"Right":"");i.prototype[t]=function(){return this[n](1).value()[0]}}),c(["initial","tail"],function(t,e){var n="drop"+(e?"":"Right");i.prototype[t]=function(){return this.__filtered__?new i(this):this[n](1)}}),i.prototype.compact=function(){return this.filter(Hs)},i.prototype.find=function(t){return this.filter(t).head()},i.prototype.findLast=function(t){return this.reverse().find(t)},i.prototype.invokeMap=Va(function(t,e){return"function"==typeof t?new i(this):this.map(function(n){return Qn(n,t,e)})}),i.prototype.reject=function(t){return t=ji(t,3),this.filter(function(e){return!t(e)})},i.prototype.slice=function(t,e){t=Mu(t);var n=this;return n.__filtered__&&(t>0||e<0)?new i(n):(t<0?n=n.takeRight(-t):t&&(n=n.drop(t)),e!==K&&(e=Mu(e),n=e<0?n.dropRight(-e):n.take(e-t)),n)},i.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},i.prototype.toArray=function(){return this.take(At)},Un(i.prototype,function(t,n){var o=/^(?:filter|find|map|reject)|While$/.test(n),a=/^(?:head|last)$/.test(n),u=e[a?"take"+("last"==n?"Right":""):n],s=a||/^find/.test(n);u&&(e.prototype[n]=function(){var n=this.__wrapped__,c=a?[1]:arguments,l=n instanceof i,f=c[0],h=l||af(n),p=function(t){var n=u.apply(e,g([t],c));return a&&d?n[0]:n};h&&o&&"function"==typeof f&&1!=f.length&&(
// Avoid lazy use if the iteratee has a "length" value other than `1`.
l=h=!1);var d=this.__chain__,v=!!this.__actions__.length,m=s&&!d,y=l&&!v;if(!s&&h){n=y?n:new i(this);var $=t.apply(n,c);return $.__actions__.push({func:ia,args:[p],thisArg:K}),new r($,d)}return m&&y?t.apply(this,c):($=this.thru(p),m?a?$.value()[0]:$.value():$)})}),c(["pop","push","shift","sort","splice","unshift"],function(t){var n=vc[t],r=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",i=/^(?:pop|shift)$/.test(t);e.prototype[t]=function(){var t=arguments;if(i&&!this.__chain__){var e=this.value();return n.apply(af(e)?e:[],t)}return this[r](function(e){return n.apply(af(e)?e:[],t)})}}),Un(i.prototype,function(t,n){var r=e[n];if(r){var i=r.name+"",o=il[i]||(il[i]=[]);o.push({name:n,func:r})}}),il[pi(K,it).name]=[{name:"wrapper",func:K}],i.prototype.clone=D,i.prototype.reverse=Pe,i.prototype.value=De,e.prototype.at=Fl,e.prototype.chain=oa,e.prototype.commit=aa,e.prototype.next=ua,e.prototype.plant=ca,e.prototype.reverse=la,e.prototype.toJSON=e.prototype.valueOf=e.prototype.value=fa,jc&&(e.prototype[jc]=sa),e}/** Used as a safe reference for `undefined` in pre-ES5 environments. */
var K,Z="4.12.0",Q=200,tt="Expected a function",et="__lodash_hash_undefined__",nt="__lodash_placeholder__",rt=1,it=2,ot=4,at=8,ut=16,st=32,ct=64,lt=128,ft=256,ht=512,pt=1,dt=2,vt=30,gt="...",mt=150,yt=16,$t=1,bt=2,wt=3,xt=1/0,_t=9007199254740991,Ct=1.7976931348623157e308,St=NaN,At=4294967295,Et=At-1,kt=At>>>1,Tt="[object Arguments]",Ot="[object Array]",Rt="[object Boolean]",jt="[object Date]",Nt="[object Error]",Pt="[object Function]",Dt="[object GeneratorFunction]",Mt="[object Map]",It="[object Number]",Lt="[object Object]",qt="[object Promise]",Ut="[object RegExp]",Ft="[object Set]",Vt="[object String]",Ht="[object Symbol]",Bt="[object WeakMap]",Wt="[object WeakSet]",zt="[object ArrayBuffer]",Gt="[object DataView]",Xt="[object Float32Array]",Jt="[object Float64Array]",Yt="[object Int8Array]",Kt="[object Int16Array]",Zt="[object Int32Array]",Qt="[object Uint8Array]",te="[object Uint8ClampedArray]",ee="[object Uint16Array]",ne="[object Uint32Array]",re=/\b__p \+= '';/g,ie=/\b(__p \+=) '' \+/g,oe=/(__e\(.*?\)|\b__t\)) \+\n'';/g,ae=/&(?:amp|lt|gt|quot|#39|#96);/g,ue=/[&<>"'`]/g,se=RegExp(ae.source),ce=RegExp(ue.source),le=/<%-([\s\S]+?)%>/g,fe=/<%([\s\S]+?)%>/g,he=/<%=([\s\S]+?)%>/g,pe=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,de=/^\w*$/,ve=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]/g,ge=/[\\^$.*+?()[\]{}|]/g,me=RegExp(ge.source),ye=/^\s+|\s+$/g,$e=/^\s+/,be=/\s+$/,we=/[a-zA-Z0-9]+/g,xe=/\\(\\)?/g,_e=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,Ce=/\w*$/,Se=/^0x/i,Ae=/^[-+]0x[0-9a-f]+$/i,Ee=/^0b[01]+$/i,ke=/^\[object .+?Constructor\]$/,Te=/^0o[0-7]+$/i,Oe=/^(?:0|[1-9]\d*)$/,Re=/[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g,je=/($^)/,Ne=/['\n\r\u2028\u2029\\]/g,Pe="\\ud800-\\udfff",De="\\u0300-\\u036f\\ufe20-\\ufe23",Me="\\u20d0-\\u20f0",Ie="\\u2700-\\u27bf",Le="a-z\\xdf-\\xf6\\xf8-\\xff",qe="\\xac\\xb1\\xd7\\xf7",Ue="\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf",Fe="\\u2000-\\u206f",Ve=" \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",He="A-Z\\xc0-\\xd6\\xd8-\\xde",Be="\\ufe0e\\ufe0f",We=qe+Ue+Fe+Ve,ze="['’]",Ge="["+Pe+"]",Xe="["+We+"]",Je="["+De+Me+"]",Ye="\\d+",Ke="["+Ie+"]",Ze="["+Le+"]",Qe="[^"+Pe+We+Ye+Ie+Le+He+"]",tn="\\ud83c[\\udffb-\\udfff]",en="(?:"+Je+"|"+tn+")",nn="[^"+Pe+"]",rn="(?:\\ud83c[\\udde6-\\uddff]){2}",on="[\\ud800-\\udbff][\\udc00-\\udfff]",an="["+He+"]",un="\\u200d",sn="(?:"+Ze+"|"+Qe+")",cn="(?:"+an+"|"+Qe+")",ln="(?:"+ze+"(?:d|ll|m|re|s|t|ve))?",fn="(?:"+ze+"(?:D|LL|M|RE|S|T|VE))?",hn=en+"?",pn="["+Be+"]?",dn="(?:"+un+"(?:"+[nn,rn,on].join("|")+")"+pn+hn+")*",vn=pn+hn+dn,gn="(?:"+[Ke,rn,on].join("|")+")"+vn,mn="(?:"+[nn+Je+"?",Je,rn,on,Ge].join("|")+")",yn=RegExp(ze,"g"),$n=RegExp(Je,"g"),bn=RegExp(tn+"(?="+tn+")|"+mn+vn,"g"),wn=RegExp([an+"?"+Ze+"+"+ln+"(?="+[Xe,an,"$"].join("|")+")",cn+"+"+fn+"(?="+[Xe,an+sn,"$"].join("|")+")",an+"?"+sn+"+"+ln,an+"+"+fn,Ye,gn].join("|"),"g"),xn=RegExp("["+un+Pe+De+Me+Be+"]"),_n=/[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,Cn=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","Reflect","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Sn=-1,An={};An[Xt]=An[Jt]=An[Yt]=An[Kt]=An[Zt]=An[Qt]=An[te]=An[ee]=An[ne]=!0,An[Tt]=An[Ot]=An[zt]=An[Rt]=An[Gt]=An[jt]=An[Nt]=An[Pt]=An[Mt]=An[It]=An[Lt]=An[Ut]=An[Ft]=An[Vt]=An[Bt]=!1;/** Used to identify `toStringTag` values supported by `_.clone`. */
var En={};En[Tt]=En[Ot]=En[zt]=En[Gt]=En[Rt]=En[jt]=En[Xt]=En[Jt]=En[Yt]=En[Kt]=En[Zt]=En[Mt]=En[It]=En[Lt]=En[Ut]=En[Ft]=En[Vt]=En[Ht]=En[Qt]=En[te]=En[ee]=En[ne]=!0,En[Nt]=En[Pt]=En[Bt]=!1;/** Used to map latin-1 supplementary letters to basic latin letters. */
var kn={"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss"},Tn={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","`":"&#96;"},On={"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'","&#96;":"`"},Rn={"function":!0,object:!0},jn={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},Nn=parseFloat,Pn=parseInt,Dn=Rn[typeof e]&&e&&!e.nodeType?e:K,Mn=Rn[typeof t]&&t&&!t.nodeType?t:K,In=Mn&&Mn.exports===Dn?Dn:K,Ln=D(Dn&&Mn&&"object"==typeof i&&i),qn=D(Rn[typeof self]&&self),Un=D(Rn[typeof window]&&window),Fn=D(Rn[typeof this]&&this),Vn=Ln||Un!==(Fn&&Fn.window)&&Un||qn||Fn||Function("return this")(),Hn=Y();
// Expose Lodash on the free variable `window` or `self` when available so it's
// globally accessible, even when bundled with Browserify, Webpack, etc. This
// also prevents errors in cases where Lodash is loaded by a script tag in the
// presence of an AMD loader. See http://requirejs.org/docs/errors.html#mismatch
// for more details. Use `_.noConflict` to remove Lodash from the global object.
(Un||qn||{})._=Hn,r=function(){return Hn}.call(e,n,e,t),
// Define as an anonymous module so, through path mapping, it can be
// referenced as the "underscore" module.
!(r!==K&&(t.exports=r))}).call(this)}).call(e,n(3)(t),function(){return this}())},/* 3 */
/***/
function(t,e){t.exports=function(t){
// module.parent = undefined by default
return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children=[],t.webpackPolyfill=1),t}},/* 4 */
/***/
function(t,e,n){n(5),t.exports=angular},/* 5 */
/***/
function(t,e,n){/* WEBPACK VAR INJECTION */
(function(t){/**
	 * @license AngularJS v1.5.5
	 * (c) 2010-2016 Google, Inc. http://angularjs.org
	 * License: MIT
	 */
!function(e){"use strict";/**
	 * @description
	 *
	 * This object provides a utility for producing rich Error messages within
	 * Angular. It can be called as follows:
	 *
	 * var exampleMinErr = minErr('example');
	 * throw exampleMinErr('one', 'This {0} is {1}', foo, bar);
	 *
	 * The above creates an instance of minErr in the example namespace. The
	 * resulting error will have a namespaced error code of example.one.  The
	 * resulting error will replace {0} with the value of foo, and {1} with the
	 * value of bar. The object is not restricted in the number of arguments it can
	 * take.
	 *
	 * If fewer arguments are specified than necessary for interpolation, the extra
	 * interpolation markers will be preserved in the final string.
	 *
	 * Since data will be parsed statically during a build step, some restrictions
	 * are applied with respect to how minErr instances are created and called.
	 * Instances should have names of the form namespaceMinErr for a minErr created
	 * using minErr('namespace') . Error codes, namespaces and template strings
	 * should all be static strings, not variables or general expressions.
	 *
	 * @param {string} module The namespace to use for the new minErr instance.
	 * @param {function} ErrorConstructor Custom error constructor to be instantiated when returning
	 *   error from returned function, for cases when a particular type of error is useful.
	 * @returns {function(code:string, template:string, ...templateArgs): Error} minErr instance
	 */
function n(t,e){return e=e||Error,function(){var n,r,i=2,o=arguments,a=o[0],u="["+(t?t+":":"")+a+"] ",s=o[1];for(u+=s.replace(/\{\d+\}/g,function(t){var e=+t.slice(1,-1),n=e+i;return n<o.length?$t(o[n]):t}),u+="\nhttp://errors.angularjs.org/1.5.5/"+(t?t+"/":"")+a,r=i,n="?";r<o.length;r++,n="&")u+=n+"p"+(r-i)+"="+encodeURIComponent($t(o[r]));return new e(u)}}/**
	 * @private
	 * @param {*} obj
	 * @return {boolean} Returns true if `obj` is an array or array-like object (NodeList, Arguments,
	 *                   String ...)
	 */
function r(t){
// `null`, `undefined` and `window` are not array-like
if(null==t||E(t))return!1;
// arrays, strings and jQuery/jqLite objects are array like
// * jqLite is either the jQuery or jqLite constructor function
// * we have to check the existence of jqLite first as this method is called
//   via the forEach method when constructing the jqLite object in the first place
if(Gr(t)||x(t)||Mr&&t instanceof Mr)return!0;
// Support: iOS 8.2 (not reproducible in simulator)
// "length" in obj used to prevent JIT error (gh-11508)
var e="length"in Object(t)&&t.length;
// NodeList objects (with `item` method) and
// other objects with suitable length characteristics are array-like
return _(e)&&(e>=0&&(e-1 in t||t instanceof Array)||"function"==typeof t.item)}/**
	 * @ngdoc function
	 * @name angular.forEach
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Invokes the `iterator` function once for each item in `obj` collection, which can be either an
	 * object or an array. The `iterator` function is invoked with `iterator(value, key, obj)`, where `value`
	 * is the value of an object property or an array element, `key` is the object property key or
	 * array element index and obj is the `obj` itself. Specifying a `context` for the function is optional.
	 *
	 * It is worth noting that `.forEach` does not iterate over inherited properties because it filters
	 * using the `hasOwnProperty` method.
	 *
	 * Unlike ES262's
	 * [Array.prototype.forEach](http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.18),
	 * providing 'undefined' or 'null' values for `obj` will not throw a TypeError, but rather just
	 * return the value provided.
	 *
	   ```js
	     var values = {name: 'misko', gender: 'male'};
	     var log = [];
	     angular.forEach(values, function(value, key) {
	       this.push(key + ': ' + value);
	     }, log);
	     expect(log).toEqual(['name: misko', 'gender: male']);
	   ```
	 *
	 * @param {Object|Array} obj Object to iterate over.
	 * @param {Function} iterator Iterator function.
	 * @param {Object=} context Object to become context (`this`) for the iterator function.
	 * @returns {Object|Array} Reference to `obj`.
	 */
function i(t,e,n){var o,a;if(t)if(S(t))for(o in t)
// Need to check if hasOwnProperty exists,
// as on IE8 the result of querySelectorAll is an object without a hasOwnProperty function
"prototype"==o||"length"==o||"name"==o||t.hasOwnProperty&&!t.hasOwnProperty(o)||e.call(n,t[o],o,t);else if(Gr(t)||r(t)){var u="object"!=typeof t;for(o=0,a=t.length;o<a;o++)(u||o in t)&&e.call(n,t[o],o,t)}else if(t.forEach&&t.forEach!==i)t.forEach(e,n,t);else if(w(t))
// createMap() fast path --- Safe to avoid hasOwnProperty check because prototype chain is empty
for(o in t)e.call(n,t[o],o,t);else if("function"==typeof t.hasOwnProperty)
// Slow path for objects inheriting Object.prototype, hasOwnProperty check needed
for(o in t)t.hasOwnProperty(o)&&e.call(n,t[o],o,t);else
// Slow path for objects which do not have a method `hasOwnProperty`
for(o in t)Or.call(t,o)&&e.call(n,t[o],o,t);return t}function o(t,e,n){for(var r=Object.keys(t).sort(),i=0;i<r.length;i++)e.call(n,t[r[i]],r[i]);return r}/**
	 * when using forEach the params are value, key, but it is often useful to have key, value.
	 * @param {function(string, *)} iteratorFn
	 * @returns {function(*, string)}
	 */
function a(t){return function(e,n){t(n,e)}}/**
	 * A consistent way of creating unique IDs in angular.
	 *
	 * Using simple numbers allows us to generate 28.6 million unique ids per second for 10 years before
	 * we hit number precision issues in JavaScript.
	 *
	 * Math.pow(2,53) / 60 / 60 / 24 / 365 / 10 = 28.6M
	 *
	 * @returns {number} an unique alpha-numeric string
	 */
function u(){return++zr}/**
	 * Set or clear the hashkey for an object.
	 * @param obj object
	 * @param h the hashkey (!truthy to delete the hashkey)
	 */
function s(t,e){e?t.$$hashKey=e:delete t.$$hashKey}function c(t,e,n){for(var r=t.$$hashKey,i=0,o=e.length;i<o;++i){var a=e[i];if(b(a)||S(a))for(var u=Object.keys(a),l=0,f=u.length;l<f;l++){var h=u[l],p=a[h];n&&b(p)?C(p)?t[h]=new Date(p.valueOf()):A(p)?t[h]=new RegExp(p):p.nodeName?t[h]=p.cloneNode(!0):M(p)?t[h]=p.clone():(b(t[h])||(t[h]=Gr(p)?[]:{}),c(t[h],[p],!0)):t[h]=p}}return s(t,r),t}/**
	 * @ngdoc function
	 * @name angular.extend
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Extends the destination object `dst` by copying own enumerable properties from the `src` object(s)
	 * to `dst`. You can specify multiple `src` objects. If you want to preserve original objects, you can do so
	 * by passing an empty object as the target: `var object = angular.extend({}, object1, object2)`.
	 *
	 * **Note:** Keep in mind that `angular.extend` does not support recursive merge (deep copy). Use
	 * {@link angular.merge} for this.
	 *
	 * @param {Object} dst Destination object.
	 * @param {...Object} src Source object(s).
	 * @returns {Object} Reference to `dst`.
	 */
function l(t){return c(t,qr.call(arguments,1),!1)}/**
	* @ngdoc function
	* @name angular.merge
	* @module ng
	* @kind function
	*
	* @description
	* Deeply extends the destination object `dst` by copying own enumerable properties from the `src` object(s)
	* to `dst`. You can specify multiple `src` objects. If you want to preserve original objects, you can do so
	* by passing an empty object as the target: `var object = angular.merge({}, object1, object2)`.
	*
	* Unlike {@link angular.extend extend()}, `merge()` recursively descends into object properties of source
	* objects, performing a deep copy.
	*
	* @param {Object} dst Destination object.
	* @param {...Object} src Source object(s).
	* @returns {Object} Reference to `dst`.
	*/
function f(t){return c(t,qr.call(arguments,1),!0)}function h(t){return parseInt(t,10)}function p(t,e){return l(Object.create(t),e)}/**
	 * @ngdoc function
	 * @name angular.noop
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * A function that performs no operations. This function can be useful when writing code in the
	 * functional style.
	   ```js
	     function foo(callback) {
	       var result = calculateResult();
	       (callback || angular.noop)(result);
	     }
	   ```
	 */
function d(){}/**
	 * @ngdoc function
	 * @name angular.identity
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * A function that returns its first argument. This function is useful when writing code in the
	 * functional style.
	 *
	   ```js
	     function transformer(transformationFn, value) {
	       return (transformationFn || angular.identity)(value);
	     };
	   ```
	  * @param {*} value to be returned.
	  * @returns {*} the value passed in.
	 */
function v(t){return t}function g(t){return function(){return t}}function m(t){return S(t.toString)&&t.toString!==Vr}/**
	 * @ngdoc function
	 * @name angular.isUndefined
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is undefined.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is undefined.
	 */
function y(t){return"undefined"==typeof t}/**
	 * @ngdoc function
	 * @name angular.isDefined
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is defined.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is defined.
	 */
function $(t){return"undefined"!=typeof t}/**
	 * @ngdoc function
	 * @name angular.isObject
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is an `Object`. Unlike `typeof` in JavaScript, `null`s are not
	 * considered to be objects. Note that JavaScript arrays are objects.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is an `Object` but not `null`.
	 */
function b(t){
// http://jsperf.com/isobject4
return null!==t&&"object"==typeof t}/**
	 * Determine if a value is an object with a null prototype
	 *
	 * @returns {boolean} True if `value` is an `Object` with a null prototype
	 */
function w(t){return null!==t&&"object"==typeof t&&!Hr(t)}/**
	 * @ngdoc function
	 * @name angular.isString
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is a `String`.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a `String`.
	 */
function x(t){return"string"==typeof t}/**
	 * @ngdoc function
	 * @name angular.isNumber
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is a `Number`.
	 *
	 * This includes the "special" numbers `NaN`, `+Infinity` and `-Infinity`.
	 *
	 * If you wish to exclude these then you can use the native
	 * [`isFinite'](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite)
	 * method.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a `Number`.
	 */
function _(t){return"number"==typeof t}/**
	 * @ngdoc function
	 * @name angular.isDate
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a value is a date.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a `Date`.
	 */
function C(t){return"[object Date]"===Vr.call(t)}/**
	 * @ngdoc function
	 * @name angular.isFunction
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is a `Function`.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a `Function`.
	 */
function S(t){return"function"==typeof t}/**
	 * Determines if a value is a regular expression object.
	 *
	 * @private
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a `RegExp`.
	 */
function A(t){return"[object RegExp]"===Vr.call(t)}/**
	 * Checks if `obj` is a window object.
	 *
	 * @private
	 * @param {*} obj Object to check
	 * @returns {boolean} True if `obj` is a window obj.
	 */
function E(t){return t&&t.window===t}function k(t){return t&&t.$evalAsync&&t.$watch}function T(t){return"[object File]"===Vr.call(t)}function O(t){return"[object FormData]"===Vr.call(t)}function R(t){return"[object Blob]"===Vr.call(t)}function j(t){return"boolean"==typeof t}function N(t){return t&&S(t.then)}function P(t){return t&&_(t.length)&&Xr.test(Vr.call(t))}function D(t){return"[object ArrayBuffer]"===Vr.call(t)}/**
	 * @ngdoc function
	 * @name angular.isElement
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is a DOM element (or wrapped jQuery element).
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a DOM element (or wrapped jQuery element).
	 */
function M(t){return!(!t||!(t.nodeName||t.prop&&t.attr&&t.find))}/**
	 * @param str 'key1,key2,...'
	 * @returns {object} in the form of {key1:true, key2:true, ...}
	 */
function I(t){var e,n={},r=t.split(",");for(e=0;e<r.length;e++)n[r[e]]=!0;return n}function L(t){return Rr(t.nodeName||t[0]&&t[0].nodeName)}function q(t,e){var n=t.indexOf(e);return n>=0&&t.splice(n,1),n}/**
	 * @ngdoc function
	 * @name angular.copy
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Creates a deep copy of `source`, which should be an object or an array.
	 *
	 * * If no destination is supplied, a copy of the object or array is created.
	 * * If a destination is provided, all of its elements (for arrays) or properties (for objects)
	 *   are deleted and then all elements/properties from the source are copied to it.
	 * * If `source` is not an object or array (inc. `null` and `undefined`), `source` is returned.
	 * * If `source` is identical to 'destination' an exception will be thrown.
	 *
	 * @param {*} source The source that will be used to make a copy.
	 *                   Can be any type, including primitives, `null`, and `undefined`.
	 * @param {(Object|Array)=} destination Destination into which the source is copied. If
	 *     provided, must be of the same type as `source`.
	 * @returns {*} The copy or updated `destination`, if `destination` was specified.
	 *
	 * @example
	 <example module="copyExample">
	 <file name="index.html">
	 <div ng-controller="ExampleController">
	 <form novalidate class="simple-form">
	 Name: <input type="text" ng-model="user.name" /><br />
	 E-mail: <input type="email" ng-model="user.email" /><br />
	 Gender: <input type="radio" ng-model="user.gender" value="male" />male
	 <input type="radio" ng-model="user.gender" value="female" />female<br />
	 <button ng-click="reset()">RESET</button>
	 <button ng-click="update(user)">SAVE</button>
	 </form>
	 <pre>form = {{user | json}}</pre>
	 <pre>master = {{master | json}}</pre>
	 </div>
	
	 <script>
	  angular.module('copyExample', [])
	    .controller('ExampleController', ['$scope', function($scope) {
	      $scope.master= {};
	
	      $scope.update = function(user) {
	        // Example with 1 argument
	        $scope.master= angular.copy(user);
	      };
	
	      $scope.reset = function() {
	        // Example with 2 arguments
	        angular.copy($scope.master, $scope.user);
	      };
	
	      $scope.reset();
	    }]);
	 </script>
	 </file>
	 </example>
	 */
function U(t,e){function n(t,e){var n,i=e.$$hashKey;if(Gr(t))for(var o=0,a=t.length;o<a;o++)e.push(r(t[o]));else if(w(t))
// createMap() fast path --- Safe to avoid hasOwnProperty check because prototype chain is empty
for(n in t)e[n]=r(t[n]);else if(t&&"function"==typeof t.hasOwnProperty)
// Slow path, which must rely on hasOwnProperty
for(n in t)t.hasOwnProperty(n)&&(e[n]=r(t[n]));else
// Slowest path --- hasOwnProperty can't be called as a method
for(n in t)Or.call(t,n)&&(e[n]=r(t[n]));return s(e,i),e}function r(t){
// Simple values
if(!b(t))return t;
// Already copied values
var e=a.indexOf(t);if(e!==-1)return u[e];if(E(t)||k(t))throw Br("cpws","Can't copy! Making copies of Window or Scope instances is not supported.");var r=!1,i=o(t);return void 0===i&&(i=Gr(t)?[]:Object.create(Hr(t)),r=!0),a.push(t),u.push(i),r?n(t,i):i}function o(t){switch(Vr.call(t)){case"[object Int8Array]":case"[object Int16Array]":case"[object Int32Array]":case"[object Float32Array]":case"[object Float64Array]":case"[object Uint8Array]":case"[object Uint8ClampedArray]":case"[object Uint16Array]":case"[object Uint32Array]":return new t.constructor(r(t.buffer));case"[object ArrayBuffer]":
//Support: IE10
if(!t.slice){var e=new ArrayBuffer(t.byteLength);return new Uint8Array(e).set(new Uint8Array(t)),e}return t.slice(0);case"[object Boolean]":case"[object Number]":case"[object String]":case"[object Date]":return new t.constructor(t.valueOf());case"[object RegExp]":var n=new RegExp(t.source,t.toString().match(/[^\/]*$/)[0]);return n.lastIndex=t.lastIndex,n;case"[object Blob]":return new t.constructor([t],{type:t.type})}if(S(t.cloneNode))return t.cloneNode(!0)}var a=[],u=[];if(e){if(P(e)||D(e))throw Br("cpta","Can't copy! TypedArray destination cannot be mutated.");if(t===e)throw Br("cpi","Can't copy! Source and destination are identical.");
// Empty the destination object
return Gr(e)?e.length=0:i(e,function(t,n){"$$hashKey"!==n&&delete e[n]}),a.push(t),u.push(e),n(t,e)}return r(t)}/**
	 * Creates a shallow copy of an object, an array or a primitive.
	 *
	 * Assumes that there are no proto properties for objects.
	 */
function F(t,e){if(Gr(t)){e=e||[];for(var n=0,r=t.length;n<r;n++)e[n]=t[n]}else if(b(t)){e=e||{};for(var i in t)"$"===i.charAt(0)&&"$"===i.charAt(1)||(e[i]=t[i])}return e||t}/**
	 * @ngdoc function
	 * @name angular.equals
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if two objects or two values are equivalent. Supports value types, regular
	 * expressions, arrays and objects.
	 *
	 * Two objects or values are considered equivalent if at least one of the following is true:
	 *
	 * * Both objects or values pass `===` comparison.
	 * * Both objects or values are of the same type and all of their properties are equal by
	 *   comparing them with `angular.equals`.
	 * * Both values are NaN. (In JavaScript, NaN == NaN => false. But we consider two NaN as equal)
	 * * Both values represent the same regular expression (In JavaScript,
	 *   /abc/ == /abc/ => false. But we consider two regular expressions as equal when their textual
	 *   representation matches).
	 *
	 * During a property comparison, properties of `function` type and properties with names
	 * that begin with `$` are ignored.
	 *
	 * Scope and DOMWindow objects are being compared only by identify (`===`).
	 *
	 * @param {*} o1 Object or value to compare.
	 * @param {*} o2 Object or value to compare.
	 * @returns {boolean} True if arguments are equal.
	 *
	 * @example
	   <example module="equalsExample" name="equalsExample">
	     <file name="index.html">
	      <div ng-controller="ExampleController">
	        <form novalidate>
	          <h3>User 1</h3>
	          Name: <input type="text" ng-model="user1.name">
	          Age: <input type="number" ng-model="user1.age">
	
	          <h3>User 2</h3>
	          Name: <input type="text" ng-model="user2.name">
	          Age: <input type="number" ng-model="user2.age">
	
	          <div>
	            <br/>
	            <input type="button" value="Compare" ng-click="compare()">
	          </div>
	          User 1: <pre>{{user1 | json}}</pre>
	          User 2: <pre>{{user2 | json}}</pre>
	          Equal: <pre>{{result}}</pre>
	        </form>
	      </div>
	    </file>
	    <file name="script.js">
	        angular.module('equalsExample', []).controller('ExampleController', ['$scope', function($scope) {
	          $scope.user1 = {};
	          $scope.user2 = {};
	          $scope.result;
	          $scope.compare = function() {
	            $scope.result = angular.equals($scope.user1, $scope.user2);
	          };
	        }]);
	    </file>
	  </example>
	 */
function V(t,e){if(t===e)return!0;if(null===t||null===e)return!1;if(t!==t&&e!==e)return!0;// NaN === NaN
var n,r,i,o=typeof t,a=typeof e;if(o==a&&"object"==o){if(!Gr(t)){if(C(t))return!!C(e)&&V(t.getTime(),e.getTime());if(A(t))return!!A(e)&&t.toString()==e.toString();if(k(t)||k(e)||E(t)||E(e)||Gr(e)||C(e)||A(e))return!1;i=gt();for(r in t)if("$"!==r.charAt(0)&&!S(t[r])){if(!V(t[r],e[r]))return!1;i[r]=!0}for(r in e)if(!(r in i)&&"$"!==r.charAt(0)&&$(e[r])&&!S(e[r]))return!1;return!0}if(!Gr(e))return!1;if((n=t.length)==e.length){for(r=0;r<n;r++)if(!V(t[r],e[r]))return!1;return!0}}return!1}function H(t,e,n){return t.concat(qr.call(e,n))}function B(t,e){return qr.call(t,e||0)}/* jshint -W101 */
/**
	 * @ngdoc function
	 * @name angular.bind
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Returns a function which calls function `fn` bound to `self` (`self` becomes the `this` for
	 * `fn`). You can supply optional `args` that are prebound to the function. This feature is also
	 * known as [partial application](http://en.wikipedia.org/wiki/Partial_application), as
	 * distinguished from [function currying](http://en.wikipedia.org/wiki/Currying#Contrast_with_partial_function_application).
	 *
	 * @param {Object} self Context which `fn` should be evaluated in.
	 * @param {function()} fn Function to be bound.
	 * @param {...*} args Optional arguments to be prebound to the `fn` function call.
	 * @returns {function()} Function that wraps the `fn` with all the specified bindings.
	 */
/* jshint +W101 */
function W(t,e){var n=arguments.length>2?B(arguments,2):[];return!S(e)||e instanceof RegExp?e:n.length?function(){return arguments.length?e.apply(t,H(n,arguments,0)):e.apply(t,n)}:function(){return arguments.length?e.apply(t,arguments):e.call(t)}}function z(t,n){var r=n;return"string"==typeof t&&"$"===t.charAt(0)&&"$"===t.charAt(1)?r=void 0:E(n)?r="$WINDOW":n&&e.document===n?r="$DOCUMENT":k(n)&&(r="$SCOPE"),r}/**
	 * @ngdoc function
	 * @name angular.toJson
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Serializes input into a JSON-formatted string. Properties with leading $$ characters will be
	 * stripped since angular uses this notation internally.
	 *
	 * @param {Object|Array|Date|string|number} obj Input to be serialized into JSON.
	 * @param {boolean|number} [pretty=2] If set to true, the JSON output will contain newlines and whitespace.
	 *    If set to an integer, the JSON output will contain that many spaces per indentation.
	 * @returns {string|undefined} JSON-ified string representing `obj`.
	 */
function G(t,e){if(!y(t))return _(e)||(e=e?2:null),JSON.stringify(t,z,e)}/**
	 * @ngdoc function
	 * @name angular.fromJson
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Deserializes a JSON string.
	 *
	 * @param {string} json JSON string to deserialize.
	 * @returns {Object|Array|string|number} Deserialized JSON string.
	 */
function X(t){return x(t)?JSON.parse(t):t}function J(t,e){
// IE/Edge do not "understand" colon (`:`) in timezone
t=t.replace(Qr,"");var n=Date.parse("Jan 01, 1970 00:00:00 "+t)/6e4;return isNaN(n)?e:n}function Y(t,e){return t=new Date(t.getTime()),t.setMinutes(t.getMinutes()+e),t}function K(t,e,n){n=n?-1:1;var r=t.getTimezoneOffset(),i=J(e,r);return Y(t,n*(i-r))}/**
	 * @returns {string} Returns the string representation of the element.
	 */
function Z(t){t=Mr(t).clone();try{
// turns out IE does not let you set .html() on elements which
// are not allowed to have children. So we just ignore it.
t.empty()}catch(e){}var n=Mr("<div>").append(t).html();try{return t[0].nodeType===oi?Rr(n):n.match(/^(<[^>]+>)/)[1].replace(/^<([\w\-]+)/,function(t,e){return"<"+Rr(e)})}catch(e){return Rr(n)}}
/////////////////////////////////////////////////
/**
	 * Tries to decode the URI component without throwing an exception.
	 *
	 * @private
	 * @param str value potential URI component to check.
	 * @returns {boolean} True if `value` can be decoded
	 * with the decodeURIComponent function.
	 */
function Q(t){try{return decodeURIComponent(t)}catch(e){}}/**
	 * Parses an escaped url query string into key-value pairs.
	 * @returns {Object.<string,boolean|Array>}
	 */
function tt(/**string*/t){var e={};return i((t||"").split("&"),function(t){var n,r,i;t&&(r=t=t.replace(/\+/g,"%20"),n=t.indexOf("="),n!==-1&&(r=t.substring(0,n),i=t.substring(n+1)),r=Q(r),$(r)&&(i=!$(i)||Q(i),Or.call(e,r)?Gr(e[r])?e[r].push(i):e[r]=[e[r],i]:e[r]=i))}),e}function et(t){var e=[];return i(t,function(t,n){Gr(t)?i(t,function(t){e.push(rt(n,!0)+(t===!0?"":"="+rt(t,!0)))}):e.push(rt(n,!0)+(t===!0?"":"="+rt(t,!0)))}),e.length?e.join("&"):""}/**
	 * We need our custom method because encodeURIComponent is too aggressive and doesn't follow
	 * http://www.ietf.org/rfc/rfc3986.txt with regards to the character set (pchar) allowed in path
	 * segments:
	 *    segment       = *pchar
	 *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
	 *    pct-encoded   = "%" HEXDIG HEXDIG
	 *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
	 *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
	 *                     / "*" / "+" / "," / ";" / "="
	 */
function nt(t){return rt(t,!0).replace(/%26/gi,"&").replace(/%3D/gi,"=").replace(/%2B/gi,"+")}/**
	 * This method is intended for encoding *key* or *value* parts of query component. We need a custom
	 * method because encodeURIComponent is too aggressive and encodes stuff that doesn't have to be
	 * encoded per http://tools.ietf.org/html/rfc3986:
	 *    query       = *( pchar / "/" / "?" )
	 *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
	 *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
	 *    pct-encoded   = "%" HEXDIG HEXDIG
	 *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
	 *                     / "*" / "+" / "," / ";" / "="
	 */
function rt(t,e){return encodeURIComponent(t).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%3B/gi,";").replace(/%20/g,e?"%20":"+")}function it(t,e){var n,r,i=ti.length;for(r=0;r<i;++r)if(n=ti[r]+e,x(n=t.getAttribute(n)))return n;return null}/**
	 * @ngdoc directive
	 * @name ngApp
	 * @module ng
	 *
	 * @element ANY
	 * @param {angular.Module} ngApp an optional application
	 *   {@link angular.module module} name to load.
	 * @param {boolean=} ngStrictDi if this attribute is present on the app element, the injector will be
	 *   created in "strict-di" mode. This means that the application will fail to invoke functions which
	 *   do not use explicit function annotation (and are thus unsuitable for minification), as described
	 *   in {@link guide/di the Dependency Injection guide}, and useful debugging info will assist in
	 *   tracking down the root of these bugs.
	 *
	 * @description
	 *
	 * Use this directive to **auto-bootstrap** an AngularJS application. The `ngApp` directive
	 * designates the **root element** of the application and is typically placed near the root element
	 * of the page - e.g. on the `<body>` or `<html>` tags.
	 *
	 * There are a few things to keep in mind when using `ngApp`:
	 * - only one AngularJS application can be auto-bootstrapped per HTML document. The first `ngApp`
	 *   found in the document will be used to define the root element to auto-bootstrap as an
	 *   application. To run multiple applications in an HTML document you must manually bootstrap them using
	 *   {@link angular.bootstrap} instead.
	 * - AngularJS applications cannot be nested within each other.
	 * - Do not use a directive that uses {@link ng.$compile#transclusion transclusion} on the same element as `ngApp`.
	 *   This includes directives such as {@link ng.ngIf `ngIf`}, {@link ng.ngInclude `ngInclude`} and
	 *   {@link ngRoute.ngView `ngView`}.
	 *   Doing this misplaces the app {@link ng.$rootElement `$rootElement`} and the app's {@link auto.$injector injector},
	 *   causing animations to stop working and making the injector inaccessible from outside the app.
	 *
	 * You can specify an **AngularJS module** to be used as the root module for the application.  This
	 * module will be loaded into the {@link auto.$injector} when the application is bootstrapped. It
	 * should contain the application code needed or have dependencies on other modules that will
	 * contain the code. See {@link angular.module} for more information.
	 *
	 * In the example below if the `ngApp` directive were not placed on the `html` element then the
	 * document would not be compiled, the `AppController` would not be instantiated and the `{{ a+b }}`
	 * would not be resolved to `3`.
	 *
	 * `ngApp` is the easiest, and most common way to bootstrap an application.
	 *
	 <example module="ngAppDemo">
	   <file name="index.html">
	   <div ng-controller="ngAppDemoController">
	     I can add: {{a}} + {{b}} =  {{ a+b }}
	   </div>
	   </file>
	   <file name="script.js">
	   angular.module('ngAppDemo', []).controller('ngAppDemoController', function($scope) {
	     $scope.a = 1;
	     $scope.b = 2;
	   });
	   </file>
	 </example>
	 *
	 * Using `ngStrictDi`, you would see something like this:
	 *
	 <example ng-app-included="true">
	   <file name="index.html">
	   <div ng-app="ngAppStrictDemo" ng-strict-di>
	       <div ng-controller="GoodController1">
	           I can add: {{a}} + {{b}} =  {{ a+b }}
	
	           <p>This renders because the controller does not fail to
	              instantiate, by using explicit annotation style (see
	              script.js for details)
	           </p>
	       </div>
	
	       <div ng-controller="GoodController2">
	           Name: <input ng-model="name"><br />
	           Hello, {{name}}!
	
	           <p>This renders because the controller does not fail to
	              instantiate, by using explicit annotation style
	              (see script.js for details)
	           </p>
	       </div>
	
	       <div ng-controller="BadController">
	           I can add: {{a}} + {{b}} =  {{ a+b }}
	
	           <p>The controller could not be instantiated, due to relying
	              on automatic function annotations (which are disabled in
	              strict mode). As such, the content of this section is not
	              interpolated, and there should be an error in your web console.
	           </p>
	       </div>
	   </div>
	   </file>
	   <file name="script.js">
	   angular.module('ngAppStrictDemo', [])
	     // BadController will fail to instantiate, due to relying on automatic function annotation,
	     // rather than an explicit annotation
	     .controller('BadController', function($scope) {
	       $scope.a = 1;
	       $scope.b = 2;
	     })
	     // Unlike BadController, GoodController1 and GoodController2 will not fail to be instantiated,
	     // due to using explicit annotations using the array style and $inject property, respectively.
	     .controller('GoodController1', ['$scope', function($scope) {
	       $scope.a = 1;
	       $scope.b = 2;
	     }])
	     .controller('GoodController2', GoodController2);
	     function GoodController2($scope) {
	       $scope.name = "World";
	     }
	     GoodController2.$inject = ['$scope'];
	   </file>
	   <file name="style.css">
	   div[ng-controller] {
	       margin-bottom: 1em;
	       -webkit-border-radius: 4px;
	       border-radius: 4px;
	       border: 1px solid;
	       padding: .5em;
	   }
	   div[ng-controller^=Good] {
	       border-color: #d6e9c6;
	       background-color: #dff0d8;
	       color: #3c763d;
	   }
	   div[ng-controller^=Bad] {
	       border-color: #ebccd1;
	       background-color: #f2dede;
	       color: #a94442;
	       margin-bottom: 0;
	   }
	   </file>
	 </example>
	 */
function ot(t,e){var n,r,o={};
// The element `element` has priority over any other element
i(ti,function(e){var i=e+"app";!n&&t.hasAttribute&&t.hasAttribute(i)&&(n=t,r=t.getAttribute(i))}),i(ti,function(e){var i,o=e+"app";!n&&(i=t.querySelector("["+o.replace(":","\\:")+"]"))&&(n=i,r=i.getAttribute(o))}),n&&(o.strictDi=null!==it(n,"strict-di"),e(n,r?[r]:[],o))}/**
	 * @ngdoc function
	 * @name angular.bootstrap
	 * @module ng
	 * @description
	 * Use this function to manually start up angular application.
	 *
	 * For more information, see the {@link guide/bootstrap Bootstrap guide}.
	 *
	 * Angular will detect if it has been loaded into the browser more than once and only allow the
	 * first loaded script to be bootstrapped and will report a warning to the browser console for
	 * each of the subsequent scripts. This prevents strange results in applications, where otherwise
	 * multiple instances of Angular try to work on the DOM.
	 *
	 * <div class="alert alert-warning">
	 * **Note:** Protractor based end-to-end tests cannot use this function to bootstrap manually.
	 * They must use {@link ng.directive:ngApp ngApp}.
	 * </div>
	 *
	 * <div class="alert alert-warning">
	 * **Note:** Do not bootstrap the app on an element with a directive that uses {@link ng.$compile#transclusion transclusion},
	 * such as {@link ng.ngIf `ngIf`}, {@link ng.ngInclude `ngInclude`} and {@link ngRoute.ngView `ngView`}.
	 * Doing this misplaces the app {@link ng.$rootElement `$rootElement`} and the app's {@link auto.$injector injector},
	 * causing animations to stop working and making the injector inaccessible from outside the app.
	 * </div>
	 *
	 * ```html
	 * <!doctype html>
	 * <html>
	 * <body>
	 * <div ng-controller="WelcomeController">
	 *   {{greeting}}
	 * </div>
	 *
	 * <script src="angular.js"></script>
	 * <script>
	 *   var app = angular.module('demo', [])
	 *   .controller('WelcomeController', function($scope) {
	 *       $scope.greeting = 'Welcome!';
	 *   });
	 *   angular.bootstrap(document, ['demo']);
	 * </script>
	 * </body>
	 * </html>
	 * ```
	 *
	 * @param {DOMElement} element DOM element which is the root of angular application.
	 * @param {Array<String|Function|Array>=} modules an array of modules to load into the application.
	 *     Each item in the array should be the name of a predefined module or a (DI annotated)
	 *     function that will be invoked by the injector as a `config` block.
	 *     See: {@link angular.module modules}
	 * @param {Object=} config an object for defining configuration options for the application. The
	 *     following keys are supported:
	 *
	 * * `strictDi` - disable automatic function annotation for the application. This is meant to
	 *   assist in finding bugs which break minified code. Defaults to `false`.
	 *
	 * @returns {auto.$injector} Returns the newly created injector for this app.
	 */
function at(t,n,r){b(r)||(r={});var o={strictDi:!1};r=l(o,r);var a=function(){if(t=Mr(t),t.injector()){var i=t[0]===e.document?"document":Z(t);
//Encode angle brackets to prevent input from being sanitized to empty string #8683
throw Br("btstrpd","App already bootstrapped with this element '{0}'",i.replace(/</,"&lt;").replace(/>/,"&gt;"))}n=n||[],n.unshift(["$provide",function(e){e.value("$rootElement",t)}]),r.debugInfoEnabled&&
// Pushing so that this overrides `debugInfoEnabled` setting defined in user's `modules`.
n.push(["$compileProvider",function(t){t.debugInfoEnabled(!0)}]),n.unshift("ng");var o=re(n,r.strictDi);return o.invoke(["$rootScope","$rootElement","$compile","$injector",function(t,e,n,r){t.$apply(function(){e.data("$injector",r),n(e)(t)})}]),o},u=/^NG_ENABLE_DEBUG_INFO!/,s=/^NG_DEFER_BOOTSTRAP!/;return e&&u.test(e.name)&&(r.debugInfoEnabled=!0,e.name=e.name.replace(u,"")),e&&!s.test(e.name)?a():(e.name=e.name.replace(s,""),Wr.resumeBootstrap=function(t){return i(t,function(t){n.push(t)}),a()},void(S(Wr.resumeDeferredBootstrap)&&Wr.resumeDeferredBootstrap()))}/**
	 * @ngdoc function
	 * @name angular.reloadWithDebugInfo
	 * @module ng
	 * @description
	 * Use this function to reload the current application with debug information turned on.
	 * This takes precedence over a call to `$compileProvider.debugInfoEnabled(false)`.
	 *
	 * See {@link ng.$compileProvider#debugInfoEnabled} for more.
	 */
function ut(){e.name="NG_ENABLE_DEBUG_INFO!"+e.name,e.location.reload()}/**
	 * @name angular.getTestability
	 * @module ng
	 * @description
	 * Get the testability service for the instance of Angular on the given
	 * element.
	 * @param {DOMElement} element DOM element which is the root of angular application.
	 */
function st(t){var e=Wr.element(t).injector();if(!e)throw Br("test","no injector found for element argument to getTestability");return e.get("$$testability")}function ct(t,e){return e=e||"_",t.replace(ei,function(t,n){return(n?e:"")+t.toLowerCase()})}function lt(){var n;if(!ni){
// bind to jQuery if present;
var r=Zr();Ir=y(r)?t:// use jQuery (if present)
r?// use jqLite
e[r]:void 0,// use jQuery specified by `ngJq`
// Use jQuery if it exists with proper functionality, otherwise default to us.
// Angular 1.2+ requires jQuery 1.7+ for on()/off() support.
// Angular 1.3+ technically requires at least jQuery 2.1+ but it may work with older
// versions. It will not work for sure with jQuery <1.7, though.
Ir&&Ir.fn.on?(Mr=Ir,l(Ir.fn,{scope:Ci.scope,isolateScope:Ci.isolateScope,controller:Ci.controller,injector:Ci.injector,inheritedData:Ci.inheritedData}),
// All nodes removed from the DOM via various jQuery APIs like .remove()
// are passed through jQuery.cleanData. Monkey-patch this method to fire
// the $destroy event on all removed nodes.
n=Ir.cleanData,Ir.cleanData=function(t){for(var e,r,i=0;null!=(r=t[i]);i++)e=Ir._data(r,"events"),e&&e.$destroy&&Ir(r).triggerHandler("$destroy");n(t)}):Mr=Ot,Wr.element=Mr,
// Prevent double-proxying.
ni=!0}}/**
	 * throw error if the argument is falsy.
	 */
function ft(t,e,n){if(!t)throw Br("areq","Argument '{0}' is {1}",e||"?",n||"required");return t}function ht(t,e,n){return n&&Gr(t)&&(t=t[t.length-1]),ft(S(t),e,"not a function, got "+(t&&"object"==typeof t?t.constructor.name||"Object":typeof t)),t}/**
	 * throw error if the name given is hasOwnProperty
	 * @param  {String} name    the name to test
	 * @param  {String} context the context in which the name is used, such as module or directive
	 */
function pt(t,e){if("hasOwnProperty"===t)throw Br("badname","hasOwnProperty is not a valid {0} name",e)}/**
	 * Return the value accessible from the object by path. Any undefined traversals are ignored
	 * @param {Object} obj starting object
	 * @param {String} path path to traverse
	 * @param {boolean} [bindFnToScope=true]
	 * @returns {Object} value as accessible by path
	 */
//TODO(misko): this function needs to be removed
function dt(t,e,n){if(!e)return t;for(var r,i=e.split("."),o=t,a=i.length,u=0;u<a;u++)r=i[u],t&&(t=(o=t)[r]);return!n&&S(t)?W(o,t):t}/**
	 * Return the DOM siblings between the first and last node in the given array.
	 * @param {Array} array like object
	 * @returns {Array} the inputted object or a jqLite collection containing the nodes
	 */
function vt(t){for(var e,n=t[0],r=t[t.length-1],i=1;n!==r&&(n=n.nextSibling);i++)(e||t[i]!==n)&&(e||(e=Mr(qr.call(t,0,i))),e.push(n));return e||t}/**
	 * Creates a new object without a prototype. This object is useful for lookup without having to
	 * guard against prototypically inherited properties via hasOwnProperty.
	 *
	 * Related micro-benchmarks:
	 * - http://jsperf.com/object-create2
	 * - http://jsperf.com/proto-map-lookup/2
	 * - http://jsperf.com/for-in-vs-object-keys2
	 *
	 * @returns {Object}
	 */
function gt(){return Object.create(null)}/**
	 * @ngdoc type
	 * @name angular.Module
	 * @module ng
	 * @description
	 *
	 * Interface for configuring angular {@link angular.module modules}.
	 */
function mt(t){function e(t,e,n){return t[e]||(t[e]=n())}var r=n("$injector"),i=n("ng"),o=e(t,"angular",Object);
// We need to expose `angular.$$minErr` to modules such as `ngResource` that reference it during bootstrap
return o.$$minErr=o.$$minErr||n,e(o,"module",function(){/** @type {Object.<string, angular.Module>} */
var t={};/**
	     * @ngdoc function
	     * @name angular.module
	     * @module ng
	     * @description
	     *
	     * The `angular.module` is a global place for creating, registering and retrieving Angular
	     * modules.
	     * All modules (angular core or 3rd party) that should be available to an application must be
	     * registered using this mechanism.
	     *
	     * Passing one argument retrieves an existing {@link angular.Module},
	     * whereas passing more than one argument creates a new {@link angular.Module}
	     *
	     *
	     * # Module
	     *
	     * A module is a collection of services, directives, controllers, filters, and configuration information.
	     * `angular.module` is used to configure the {@link auto.$injector $injector}.
	     *
	     * ```js
	     * // Create a new module
	     * var myModule = angular.module('myModule', []);
	     *
	     * // register a new service
	     * myModule.value('appName', 'MyCoolApp');
	     *
	     * // configure existing services inside initialization blocks.
	     * myModule.config(['$locationProvider', function($locationProvider) {
	     *   // Configure existing providers
	     *   $locationProvider.hashPrefix('!');
	     * }]);
	     * ```
	     *
	     * Then you can create an injector and load your modules like this:
	     *
	     * ```js
	     * var injector = angular.injector(['ng', 'myModule'])
	     * ```
	     *
	     * However it's more likely that you'll just use
	     * {@link ng.directive:ngApp ngApp} or
	     * {@link angular.bootstrap} to simplify this process for you.
	     *
	     * @param {!string} name The name of the module to create or retrieve.
	     * @param {!Array.<string>=} requires If specified then new module is being created. If
	     *        unspecified then the module is being retrieved for further configuration.
	     * @param {Function=} configFn Optional configuration function for the module. Same as
	     *        {@link angular.Module#config Module#config()}.
	     * @returns {angular.Module} new module with the {@link angular.Module} api.
	     */
return function(n,o,a){var u=function(t,e){if("hasOwnProperty"===t)throw i("badname","hasOwnProperty is not a valid {0} name",e)};return u(n,"module"),o&&t.hasOwnProperty(n)&&(t[n]=null),e(t,n,function(){/**
	         * @param {string} provider
	         * @param {string} method
	         * @param {String=} insertMethod
	         * @returns {angular.Module}
	         */
function t(t,e,n,r){return r||(r=i),function(){return r[n||"push"]([t,e,arguments]),l}}/**
	         * @param {string} provider
	         * @param {string} method
	         * @returns {angular.Module}
	         */
function e(t,e){return function(r,o){return o&&S(o)&&(o.$$moduleName=n),i.push([t,e,arguments]),l}}if(!o)throw r("nomod","Module '{0}' is not available! You either misspelled the module name or forgot to load it. If registering a module ensure that you specify the dependencies as the second argument.",n);/** @type {!Array.<Array.<*>>} */
var i=[],u=[],s=[],c=t("$injector","invoke","push",u),l={
// Private state
_invokeQueue:i,_configBlocks:u,_runBlocks:s,/**
	           * @ngdoc property
	           * @name angular.Module#requires
	           * @module ng
	           *
	           * @description
	           * Holds the list of modules which the injector will load before the current module is
	           * loaded.
	           */
requires:o,/**
	           * @ngdoc property
	           * @name angular.Module#name
	           * @module ng
	           *
	           * @description
	           * Name of the module.
	           */
name:n,/**
	           * @ngdoc method
	           * @name angular.Module#provider
	           * @module ng
	           * @param {string} name service name
	           * @param {Function} providerType Construction function for creating new instance of the
	           *                                service.
	           * @description
	           * See {@link auto.$provide#provider $provide.provider()}.
	           */
provider:e("$provide","provider"),/**
	           * @ngdoc method
	           * @name angular.Module#factory
	           * @module ng
	           * @param {string} name service name
	           * @param {Function} providerFunction Function for creating new instance of the service.
	           * @description
	           * See {@link auto.$provide#factory $provide.factory()}.
	           */
factory:e("$provide","factory"),/**
	           * @ngdoc method
	           * @name angular.Module#service
	           * @module ng
	           * @param {string} name service name
	           * @param {Function} constructor A constructor function that will be instantiated.
	           * @description
	           * See {@link auto.$provide#service $provide.service()}.
	           */
service:e("$provide","service"),/**
	           * @ngdoc method
	           * @name angular.Module#value
	           * @module ng
	           * @param {string} name service name
	           * @param {*} object Service instance object.
	           * @description
	           * See {@link auto.$provide#value $provide.value()}.
	           */
value:t("$provide","value"),/**
	           * @ngdoc method
	           * @name angular.Module#constant
	           * @module ng
	           * @param {string} name constant name
	           * @param {*} object Constant value.
	           * @description
	           * Because the constants are fixed, they get applied before other provide methods.
	           * See {@link auto.$provide#constant $provide.constant()}.
	           */
constant:t("$provide","constant","unshift"),/**
	           * @ngdoc method
	           * @name angular.Module#decorator
	           * @module ng
	           * @param {string} name The name of the service to decorate.
	           * @param {Function} decorFn This function will be invoked when the service needs to be
	           *                           instantiated and should return the decorated service instance.
	           * @description
	           * See {@link auto.$provide#decorator $provide.decorator()}.
	           */
decorator:e("$provide","decorator"),/**
	           * @ngdoc method
	           * @name angular.Module#animation
	           * @module ng
	           * @param {string} name animation name
	           * @param {Function} animationFactory Factory function for creating new instance of an
	           *                                    animation.
	           * @description
	           *
	           * **NOTE**: animations take effect only if the **ngAnimate** module is loaded.
	           *
	           *
	           * Defines an animation hook that can be later used with
	           * {@link $animate $animate} service and directives that use this service.
	           *
	           * ```js
	           * module.animation('.animation-name', function($inject1, $inject2) {
	           *   return {
	           *     eventName : function(element, done) {
	           *       //code to run the animation
	           *       //once complete, then run done()
	           *       return function cancellationFunction(element) {
	           *         //code to cancel the animation
	           *       }
	           *     }
	           *   }
	           * })
	           * ```
	           *
	           * See {@link ng.$animateProvider#register $animateProvider.register()} and
	           * {@link ngAnimate ngAnimate module} for more information.
	           */
animation:e("$animateProvider","register"),/**
	           * @ngdoc method
	           * @name angular.Module#filter
	           * @module ng
	           * @param {string} name Filter name - this must be a valid angular expression identifier
	           * @param {Function} filterFactory Factory function for creating new instance of filter.
	           * @description
	           * See {@link ng.$filterProvider#register $filterProvider.register()}.
	           *
	           * <div class="alert alert-warning">
	           * **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.
	           * Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace
	           * your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores
	           * (`myapp_subsection_filterx`).
	           * </div>
	           */
filter:e("$filterProvider","register"),/**
	           * @ngdoc method
	           * @name angular.Module#controller
	           * @module ng
	           * @param {string|Object} name Controller name, or an object map of controllers where the
	           *    keys are the names and the values are the constructors.
	           * @param {Function} constructor Controller constructor function.
	           * @description
	           * See {@link ng.$controllerProvider#register $controllerProvider.register()}.
	           */
controller:e("$controllerProvider","register"),/**
	           * @ngdoc method
	           * @name angular.Module#directive
	           * @module ng
	           * @param {string|Object} name Directive name, or an object map of directives where the
	           *    keys are the names and the values are the factories.
	           * @param {Function} directiveFactory Factory function for creating new instance of
	           * directives.
	           * @description
	           * See {@link ng.$compileProvider#directive $compileProvider.directive()}.
	           */
directive:e("$compileProvider","directive"),/**
	           * @ngdoc method
	           * @name angular.Module#component
	           * @module ng
	           * @param {string} name Name of the component in camel-case (i.e. myComp which will match as my-comp)
	           * @param {Object} options Component definition object (a simplified
	           *    {@link ng.$compile#directive-definition-object directive definition object})
	           *
	           * @description
	           * See {@link ng.$compileProvider#component $compileProvider.component()}.
	           */
component:e("$compileProvider","component"),/**
	           * @ngdoc method
	           * @name angular.Module#config
	           * @module ng
	           * @param {Function} configFn Execute this function on module load. Useful for service
	           *    configuration.
	           * @description
	           * Use this method to register work which needs to be performed on module loading.
	           * For more about how to configure services, see
	           * {@link providers#provider-recipe Provider Recipe}.
	           */
config:c,/**
	           * @ngdoc method
	           * @name angular.Module#run
	           * @module ng
	           * @param {Function} initializationFn Execute this function after injector creation.
	           *    Useful for application initialization.
	           * @description
	           * Use this method to register work which should be performed when the injector is done
	           * loading all modules.
	           */
run:function(t){return s.push(t),this}};return a&&c(a),l})}})}/* global: toDebugString: true */
function yt(t){var e=[];return JSON.stringify(t,function(t,n){if(n=z(t,n),b(n)){if(e.indexOf(n)>=0)return"...";e.push(n)}return n})}function $t(t){return"function"==typeof t?t.toString().replace(/ \{[\s\S]*$/,""):y(t)?"undefined":"string"!=typeof t?yt(t):t}function bt(t){l(t,{bootstrap:at,copy:U,extend:l,merge:f,equals:V,element:Mr,forEach:i,injector:re,noop:d,bind:W,toJson:G,fromJson:X,identity:v,isUndefined:y,isDefined:$,isString:x,isFunction:S,isObject:b,isNumber:_,isElement:M,isArray:Gr,version:ci,isDate:C,lowercase:Rr,uppercase:jr,callbacks:{counter:0},getTestability:st,$$minErr:n,$$csp:Kr,reloadWithDebugInfo:ut}),(Lr=mt(e))("ng",["ngLocale"],["$provide",function(t){
// $$sanitizeUriProvider needs to be before $compileProvider as it is used by it.
t.provider({$$sanitizeUri:Cn}),t.provider("$compile",de).directive({a:jo,input:Ko,textarea:Ko,form:Io,script:za,select:Ja,style:Ka,option:Ya,ngBind:ta,ngBindHtml:na,ngBindTemplate:ea,ngClass:ia,ngClassEven:aa,ngClassOdd:oa,ngCloak:ua,ngController:sa,ngForm:Lo,ngHide:qa,ngIf:fa,ngInclude:ha,ngInit:da,ngNonBindable:Oa,ngPluralize:Pa,ngRepeat:Da,ngShow:La,ngStyle:Ua,ngSwitch:Fa,ngSwitchWhen:Va,ngSwitchDefault:Ha,ngOptions:Na,ngTransclude:Wa,ngModel:Ea,ngList:va,ngChange:ra,pattern:Qa,ngPattern:Qa,required:Za,ngRequired:Za,minlength:eu,ngMinlength:eu,maxlength:tu,ngMaxlength:tu,ngValue:Qo,ngModelOptions:Ta}).directive({ngInclude:pa}).directive(No).directive(ca),t.provider({$anchorScroll:ie,$animate:Ui,$animateCss:Hi,$$animateJs:Li,$$animateQueue:qi,$$AnimateRunner:Vi,$$animateAsyncRun:Fi,$browser:le,$cacheFactory:fe,$controller:be,$document:we,$exceptionHandler:xe,$filter:Ln,$$forceReflow:Ji,$interpolate:Me,$interval:Ie,$http:je,$httpParamSerializer:Ce,$httpParamSerializerJQLike:Se,$httpBackend:Pe,$xhrFactory:Ne,$location:Ke,$log:Ze,$parse:yn,$rootScope:_n,$q:$n,$$q:bn,$sce:kn,$sceDelegate:En,$sniffer:Tn,$templateCache:he,$templateRequest:On,$$testability:Rn,$timeout:jn,$window:Dn,$$rAF:xn,$$jqLite:Kt,$$HashMap:ki,$$cookieReader:In})}])}function wt(){return++fi}/**
	 * Converts snake_case to camelCase.
	 * Also there is special case for Moz prefix starting with upper case letter.
	 * @param name Name to normalize
	 */
function xt(t){return t.replace(di,function(t,e,n,r){return r?n.toUpperCase():n}).replace(vi,"Moz$1")}function _t(t){return!$i.test(t)}function Ct(t){
// The window object can accept data but has no nodeType
// Otherwise we are only interested in elements (1) and documents (9)
var e=t.nodeType;return e===ri||!e||e===ui}function St(t){for(var e in li[t.ng339])return!0;return!1}function At(t){for(var e=0,n=t.length;e<n;e++)Pt(t[e])}function Et(t,e){var n,r,o,a,u=e.createDocumentFragment(),s=[];if(_t(t))
// Convert non-html into a text node
s.push(e.createTextNode(t));else{for(
// Convert html into DOM nodes
n=n||u.appendChild(e.createElement("div")),r=(bi.exec(t)||["",""])[1].toLowerCase(),o=xi[r]||xi._default,n.innerHTML=o[1]+t.replace(wi,"<$1></$2>")+o[2],
// Descend through wrappers to the right content
a=o[0];a--;)n=n.lastChild;s=H(s,n.childNodes),n=u.firstChild,n.textContent=""}
// Remove wrapper from fragment
// Clear inner HTML
return u.textContent="",u.innerHTML="",i(s,function(t){u.appendChild(t)}),u}function kt(t,n){n=n||e.document;var r;return(r=yi.exec(t))?[n.createElement(r[1])]:(r=Et(t,n))?r.childNodes:[]}function Tt(t,e){var n=t.parentNode;n&&n.replaceChild(e,t),e.appendChild(t)}
/////////////////////////////////////////////
function Ot(t){if(t instanceof Ot)return t;var e;if(x(t)&&(t=Jr(t),e=!0),!(this instanceof Ot)){if(e&&"<"!=t.charAt(0))throw mi("nosel","Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element");return new Ot(t)}e?Ut(this,kt(t)):Ut(this,t)}function Rt(t){return t.cloneNode(!0)}function jt(t,e){if(e||Pt(t),t.querySelectorAll)for(var n=t.querySelectorAll("*"),r=0,i=n.length;r<i;r++)Pt(n[r])}function Nt(t,e,n,r){if($(r))throw mi("offargs","jqLite#off() does not support the `selector` argument");var o=Dt(t),a=o&&o.events,u=o&&o.handle;if(u)//no listeners registered
if(e){var s=function(e){var r=a[e];$(n)&&q(r||[],n),$(n)&&r&&r.length>0||(pi(t,e,u),delete a[e])};i(e.split(" "),function(t){s(t),gi[t]&&s(gi[t])})}else for(e in a)"$destroy"!==e&&pi(t,e,u),delete a[e]}function Pt(t,e){var n=t.ng339,r=n&&li[n];if(r){if(e)return void delete r.data[e];r.handle&&(r.events.$destroy&&r.handle({},"$destroy"),Nt(t)),delete li[n],t.ng339=void 0}}function Dt(t,e){var n=t.ng339,r=n&&li[n];return e&&!r&&(t.ng339=n=wt(),r=li[n]={events:{},data:{},handle:void 0}),r}function Mt(t,e,n){if(Ct(t)){var r=$(n),i=!r&&e&&!b(e),o=!e,a=Dt(t,!i),u=a&&a.data;if(r)// data('key', value)
u[e]=n;else{if(o)// data()
return u;if(i)// data('key')
// don't force creation of expandoStore if it doesn't exist yet
return u&&u[e];// mass-setter: data({key1: val1, key2: val2})
l(u,e)}}}function It(t,e){return!!t.getAttribute&&(" "+(t.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").indexOf(" "+e+" ")>-1}function Lt(t,e){e&&t.setAttribute&&i(e.split(" "),function(e){t.setAttribute("class",Jr((" "+(t.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").replace(" "+Jr(e)+" "," ")))})}function qt(t,e){if(e&&t.setAttribute){var n=(" "+(t.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ");i(e.split(" "),function(t){t=Jr(t),n.indexOf(" "+t+" ")===-1&&(n+=t+" ")}),t.setAttribute("class",Jr(n))}}function Ut(t,e){
// THIS CODE IS VERY HOT. Don't make changes without benchmarking.
if(e)
// if a Node (the most common case)
if(e.nodeType)t[t.length++]=e;else{var n=e.length;
// if an Array or NodeList and not a Window
if("number"==typeof n&&e.window!==e){if(n)for(var r=0;r<n;r++)t[t.length++]=e[r]}else t[t.length++]=e}}function Ft(t,e){return Vt(t,"$"+(e||"ngController")+"Controller")}function Vt(t,e,n){
// if element is the document object work with the html element instead
// this makes $(document).scope() possible
t.nodeType==ui&&(t=t.documentElement);for(var r=Gr(e)?e:[e];t;){for(var i=0,o=r.length;i<o;i++)if($(n=Mr.data(t,r[i])))return n;
// If dealing with a document fragment node with a host element, and no parent, use the host
// element as the parent. This enables directives within a Shadow DOM or polyfilled Shadow DOM
// to lookup parent controllers.
t=t.parentNode||t.nodeType===si&&t.host}}function Ht(t){for(jt(t,!0);t.firstChild;)t.removeChild(t.firstChild)}function Bt(t,e){e||jt(t);var n=t.parentNode;n&&n.removeChild(t)}function Wt(t,n){n=n||e,"complete"===n.document.readyState?
// Force the action to be run async for consistent behavior
// from the action's point of view
// i.e. it will definitely not be in a $apply
n.setTimeout(t):
// No need to unbind this handler as load is only ever called once
Mr(n).on("load",t)}function zt(t,e){
// check dom last since we will most likely fail on name
var n=Si[e.toLowerCase()];
// booleanAttr is here twice to minimize DOM access
return n&&Ai[L(t)]&&n}function Gt(t){return Ei[t]}function Xt(t,e){var n=function(n,r){
// jQuery specific api
n.isDefaultPrevented=function(){return n.defaultPrevented};var i=e[r||n.type],o=i?i.length:0;if(o){if(y(n.immediatePropagationStopped)){var a=n.stopImmediatePropagation;n.stopImmediatePropagation=function(){n.immediatePropagationStopped=!0,n.stopPropagation&&n.stopPropagation(),a&&a.call(n)}}n.isImmediatePropagationStopped=function(){return n.immediatePropagationStopped===!0};
// Some events have special handlers that wrap the real handler
var u=i.specialHandlerWrapper||Jt;
// Copy event handlers in case event handlers array is modified during execution.
o>1&&(i=F(i));for(var s=0;s<o;s++)n.isImmediatePropagationStopped()||u(t,n,i[s])}};
// TODO: this is a hack for angularMocks/clearDataCache that makes it possible to deregister all
//       events on `element`
return n.elem=t,n}function Jt(t,e,n){n.call(t,e)}function Yt(t,e,n){
// Refer to jQuery's implementation of mouseenter & mouseleave
// Read about mouseenter and mouseleave:
// http://www.quirksmode.org/js/events_mouse.html#link8
var r=e.relatedTarget;
// For mousenter/leave call the handler if related is outside the target.
// NB: No relatedTarget if the mouse left/entered the browser window
r&&(r===t||_i.call(t,r))||n.call(t,e)}
// Provider for private $$jqLite service
function Kt(){this.$get=function(){return l(Ot,{hasClass:function(t,e){return t.attr&&(t=t[0]),It(t,e)},addClass:function(t,e){return t.attr&&(t=t[0]),qt(t,e)},removeClass:function(t,e){return t.attr&&(t=t[0]),Lt(t,e)}})}}/**
	 * Computes a hash of an 'obj'.
	 * Hash of a:
	 *  string is string
	 *  number is number as string
	 *  object is either result of calling $$hashKey function on the object or uniquely generated id,
	 *         that is also assigned to the $$hashKey property of the object.
	 *
	 * @param obj
	 * @returns {string} hash string such that the same input will have the same hash string.
	 *         The resulting string key is in 'type:hashKey' format.
	 */
function Zt(t,e){var n=t&&t.$$hashKey;if(n)return"function"==typeof n&&(n=t.$$hashKey()),n;var r=typeof t;return n="function"==r||"object"==r&&null!==t?t.$$hashKey=r+":"+(e||u)():r+":"+t}/**
	 * HashMap which can use objects as keys
	 */
function Qt(t,e){if(e){var n=0;this.nextUid=function(){return++n}}i(t,this.put,this)}function te(t){var e=Function.prototype.toString.call(t).replace(Ni,""),n=e.match(Ti)||e.match(Oi);return n}function ee(t){
// For anonymous functions, showing at the very least the function signature can help in
// debugging.
var e=te(t);return e?"function("+(e[1]||"").replace(/[\s\r\n]+/," ")+")":"fn"}function ne(t,e,n){var r,o,a;if("function"==typeof t){if(!(r=t.$inject)){if(r=[],t.length){if(e)throw x(n)&&n||(n=t.name||ee(t)),Pi("strictdi","{0} is not using explicit annotation and cannot be invoked in strict mode",n);o=te(t),i(o[1].split(Ri),function(t){t.replace(ji,function(t,e,n){r.push(n)})})}t.$inject=r}}else Gr(t)?(a=t.length-1,ht(t[a],"fn"),r=t.slice(0,a)):ht(t,"fn",!0);return r}
///////////////////////////////////////
/**
	 * @ngdoc service
	 * @name $injector
	 *
	 * @description
	 *
	 * `$injector` is used to retrieve object instances as defined by
	 * {@link auto.$provide provider}, instantiate types, invoke methods,
	 * and load modules.
	 *
	 * The following always holds true:
	 *
	 * ```js
	 *   var $injector = angular.injector();
	 *   expect($injector.get('$injector')).toBe($injector);
	 *   expect($injector.invoke(function($injector) {
	 *     return $injector;
	 *   })).toBe($injector);
	 * ```
	 *
	 * # Injection Function Annotation
	 *
	 * JavaScript does not have annotations, and annotations are needed for dependency injection. The
	 * following are all valid ways of annotating function with injection arguments and are equivalent.
	 *
	 * ```js
	 *   // inferred (only works if code not minified/obfuscated)
	 *   $injector.invoke(function(serviceA){});
	 *
	 *   // annotated
	 *   function explicit(serviceA) {};
	 *   explicit.$inject = ['serviceA'];
	 *   $injector.invoke(explicit);
	 *
	 *   // inline
	 *   $injector.invoke(['serviceA', function(serviceA){}]);
	 * ```
	 *
	 * ## Inference
	 *
	 * In JavaScript calling `toString()` on a function returns the function definition. The definition
	 * can then be parsed and the function arguments can be extracted. This method of discovering
	 * annotations is disallowed when the injector is in strict mode.
	 * *NOTE:* This does not work with minification, and obfuscation tools since these tools change the
	 * argument names.
	 *
	 * ## `$inject` Annotation
	 * By adding an `$inject` property onto a function the injection parameters can be specified.
	 *
	 * ## Inline
	 * As an array of injection names, where the last item in the array is the function to call.
	 */
/**
	 * @ngdoc method
	 * @name $injector#get
	 *
	 * @description
	 * Return an instance of the service.
	 *
	 * @param {string} name The name of the instance to retrieve.
	 * @param {string=} caller An optional string to provide the origin of the function call for error messages.
	 * @return {*} The instance.
	 */
/**
	 * @ngdoc method
	 * @name $injector#invoke
	 *
	 * @description
	 * Invoke the method and supply the method arguments from the `$injector`.
	 *
	 * @param {Function|Array.<string|Function>} fn The injectable function to invoke. Function parameters are
	 *   injected according to the {@link guide/di $inject Annotation} rules.
	 * @param {Object=} self The `this` for the invoked method.
	 * @param {Object=} locals Optional object. If preset then any argument names are read from this
	 *                         object first, before the `$injector` is consulted.
	 * @returns {*} the value returned by the invoked `fn` function.
	 */
/**
	 * @ngdoc method
	 * @name $injector#has
	 *
	 * @description
	 * Allows the user to query if the particular service exists.
	 *
	 * @param {string} name Name of the service to query.
	 * @returns {boolean} `true` if injector has given service.
	 */
/**
	 * @ngdoc method
	 * @name $injector#instantiate
	 * @description
	 * Create a new instance of JS type. The method takes a constructor function, invokes the new
	 * operator, and supplies all of the arguments to the constructor function as specified by the
	 * constructor annotation.
	 *
	 * @param {Function} Type Annotated constructor function.
	 * @param {Object=} locals Optional object. If preset then any argument names are read from this
	 * object first, before the `$injector` is consulted.
	 * @returns {Object} new instance of `Type`.
	 */
/**
	 * @ngdoc method
	 * @name $injector#annotate
	 *
	 * @description
	 * Returns an array of service names which the function is requesting for injection. This API is
	 * used by the injector to determine which services need to be injected into the function when the
	 * function is invoked. There are three ways in which the function can be annotated with the needed
	 * dependencies.
	 *
	 * # Argument names
	 *
	 * The simplest form is to extract the dependencies from the arguments of the function. This is done
	 * by converting the function into a string using `toString()` method and extracting the argument
	 * names.
	 * ```js
	 *   // Given
	 *   function MyController($scope, $route) {
	 *     // ...
	 *   }
	 *
	 *   // Then
	 *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);
	 * ```
	 *
	 * You can disallow this method by using strict injection mode.
	 *
	 * This method does not work with code minification / obfuscation. For this reason the following
	 * annotation strategies are supported.
	 *
	 * # The `$inject` property
	 *
	 * If a function has an `$inject` property and its value is an array of strings, then the strings
	 * represent names of services to be injected into the function.
	 * ```js
	 *   // Given
	 *   var MyController = function(obfuscatedScope, obfuscatedRoute) {
	 *     // ...
	 *   }
	 *   // Define function dependencies
	 *   MyController['$inject'] = ['$scope', '$route'];
	 *
	 *   // Then
	 *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);
	 * ```
	 *
	 * # The array notation
	 *
	 * It is often desirable to inline Injected functions and that's when setting the `$inject` property
	 * is very inconvenient. In these situations using the array notation to specify the dependencies in
	 * a way that survives minification is a better choice:
	 *
	 * ```js
	 *   // We wish to write this (not minification / obfuscation safe)
	 *   injector.invoke(function($compile, $rootScope) {
	 *     // ...
	 *   });
	 *
	 *   // We are forced to write break inlining
	 *   var tmpFn = function(obfuscatedCompile, obfuscatedRootScope) {
	 *     // ...
	 *   };
	 *   tmpFn.$inject = ['$compile', '$rootScope'];
	 *   injector.invoke(tmpFn);
	 *
	 *   // To better support inline function the inline annotation is supported
	 *   injector.invoke(['$compile', '$rootScope', function(obfCompile, obfRootScope) {
	 *     // ...
	 *   }]);
	 *
	 *   // Therefore
	 *   expect(injector.annotate(
	 *      ['$compile', '$rootScope', function(obfus_$compile, obfus_$rootScope) {}])
	 *    ).toEqual(['$compile', '$rootScope']);
	 * ```
	 *
	 * @param {Function|Array.<string|Function>} fn Function for which dependent service names need to
	 * be retrieved as described above.
	 *
	 * @param {boolean=} [strictDi=false] Disallow argument name annotation inference.
	 *
	 * @returns {Array.<string>} The names of the services which the function requires.
	 */
/**
	 * @ngdoc service
	 * @name $provide
	 *
	 * @description
	 *
	 * The {@link auto.$provide $provide} service has a number of methods for registering components
	 * with the {@link auto.$injector $injector}. Many of these functions are also exposed on
	 * {@link angular.Module}.
	 *
	 * An Angular **service** is a singleton object created by a **service factory**.  These **service
	 * factories** are functions which, in turn, are created by a **service provider**.
	 * The **service providers** are constructor functions. When instantiated they must contain a
	 * property called `$get`, which holds the **service factory** function.
	 *
	 * When you request a service, the {@link auto.$injector $injector} is responsible for finding the
	 * correct **service provider**, instantiating it and then calling its `$get` **service factory**
	 * function to get the instance of the **service**.
	 *
	 * Often services have no configuration options and there is no need to add methods to the service
	 * provider.  The provider will be no more than a constructor function with a `$get` property. For
	 * these cases the {@link auto.$provide $provide} service has additional helper methods to register
	 * services without specifying a provider.
	 *
	 * * {@link auto.$provide#provider provider(provider)} - registers a **service provider** with the
	 *     {@link auto.$injector $injector}
	 * * {@link auto.$provide#constant constant(obj)} - registers a value/object that can be accessed by
	 *     providers and services.
	 * * {@link auto.$provide#value value(obj)} - registers a value/object that can only be accessed by
	 *     services, not providers.
	 * * {@link auto.$provide#factory factory(fn)} - registers a service **factory function**, `fn`,
	 *     that will be wrapped in a **service provider** object, whose `$get` property will contain the
	 *     given factory function.
	 * * {@link auto.$provide#service service(class)} - registers a **constructor function**, `class`
	 *     that will be wrapped in a **service provider** object, whose `$get` property will instantiate
	 *      a new object using the given constructor function.
	 *
	 * See the individual methods for more information and examples.
	 */
/**
	 * @ngdoc method
	 * @name $provide#provider
	 * @description
	 *
	 * Register a **provider function** with the {@link auto.$injector $injector}. Provider functions
	 * are constructor functions, whose instances are responsible for "providing" a factory for a
	 * service.
	 *
	 * Service provider names start with the name of the service they provide followed by `Provider`.
	 * For example, the {@link ng.$log $log} service has a provider called
	 * {@link ng.$logProvider $logProvider}.
	 *
	 * Service provider objects can have additional methods which allow configuration of the provider
	 * and its service. Importantly, you can configure what kind of service is created by the `$get`
	 * method, or how that service will act. For example, the {@link ng.$logProvider $logProvider} has a
	 * method {@link ng.$logProvider#debugEnabled debugEnabled}
	 * which lets you specify whether the {@link ng.$log $log} service will log debug messages to the
	 * console or not.
	 *
	 * @param {string} name The name of the instance. NOTE: the provider will be available under `name +
	                        'Provider'` key.
	 * @param {(Object|function())} provider If the provider is:
	 *
	 *   - `Object`: then it should have a `$get` method. The `$get` method will be invoked using
	 *     {@link auto.$injector#invoke $injector.invoke()} when an instance needs to be created.
	 *   - `Constructor`: a new instance of the provider will be created using
	 *     {@link auto.$injector#instantiate $injector.instantiate()}, then treated as `object`.
	 *
	 * @returns {Object} registered provider instance
	
	 * @example
	 *
	 * The following example shows how to create a simple event tracking service and register it using
	 * {@link auto.$provide#provider $provide.provider()}.
	 *
	 * ```js
	 *  // Define the eventTracker provider
	 *  function EventTrackerProvider() {
	 *    var trackingUrl = '/track';
	 *
	 *    // A provider method for configuring where the tracked events should been saved
	 *    this.setTrackingUrl = function(url) {
	 *      trackingUrl = url;
	 *    };
	 *
	 *    // The service factory function
	 *    this.$get = ['$http', function($http) {
	 *      var trackedEvents = {};
	 *      return {
	 *        // Call this to track an event
	 *        event: function(event) {
	 *          var count = trackedEvents[event] || 0;
	 *          count += 1;
	 *          trackedEvents[event] = count;
	 *          return count;
	 *        },
	 *        // Call this to save the tracked events to the trackingUrl
	 *        save: function() {
	 *          $http.post(trackingUrl, trackedEvents);
	 *        }
	 *      };
	 *    }];
	 *  }
	 *
	 *  describe('eventTracker', function() {
	 *    var postSpy;
	 *
	 *    beforeEach(module(function($provide) {
	 *      // Register the eventTracker provider
	 *      $provide.provider('eventTracker', EventTrackerProvider);
	 *    }));
	 *
	 *    beforeEach(module(function(eventTrackerProvider) {
	 *      // Configure eventTracker provider
	 *      eventTrackerProvider.setTrackingUrl('/custom-track');
	 *    }));
	 *
	 *    it('tracks events', inject(function(eventTracker) {
	 *      expect(eventTracker.event('login')).toEqual(1);
	 *      expect(eventTracker.event('login')).toEqual(2);
	 *    }));
	 *
	 *    it('saves to the tracking url', inject(function(eventTracker, $http) {
	 *      postSpy = spyOn($http, 'post');
	 *      eventTracker.event('login');
	 *      eventTracker.save();
	 *      expect(postSpy).toHaveBeenCalled();
	 *      expect(postSpy.mostRecentCall.args[0]).not.toEqual('/track');
	 *      expect(postSpy.mostRecentCall.args[0]).toEqual('/custom-track');
	 *      expect(postSpy.mostRecentCall.args[1]).toEqual({ 'login': 1 });
	 *    }));
	 *  });
	 * ```
	 */
/**
	 * @ngdoc method
	 * @name $provide#factory
	 * @description
	 *
	 * Register a **service factory**, which will be called to return the service instance.
	 * This is short for registering a service where its provider consists of only a `$get` property,
	 * which is the given service factory function.
	 * You should use {@link auto.$provide#factory $provide.factory(getFn)} if you do not need to
	 * configure your service in a provider.
	 *
	 * @param {string} name The name of the instance.
	 * @param {Function|Array.<string|Function>} $getFn The injectable $getFn for the instance creation.
	 *                      Internally this is a short hand for `$provide.provider(name, {$get: $getFn})`.
	 * @returns {Object} registered provider instance
	 *
	 * @example
	 * Here is an example of registering a service
	 * ```js
	 *   $provide.factory('ping', ['$http', function($http) {
	 *     return function ping() {
	 *       return $http.send('/ping');
	 *     };
	 *   }]);
	 * ```
	 * You would then inject and use this service like this:
	 * ```js
	 *   someModule.controller('Ctrl', ['ping', function(ping) {
	 *     ping();
	 *   }]);
	 * ```
	 */
/**
	 * @ngdoc method
	 * @name $provide#service
	 * @description
	 *
	 * Register a **service constructor**, which will be invoked with `new` to create the service
	 * instance.
	 * This is short for registering a service where its provider's `$get` property is a factory
	 * function that returns an instance instantiated by the injector from the service constructor
	 * function.
	 *
	 * Internally it looks a bit like this:
	 *
	 * ```
	 * {
	 *   $get: function() {
	 *     return $injector.instantiate(constructor);
	 *   }
	 * }
	 * ```
	 *
	 *
	 * You should use {@link auto.$provide#service $provide.service(class)} if you define your service
	 * as a type/class.
	 *
	 * @param {string} name The name of the instance.
	 * @param {Function|Array.<string|Function>} constructor An injectable class (constructor function)
	 *     that will be instantiated.
	 * @returns {Object} registered provider instance
	 *
	 * @example
	 * Here is an example of registering a service using
	 * {@link auto.$provide#service $provide.service(class)}.
	 * ```js
	 *   var Ping = function($http) {
	 *     this.$http = $http;
	 *   };
	 *
	 *   Ping.$inject = ['$http'];
	 *
	 *   Ping.prototype.send = function() {
	 *     return this.$http.get('/ping');
	 *   };
	 *   $provide.service('ping', Ping);
	 * ```
	 * You would then inject and use this service like this:
	 * ```js
	 *   someModule.controller('Ctrl', ['ping', function(ping) {
	 *     ping.send();
	 *   }]);
	 * ```
	 */
/**
	 * @ngdoc method
	 * @name $provide#value
	 * @description
	 *
	 * Register a **value service** with the {@link auto.$injector $injector}, such as a string, a
	 * number, an array, an object or a function. This is short for registering a service where its
	 * provider's `$get` property is a factory function that takes no arguments and returns the **value
	 * service**. That also means it is not possible to inject other services into a value service.
	 *
	 * Value services are similar to constant services, except that they cannot be injected into a
	 * module configuration function (see {@link angular.Module#config}) but they can be overridden by
	 * an Angular {@link auto.$provide#decorator decorator}.
	 *
	 * @param {string} name The name of the instance.
	 * @param {*} value The value.
	 * @returns {Object} registered provider instance
	 *
	 * @example
	 * Here are some examples of creating value services.
	 * ```js
	 *   $provide.value('ADMIN_USER', 'admin');
	 *
	 *   $provide.value('RoleLookup', { admin: 0, writer: 1, reader: 2 });
	 *
	 *   $provide.value('halfOf', function(value) {
	 *     return value / 2;
	 *   });
	 * ```
	 */
/**
	 * @ngdoc method
	 * @name $provide#constant
	 * @description
	 *
	 * Register a **constant service** with the {@link auto.$injector $injector}, such as a string,
	 * a number, an array, an object or a function. Like the {@link auto.$provide#value value}, it is not
	 * possible to inject other services into a constant.
	 *
	 * But unlike {@link auto.$provide#value value}, a constant can be
	 * injected into a module configuration function (see {@link angular.Module#config}) and it cannot
	 * be overridden by an Angular {@link auto.$provide#decorator decorator}.
	 *
	 * @param {string} name The name of the constant.
	 * @param {*} value The constant value.
	 * @returns {Object} registered instance
	 *
	 * @example
	 * Here a some examples of creating constants:
	 * ```js
	 *   $provide.constant('SHARD_HEIGHT', 306);
	 *
	 *   $provide.constant('MY_COLOURS', ['red', 'blue', 'grey']);
	 *
	 *   $provide.constant('double', function(value) {
	 *     return value * 2;
	 *   });
	 * ```
	 */
/**
	 * @ngdoc method
	 * @name $provide#decorator
	 * @description
	 *
	 * Register a **service decorator** with the {@link auto.$injector $injector}. A service decorator
	 * intercepts the creation of a service, allowing it to override or modify the behavior of the
	 * service. The object returned by the decorator may be the original service, or a new service
	 * object which replaces or wraps and delegates to the original service.
	 *
	 * @param {string} name The name of the service to decorate.
	 * @param {Function|Array.<string|Function>} decorator This function will be invoked when the service needs to be
	 *    instantiated and should return the decorated service instance. The function is called using
	 *    the {@link auto.$injector#invoke injector.invoke} method and is therefore fully injectable.
	 *    Local injection arguments:
	 *
	 *    * `$delegate` - The original service instance, which can be monkey patched, configured,
	 *      decorated or delegated to.
	 *
	 * @example
	 * Here we decorate the {@link ng.$log $log} service to convert warnings to errors by intercepting
	 * calls to {@link ng.$log#error $log.warn()}.
	 * ```js
	 *   $provide.decorator('$log', ['$delegate', function($delegate) {
	 *     $delegate.warn = $delegate.error;
	 *     return $delegate;
	 *   }]);
	 * ```
	 */
function re(t,e){
////////////////////////////////////
// $provider
////////////////////////////////////
function n(t){return function(e,n){return b(e)?void i(e,a(t)):t(e,n)}}function r(t,e){if(pt(t,"service"),(S(e)||Gr(e))&&(e=_.instantiate(e)),!e.$get)throw Pi("pget","Provider '{0}' must define $get factory method.",t);return w[t+v]=e}function o(t,e){return function(){var n=E.invoke(e,this);if(y(n))throw Pi("undef","Provider '{0}' must return a value from $get factory method.",t);return n}}function u(t,e,n){return r(t,{$get:n!==!1?o(t,e):e})}function s(t,e){return u(t,["$injector",function(t){return t.instantiate(e)}])}function c(t,e){return u(t,g(e),!1)}function l(t,e){pt(t,"constant"),w[t]=e,C[t]=e}function f(t,e){var n=_.get(t+v),r=n.$get;n.$get=function(){var t=E.invoke(r,n);return E.invoke(e,null,{$delegate:t})}}
////////////////////////////////////
// Module Loading
////////////////////////////////////
function h(t){ft(y(t)||Gr(t),"modulesToLoad","not an array");var e,n=[];return i(t,function(t){function r(t){var e,n;for(e=0,n=t.length;e<n;e++){var r=t[e],i=_.get(r[0]);i[r[1]].apply(i,r[2])}}if(!$.get(t)){$.put(t,!0);try{x(t)?(e=Lr(t),n=n.concat(h(e.requires)).concat(e._runBlocks),r(e._invokeQueue),r(e._configBlocks)):S(t)?n.push(_.invoke(t)):Gr(t)?n.push(_.invoke(t)):ht(t,"module")}catch(i){
// Safari & FF's stack traces don't contain error.message content
// unlike those of Chrome and IE
// So if stack doesn't contain message, we create a new string that contains both.
// Since error.stack is read-only in Safari, I'm overriding e and not e.stack here.
/* jshint -W022 */
throw Gr(t)&&(t=t[t.length-1]),i.message&&i.stack&&i.stack.indexOf(i.message)==-1&&(i=i.message+"\n"+i.stack),Pi("modulerr","Failed to instantiate module {0} due to:\n{1}",t,i.stack||i.message||i)}}}),n}
////////////////////////////////////
// internal Injector
////////////////////////////////////
function p(t,n){function r(e,r){if(t.hasOwnProperty(e)){if(t[e]===d)throw Pi("cdep","Circular dependency found: {0}",e+" <- "+m.join(" <- "));return t[e]}try{return m.unshift(e),t[e]=d,t[e]=n(e,r)}catch(i){throw t[e]===d&&delete t[e],i}finally{m.shift()}}function i(t,n,i){for(var o=[],a=re.$$annotate(t,e,i),u=0,s=a.length;u<s;u++){var c=a[u];if("string"!=typeof c)throw Pi("itkn","Incorrect injection token! Expected service name as string, got {0}",c);o.push(n&&n.hasOwnProperty(c)?n[c]:r(c,i))}return o}function o(t){
// IE 9-11 do not support classes and IE9 leaks with the code below.
// IE 9-11 do not support classes and IE9 leaks with the code below.
return!(Dr<=11)&&("function"==typeof t&&/^(?:class\s|constructor\()/.test(Function.prototype.toString.call(t)))}function a(t,e,n,r){"string"==typeof n&&(r=n,n=null);var a=i(t,n,r);return Gr(t)&&(t=t[t.length-1]),o(t)?(a.unshift(null),new(Function.prototype.bind.apply(t,a))):t.apply(e,a)}function u(t,e,n){
// Check if Type is annotated and use just the given function at n-1 as parameter
// e.g. someModule.factory('greeter', ['$window', function(renamed$window) {}]);
var r=Gr(t)?t[t.length-1]:t,o=i(t,e,n);
// Empty object at position 0 is ignored for invocation with `new`, but required.
return o.unshift(null),new(Function.prototype.bind.apply(r,o))}return{invoke:a,instantiate:u,get:r,annotate:re.$$annotate,has:function(e){return w.hasOwnProperty(e+v)||t.hasOwnProperty(e)}}}e=e===!0;var d={},v="Provider",m=[],$=new Qt([],(!0)),w={$provide:{provider:n(r),factory:n(u),service:n(s),value:n(c),constant:n(l),decorator:f}},_=w.$injector=p(w,function(t,e){throw Wr.isString(e)&&m.push(e),Pi("unpr","Unknown provider: {0}",m.join(" <- "))}),C={},A=p(C,function(t,e){var n=_.get(t+v,e);return E.invoke(n.$get,n,void 0,t)}),E=A;w["$injector"+v]={$get:g(A)};var k=h(t);return E=A.get("$injector"),E.strictDi=e,i(k,function(t){t&&E.invoke(t)}),E}/**
	 * @ngdoc provider
	 * @name $anchorScrollProvider
	 *
	 * @description
	 * Use `$anchorScrollProvider` to disable automatic scrolling whenever
	 * {@link ng.$location#hash $location.hash()} changes.
	 */
function ie(){var t=!0;/**
	   * @ngdoc method
	   * @name $anchorScrollProvider#disableAutoScrolling
	   *
	   * @description
	   * By default, {@link ng.$anchorScroll $anchorScroll()} will automatically detect changes to
	   * {@link ng.$location#hash $location.hash()} and scroll to the element matching the new hash.<br />
	   * Use this method to disable automatic scrolling.
	   *
	   * If automatic scrolling is disabled, one must explicitly call
	   * {@link ng.$anchorScroll $anchorScroll()} in order to scroll to the element related to the
	   * current hash.
	   */
this.disableAutoScrolling=function(){t=!1},/**
	   * @ngdoc service
	   * @name $anchorScroll
	   * @kind function
	   * @requires $window
	   * @requires $location
	   * @requires $rootScope
	   *
	   * @description
	   * When called, it scrolls to the element related to the specified `hash` or (if omitted) to the
	   * current value of {@link ng.$location#hash $location.hash()}, according to the rules specified
	   * in the
	   * [HTML5 spec](http://www.w3.org/html/wg/drafts/html/master/browsers.html#the-indicated-part-of-the-document).
	   *
	   * It also watches the {@link ng.$location#hash $location.hash()} and automatically scrolls to
	   * match any anchor whenever it changes. This can be disabled by calling
	   * {@link ng.$anchorScrollProvider#disableAutoScrolling $anchorScrollProvider.disableAutoScrolling()}.
	   *
	   * Additionally, you can use its {@link ng.$anchorScroll#yOffset yOffset} property to specify a
	   * vertical scroll-offset (either fixed or dynamic).
	   *
	   * @param {string=} hash The hash specifying the element to scroll to. If omitted, the value of
	   *                       {@link ng.$location#hash $location.hash()} will be used.
	   *
	   * @property {(number|function|jqLite)} yOffset
	   * If set, specifies a vertical scroll-offset. This is often useful when there are fixed
	   * positioned elements at the top of the page, such as navbars, headers etc.
	   *
	   * `yOffset` can be specified in various ways:
	   * - **number**: A fixed number of pixels to be used as offset.<br /><br />
	   * - **function**: A getter function called everytime `$anchorScroll()` is executed. Must return
	   *   a number representing the offset (in pixels).<br /><br />
	   * - **jqLite**: A jqLite/jQuery element to be used for specifying the offset. The distance from
	   *   the top of the page to the element's bottom will be used as offset.<br />
	   *   **Note**: The element will be taken into account only as long as its `position` is set to
	   *   `fixed`. This option is useful, when dealing with responsive navbars/headers that adjust
	   *   their height and/or positioning according to the viewport's size.
	   *
	   * <br />
	   * <div class="alert alert-warning">
	   * In order for `yOffset` to work properly, scrolling should take place on the document's root and
	   * not some child element.
	   * </div>
	   *
	   * @example
	     <example module="anchorScrollExample">
	       <file name="index.html">
	         <div id="scrollArea" ng-controller="ScrollController">
	           <a ng-click="gotoBottom()">Go to bottom</a>
	           <a id="bottom"></a> You're at the bottom!
	         </div>
	       </file>
	       <file name="script.js">
	         angular.module('anchorScrollExample', [])
	           .controller('ScrollController', ['$scope', '$location', '$anchorScroll',
	             function ($scope, $location, $anchorScroll) {
	               $scope.gotoBottom = function() {
	                 // set the location.hash to the id of
	                 // the element you wish to scroll to.
	                 $location.hash('bottom');
	
	                 // call $anchorScroll()
	                 $anchorScroll();
	               };
	             }]);
	       </file>
	       <file name="style.css">
	         #scrollArea {
	           height: 280px;
	           overflow: auto;
	         }
	
	         #bottom {
	           display: block;
	           margin-top: 2000px;
	         }
	       </file>
	     </example>
	   *
	   * <hr />
	   * The example below illustrates the use of a vertical scroll-offset (specified as a fixed value).
	   * See {@link ng.$anchorScroll#yOffset $anchorScroll.yOffset} for more details.
	   *
	   * @example
	     <example module="anchorScrollOffsetExample">
	       <file name="index.html">
	         <div class="fixed-header" ng-controller="headerCtrl">
	           <a href="" ng-click="gotoAnchor(x)" ng-repeat="x in [1,2,3,4,5]">
	             Go to anchor {{x}}
	           </a>
	         </div>
	         <div id="anchor{{x}}" class="anchor" ng-repeat="x in [1,2,3,4,5]">
	           Anchor {{x}} of 5
	         </div>
	       </file>
	       <file name="script.js">
	         angular.module('anchorScrollOffsetExample', [])
	           .run(['$anchorScroll', function($anchorScroll) {
	             $anchorScroll.yOffset = 50;   // always scroll by 50 extra pixels
	           }])
	           .controller('headerCtrl', ['$anchorScroll', '$location', '$scope',
	             function ($anchorScroll, $location, $scope) {
	               $scope.gotoAnchor = function(x) {
	                 var newHash = 'anchor' + x;
	                 if ($location.hash() !== newHash) {
	                   // set the $location.hash to `newHash` and
	                   // $anchorScroll will automatically scroll to it
	                   $location.hash('anchor' + x);
	                 } else {
	                   // call $anchorScroll() explicitly,
	                   // since $location.hash hasn't changed
	                   $anchorScroll();
	                 }
	               };
	             }
	           ]);
	       </file>
	       <file name="style.css">
	         body {
	           padding-top: 50px;
	         }
	
	         .anchor {
	           border: 2px dashed DarkOrchid;
	           padding: 10px 10px 200px 10px;
	         }
	
	         .fixed-header {
	           background-color: rgba(0, 0, 0, 0.2);
	           height: 50px;
	           position: fixed;
	           top: 0; left: 0; right: 0;
	         }
	
	         .fixed-header > a {
	           display: inline-block;
	           margin: 5px 15px;
	         }
	       </file>
	     </example>
	   */
this.$get=["$window","$location","$rootScope",function(e,n,r){
// Helper function to get first anchor from a NodeList
// (using `Array#some()` instead of `angular#forEach()` since it's more performant
//  and working in all supported browsers.)
function i(t){var e=null;return Array.prototype.some.call(t,function(t){if("a"===L(t))return e=t,!0}),e}function o(){var t=u.yOffset;if(S(t))t=t();else if(M(t)){var n=t[0],r=e.getComputedStyle(n);t="fixed"!==r.position?0:n.getBoundingClientRect().bottom}else _(t)||(t=0);return t}function a(t){if(t){t.scrollIntoView();var n=o();if(n){
// `offset` is the number of pixels we should scroll UP in order to align `elem` properly.
// This is true ONLY if the call to `elem.scrollIntoView()` initially aligns `elem` at the
// top of the viewport.
//
// IF the number of pixels from the top of `elem` to the end of the page's content is less
// than the height of the viewport, then `elem.scrollIntoView()` will align the `elem` some
// way down the page.
//
// This is often the case for elements near the bottom of the page.
//
// In such cases we do not need to scroll the whole `offset` up, just the difference between
// the top of the element and the offset, which is enough to align the top of `elem` at the
// desired position.
var r=t.getBoundingClientRect().top;e.scrollBy(0,r-n)}}else e.scrollTo(0,0)}function u(t){t=x(t)?t:n.hash();var e;
// empty hash, scroll to the top of the page
t?(e=s.getElementById(t))?a(e):(e=i(s.getElementsByName(t)))?a(e):"top"===t&&a(null):a(null)}var s=e.document;
// does not scroll when user clicks on anchor link that is currently on
// (no url change, no $location.hash() change), browser native does scroll
return t&&r.$watch(function(){return n.hash()},function(t,e){
// skip the initial scroll if $location.hash is empty
t===e&&""===t||Wt(function(){r.$evalAsync(u)})}),u}]}function oe(t,e){return t||e?t?e?(Gr(t)&&(t=t.join(" ")),Gr(e)&&(e=e.join(" ")),t+" "+e):t:e:""}function ae(t){for(var e=0;e<t.length;e++){var n=t[e];if(n.nodeType===Mi)return n}}function ue(t){x(t)&&(t=t.split(" "));
// Use createMap() to prevent class assumptions involving property names in
// Object.prototype
var e=gt();return i(t,function(t){
// sometimes the split leaves empty string values
// incase extra spaces were applied to the options
t.length&&(e[t]=!0)}),e}
// if any other type of options value besides an Object value is
// passed into the $animate.method() animation then this helper code
// will be run which will ignore it. While this patch is not the
// greatest solution to this, a lot of existing plugins depend on
// $animate to either call the callback (< 1.2) or return a promise
// that can be changed. This helper function ensures that the options
// are wiped clean incase a callback function is provided.
function se(t){return b(t)?t:{}}/* global stripHash: true */
/**
	 * ! This is a private undocumented service !
	 *
	 * @name $browser
	 * @requires $log
	 * @description
	 * This object has two goals:
	 *
	 * - hide all the global state in the browser caused by the window object
	 * - abstract away all the browser specific features and inconsistencies
	 *
	 * For tests we provide {@link ngMock.$browser mock implementation} of the `$browser`
	 * service, which can be used for convenient testing of the application without the interaction with
	 * the real browser apis.
	 */
/**
	 * @param {object} window The global window object.
	 * @param {object} document jQuery wrapped document.
	 * @param {object} $log window.console or an object with the same interface.
	 * @param {object} $sniffer $sniffer service
	 */
function ce(t,e,n,r){/**
	   * Executes the `fn` function(supports currying) and decrements the `outstandingRequestCallbacks`
	   * counter. If the counter reaches 0, all the `outstandingRequestCallbacks` are executed.
	   */
function o(t){try{t.apply(null,B(arguments,1))}finally{if(m--,0===m)for(;$.length;)try{$.pop()()}catch(e){n.error(e)}}}function a(t){var e=t.indexOf("#");return e===-1?"":t.substr(e)}function u(){C=null,s(),c()}function s(){
// This should be the only place in $browser where `history.state` is read.
b=S(),b=y(b)?null:b,
// Prevent callbacks fo fire twice if both hashchange & popstate were fired.
V(b,k)&&(b=k),k=b}function c(){x===l.url()&&w===b||(x=l.url(),w=b,i(A,function(t){t(l.url(),b)}))}var l=this,f=t.location,h=t.history,p=t.setTimeout,v=t.clearTimeout,g={};l.isMock=!1;var m=0,$=[];
// TODO(vojta): remove this temporary api
l.$$completeOutstandingRequest=o,l.$$incOutstandingRequestCount=function(){m++},/**
	   * @private
	   * Note: this method is used only by scenario runner
	   * TODO(vojta): prefix this method with $$ ?
	   * @param {function()} callback Function that will be called when no outstanding request
	   */
l.notifyWhenNoOutstandingRequests=function(t){0===m?t():$.push(t)};
//////////////////////////////////////////////////////////////
// URL API
//////////////////////////////////////////////////////////////
var b,w,x=f.href,_=e.find("base"),C=null,S=r.history?function(){try{return h.state}catch(t){}}:d;s(),w=b,/**
	   * @name $browser#url
	   *
	   * @description
	   * GETTER:
	   * Without any argument, this method just returns current value of location.href.
	   *
	   * SETTER:
	   * With at least one argument, this method sets url to new value.
	   * If html5 history api supported, pushState/replaceState is used, otherwise
	   * location.href/location.replace is used.
	   * Returns its own instance to allow chaining
	   *
	   * NOTE: this api is intended for use only by the $location service. Please use the
	   * {@link ng.$location $location service} to change url.
	   *
	   * @param {string} url New url (when used as setter)
	   * @param {boolean=} replace Should new url replace current history record?
	   * @param {object=} state object to use with pushState/replaceState
	   */
l.url=function(e,n,i){
// setter
if(
// In modern browsers `history.state` is `null` by default; treating it separately
// from `undefined` would cause `$browser.url('/foo')` to change `history.state`
// to undefined via `pushState`. Instead, let's change `undefined` to `null` here.
y(i)&&(i=null),
// Android Browser BFCache causes location, history reference to become stale.
f!==t.location&&(f=t.location),h!==t.history&&(h=t.history),e){var o=w===i;
// Don't change anything if previous and current URLs and states match. This also prevents
// IE<10 from getting into redirect loop when in LocationHashbangInHtml5Url mode.
// See https://github.com/angular/angular.js/commit/ffb2701
if(x===e&&(!r.history||o))return l;var u=x&&Ve(x)===Ve(e);
// Don't use history API if only the hash changed
// due to a bug in IE10/IE11 which leads
// to not firing a `hashchange` nor `popstate` event
// in some cases (see #9143).
// Do the assignment again so that those two variables are referentially identical.
return x=e,w=i,!r.history||u&&o?(u&&!C||(C=e),n?f.replace(e):u?f.hash=a(e):f.href=e,f.href!==e&&(C=e)):(h[n?"replaceState":"pushState"](i,"",e),s(),w=b),l}
// - pendingLocation is needed as browsers don't allow to read out
//   the new location.href if a reload happened or if there is a bug like in iOS 9 (see
//   https://openradar.appspot.com/22186109).
// - the replacement is a workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=407172
return C||f.href.replace(/%27/g,"'")},/**
	   * @name $browser#state
	   *
	   * @description
	   * This method is a getter.
	   *
	   * Return history.state or null if history.state is undefined.
	   *
	   * @returns {object} state
	   */
l.state=function(){return b};var A=[],E=!1,k=null;/**
	   * @name $browser#onUrlChange
	   *
	   * @description
	   * Register callback function that will be called, when url changes.
	   *
	   * It's only called when the url is changed from outside of angular:
	   * - user types different url into address bar
	   * - user clicks on history (forward/back) button
	   * - user clicks on a link
	   *
	   * It's not called when url is changed by $browser.url() method
	   *
	   * The listener gets called with new url as parameter.
	   *
	   * NOTE: this api is intended for use only by the $location service. Please use the
	   * {@link ng.$location $location service} to monitor url changes in angular apps.
	   *
	   * @param {function(string)} listener Listener function to be called when url changes.
	   * @return {function(string)} Returns the registered listener fn - handy if the fn is anonymous.
	   */
l.onUrlChange=function(e){
// TODO(vojta): refactor to use node's syntax for events
// We listen on both (hashchange/popstate) when available, as some browsers (e.g. Opera)
// don't fire popstate when user change the address bar and don't fire hashchange when url
// changed by push/replaceState
// html5 history api - popstate event
// hashchange event
return E||(r.history&&Mr(t).on("popstate",u),Mr(t).on("hashchange",u),E=!0),A.push(e),e},/**
	   * @private
	   * Remove popstate and hashchange handler from window.
	   *
	   * NOTE: this api is intended for use only by $rootScope.
	   */
l.$$applicationDestroyed=function(){Mr(t).off("hashchange popstate",u)},/**
	   * Checks whether the url has changed outside of Angular.
	   * Needs to be exported to be able to check for changes that have been done in sync,
	   * as hashchange/popstate events fire in async.
	   */
l.$$checkUrlChange=c,
//////////////////////////////////////////////////////////////
// Misc API
//////////////////////////////////////////////////////////////
/**
	   * @name $browser#baseHref
	   *
	   * @description
	   * Returns current <base href>
	   * (always relative - without domain)
	   *
	   * @returns {string} The current base href
	   */
l.baseHref=function(){var t=_.attr("href");return t?t.replace(/^(https?\:)?\/\/[^\/]*/,""):""},/**
	   * @name $browser#defer
	   * @param {function()} fn A function, who's execution should be deferred.
	   * @param {number=} [delay=0] of milliseconds to defer the function execution.
	   * @returns {*} DeferId that can be used to cancel the task via `$browser.defer.cancel()`.
	   *
	   * @description
	   * Executes a fn asynchronously via `setTimeout(fn, delay)`.
	   *
	   * Unlike when calling `setTimeout` directly, in test this function is mocked and instead of using
	   * `setTimeout` in tests, the fns are queued in an array, which can be programmatically flushed
	   * via `$browser.defer.flush()`.
	   *
	   */
l.defer=function(t,e){var n;return m++,n=p(function(){delete g[n],o(t)},e||0),g[n]=!0,n},/**
	   * @name $browser#defer.cancel
	   *
	   * @description
	   * Cancels a deferred task identified with `deferId`.
	   *
	   * @param {*} deferId Token returned by the `$browser.defer` function.
	   * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully
	   *                    canceled.
	   */
l.defer.cancel=function(t){return!!g[t]&&(delete g[t],v(t),o(d),!0)}}function le(){this.$get=["$window","$log","$sniffer","$document",function(t,e,n,r){return new ce(t,r,e,n)}]}/**
	 * @ngdoc service
	 * @name $cacheFactory
	 *
	 * @description
	 * Factory that constructs {@link $cacheFactory.Cache Cache} objects and gives access to
	 * them.
	 *
	 * ```js
	 *
	 *  var cache = $cacheFactory('cacheId');
	 *  expect($cacheFactory.get('cacheId')).toBe(cache);
	 *  expect($cacheFactory.get('noSuchCacheId')).not.toBeDefined();
	 *
	 *  cache.put("key", "value");
	 *  cache.put("another key", "another value");
	 *
	 *  // We've specified no options on creation
	 *  expect(cache.info()).toEqual({id: 'cacheId', size: 2});
	 *
	 * ```
	 *
	 *
	 * @param {string} cacheId Name or id of the newly created cache.
	 * @param {object=} options Options object that specifies the cache behavior. Properties:
	 *
	 *   - `{number=}` `capacity` — turns the cache into LRU cache.
	 *
	 * @returns {object} Newly created cache object with the following set of methods:
	 *
	 * - `{object}` `info()` — Returns id, size, and options of cache.
	 * - `{{*}}` `put({string} key, {*} value)` — Puts a new key-value pair into the cache and returns
	 *   it.
	 * - `{{*}}` `get({string} key)` — Returns cached value for `key` or undefined for cache miss.
	 * - `{void}` `remove({string} key)` — Removes a key-value pair from the cache.
	 * - `{void}` `removeAll()` — Removes all cached values.
	 * - `{void}` `destroy()` — Removes references to this cache from $cacheFactory.
	 *
	 * @example
	   <example module="cacheExampleApp">
	     <file name="index.html">
	       <div ng-controller="CacheController">
	         <input ng-model="newCacheKey" placeholder="Key">
	         <input ng-model="newCacheValue" placeholder="Value">
	         <button ng-click="put(newCacheKey, newCacheValue)">Cache</button>
	
	         <p ng-if="keys.length">Cached Values</p>
	         <div ng-repeat="key in keys">
	           <span ng-bind="key"></span>
	           <span>: </span>
	           <b ng-bind="cache.get(key)"></b>
	         </div>
	
	         <p>Cache Info</p>
	         <div ng-repeat="(key, value) in cache.info()">
	           <span ng-bind="key"></span>
	           <span>: </span>
	           <b ng-bind="value"></b>
	         </div>
	       </div>
	     </file>
	     <file name="script.js">
	       angular.module('cacheExampleApp', []).
	         controller('CacheController', ['$scope', '$cacheFactory', function($scope, $cacheFactory) {
	           $scope.keys = [];
	           $scope.cache = $cacheFactory('cacheId');
	           $scope.put = function(key, value) {
	             if (angular.isUndefined($scope.cache.get(key))) {
	               $scope.keys.push(key);
	             }
	             $scope.cache.put(key, angular.isUndefined(value) ? null : value);
	           };
	         }]);
	     </file>
	     <file name="style.css">
	       p {
	         margin: 10px 0 3px;
	       }
	     </file>
	   </example>
	 */
function fe(){this.$get=function(){function t(t,r){/**
	       * makes the `entry` the freshEnd of the LRU linked list
	       */
function i(t){t!=h&&(p?p==t&&(p=t.n):p=t,o(t.n,t.p),o(t,h),h=t,h.n=null)}/**
	       * bidirectionally links two entries of the LRU linked list
	       */
function o(t,e){t!=e&&(t&&(t.p=e),//p stands for previous, 'prev' didn't minify
e&&(e.n=t))}if(t in e)throw n("$cacheFactory")("iid","CacheId '{0}' is already taken!",t);var a=0,u=l({},r,{id:t}),s=gt(),c=r&&r.capacity||Number.MAX_VALUE,f=gt(),h=null,p=null;/**
	       * @ngdoc type
	       * @name $cacheFactory.Cache
	       *
	       * @description
	       * A cache object used to store and retrieve data, primarily used by
	       * {@link $http $http} and the {@link ng.directive:script script} directive to cache
	       * templates and other data.
	       *
	       * ```js
	       *  angular.module('superCache')
	       *    .factory('superCache', ['$cacheFactory', function($cacheFactory) {
	       *      return $cacheFactory('super-cache');
	       *    }]);
	       * ```
	       *
	       * Example test:
	       *
	       * ```js
	       *  it('should behave like a cache', inject(function(superCache) {
	       *    superCache.put('key', 'value');
	       *    superCache.put('another key', 'another value');
	       *
	       *    expect(superCache.info()).toEqual({
	       *      id: 'super-cache',
	       *      size: 2
	       *    });
	       *
	       *    superCache.remove('another key');
	       *    expect(superCache.get('another key')).toBeUndefined();
	       *
	       *    superCache.removeAll();
	       *    expect(superCache.info()).toEqual({
	       *      id: 'super-cache',
	       *      size: 0
	       *    });
	       *  }));
	       * ```
	       */
return e[t]={/**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#put
	         * @kind function
	         *
	         * @description
	         * Inserts a named entry into the {@link $cacheFactory.Cache Cache} object to be
	         * retrieved later, and incrementing the size of the cache if the key was not already
	         * present in the cache. If behaving like an LRU cache, it will also remove stale
	         * entries from the set.
	         *
	         * It will not insert undefined values into the cache.
	         *
	         * @param {string} key the key under which the cached data is stored.
	         * @param {*} value the value to store alongside the key. If it is undefined, the key
	         *    will not be stored.
	         * @returns {*} the value stored.
	         */
put:function(t,e){if(!y(e)){if(c<Number.MAX_VALUE){var n=f[t]||(f[t]={key:t});i(n)}return t in s||a++,s[t]=e,a>c&&this.remove(p.key),e}},/**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#get
	         * @kind function
	         *
	         * @description
	         * Retrieves named data stored in the {@link $cacheFactory.Cache Cache} object.
	         *
	         * @param {string} key the key of the data to be retrieved
	         * @returns {*} the value stored.
	         */
get:function(t){if(c<Number.MAX_VALUE){var e=f[t];if(!e)return;i(e)}return s[t]},/**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#remove
	         * @kind function
	         *
	         * @description
	         * Removes an entry from the {@link $cacheFactory.Cache Cache} object.
	         *
	         * @param {string} key the key of the entry to be removed
	         */
remove:function(t){if(c<Number.MAX_VALUE){var e=f[t];if(!e)return;e==h&&(h=e.p),e==p&&(p=e.n),o(e.n,e.p),delete f[t]}t in s&&(delete s[t],a--)},/**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#removeAll
	         * @kind function
	         *
	         * @description
	         * Clears the cache object of any entries.
	         */
removeAll:function(){s=gt(),a=0,f=gt(),h=p=null},/**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#destroy
	         * @kind function
	         *
	         * @description
	         * Destroys the {@link $cacheFactory.Cache Cache} object entirely,
	         * removing it from the {@link $cacheFactory $cacheFactory} set.
	         */
destroy:function(){s=null,u=null,f=null,delete e[t]},/**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#info
	         * @kind function
	         *
	         * @description
	         * Retrieve information regarding a particular {@link $cacheFactory.Cache Cache}.
	         *
	         * @returns {object} an object with the following properties:
	         *   <ul>
	         *     <li>**id**: the id of the cache instance</li>
	         *     <li>**size**: the number of entries kept in the cache instance</li>
	         *     <li>**...**: any additional properties from the options object when creating the
	         *       cache.</li>
	         *   </ul>
	         */
info:function(){return l({},u,{size:a})}}}var e={};/**
	   * @ngdoc method
	   * @name $cacheFactory#info
	   *
	   * @description
	   * Get information about all the caches that have been created
	   *
	   * @returns {Object} - key-value map of `cacheId` to the result of calling `cache#info`
	   */
/**
	   * @ngdoc method
	   * @name $cacheFactory#get
	   *
	   * @description
	   * Get access to a cache object by the `cacheId` used when it was created.
	   *
	   * @param {string} cacheId Name or id of a cache to access.
	   * @returns {object} Cache object identified by the cacheId or undefined if no such cache.
	   */
return t.info=function(){var t={};return i(e,function(e,n){t[n]=e.info()}),t},t.get=function(t){return e[t]},t}}/**
	 * @ngdoc service
	 * @name $templateCache
	 *
	 * @description
	 * The first time a template is used, it is loaded in the template cache for quick retrieval. You
	 * can load templates directly into the cache in a `script` tag, or by consuming the
	 * `$templateCache` service directly.
	 *
	 * Adding via the `script` tag:
	 *
	 * ```html
	 *   <script type="text/ng-template" id="templateId.html">
	 *     <p>This is the content of the template</p>
	 *   </script>
	 * ```
	 *
	 * **Note:** the `script` tag containing the template does not need to be included in the `head` of
	 * the document, but it must be a descendent of the {@link ng.$rootElement $rootElement} (IE,
	 * element with ng-app attribute), otherwise the template will be ignored.
	 *
	 * Adding via the `$templateCache` service:
	 *
	 * ```js
	 * var myApp = angular.module('myApp', []);
	 * myApp.run(function($templateCache) {
	 *   $templateCache.put('templateId.html', 'This is the content of the template');
	 * });
	 * ```
	 *
	 * To retrieve the template later, simply use it in your HTML:
	 * ```html
	 * <div ng-include=" 'templateId.html' "></div>
	 * ```
	 *
	 * or get it via Javascript:
	 * ```js
	 * $templateCache.get('templateId.html')
	 * ```
	 *
	 * See {@link ng.$cacheFactory $cacheFactory}.
	 *
	 */
function he(){this.$get=["$cacheFactory",function(t){return t("templates")}]}function pe(){}function de(t,n){function r(t,e,n){var r=/^\s*([@&<]|=(\*?))(\??)\s*(\w*)\s*$/,o=gt();return i(t,function(t,i){if(t in C)return void(o[i]=C[t]);var a=t.match(r);if(!a)throw Bi("iscp","Invalid {3} for directive '{0}'. Definition: {... {1}: '{2}' ...}",e,i,t,n?"controller bindings definition":"isolate scope definition");o[i]={mode:a[1][0],collection:"*"===a[2],optional:"?"===a[3],attrName:a[4]||i},a[4]&&(C[t]=o[i])}),o}function o(t,e){var n={isolateScope:null,bindToController:null};if(b(t.scope)&&(t.bindToController===!0?(n.bindToController=r(t.scope,e,!0),n.isolateScope={}):n.isolateScope=r(t.scope,e,!1)),b(t.bindToController)&&(n.bindToController=r(t.bindToController,e,!0)),b(n.bindToController)){var i=t.controller,o=t.controllerAs;if(!i)
// There is no controller, there may or may not be a controllerAs property
throw Bi("noctrl","Cannot bind to controller without directive '{0}'s controller.",e);if(!$e(i,o))
// There is a controller, but no identifier or controllerAs property
throw Bi("noident","Cannot bind to controller without identifier for directive '{0}'.",e)}return n}function u(t){var e=t.charAt(0);if(!e||e!==Rr(e))throw Bi("baddir","Directive/Component name '{0}' is invalid. The first character must be a lowercase letter",t);if(t!==t.trim())throw Bi("baddir","Directive/Component name '{0}' is invalid. The name should not contain leading or trailing whitespaces",t)}var s={},c="Directive",f=/^\s*directive\:\s*([\w\-]+)\s+(.*)$/,h=/(([\w\-]+)(?:\:([^;]+))?;?)/,m=I("ngSrc,ngSrcset,src,srcset"),w=/^(?:(\^\^?)?(\?)?(\^\^?)?)?/,_=/^(on[a-z]+|formaction)$/,C=gt();/**
	   * @ngdoc method
	   * @name $compileProvider#directive
	   * @kind function
	   *
	   * @description
	   * Register a new directive with the compiler.
	   *
	   * @param {string|Object} name Name of the directive in camel-case (i.e. <code>ngBind</code> which
	   *    will match as <code>ng-bind</code>), or an object map of directives where the keys are the
	   *    names and the values are the factories.
	   * @param {Function|Array} directiveFactory An injectable directive factory function. See the
	   *    {@link guide/directive directive guide} and the {@link $compile compile API} for more info.
	   * @returns {ng.$compileProvider} Self for chaining.
	   */
this.directive=function T(e,n){return pt(e,"directive"),x(e)?(u(e),ft(n,"directiveFactory"),s.hasOwnProperty(e)||(s[e]=[],t.factory(e+c,["$injector","$exceptionHandler",function(t,n){var r=[];return i(s[e],function(i,o){try{var a=t.invoke(i);S(a)?a={compile:g(a)}:!a.compile&&a.link&&(a.compile=g(a.link)),a.priority=a.priority||0,a.index=o,a.name=a.name||e,a.require=a.require||a.controller&&a.name,a.restrict=a.restrict||"EA",a.$$moduleName=i.$$moduleName,r.push(a)}catch(u){n(u)}}),r}])),s[e].push(n)):i(e,a(T)),this},/**
	   * @ngdoc method
	   * @name $compileProvider#component
	   * @module ng
	   * @param {string} name Name of the component in camelCase (i.e. `myComp` which will match `<my-comp>`)
	   * @param {Object} options Component definition object (a simplified
	   *    {@link ng.$compile#directive-definition-object directive definition object}),
	   *    with the following properties (all optional):
	   *
	   *    - `controller` – `{(string|function()=}` – controller constructor function that should be
	   *      associated with newly created scope or the name of a {@link ng.$compile#-controller-
	   *      registered controller} if passed as a string. An empty `noop` function by default.
	   *    - `controllerAs` – `{string=}` – identifier name for to reference the controller in the component's scope.
	   *      If present, the controller will be published to scope under the `controllerAs` name.
	   *      If not present, this will default to be `$ctrl`.
	   *    - `template` – `{string=|function()=}` – html template as a string or a function that
	   *      returns an html template as a string which should be used as the contents of this component.
	   *      Empty string by default.
	   *
	   *      If `template` is a function, then it is {@link auto.$injector#invoke injected} with
	   *      the following locals:
	   *
	   *      - `$element` - Current element
	   *      - `$attrs` - Current attributes object for the element
	   *
	   *    - `templateUrl` – `{string=|function()=}` – path or function that returns a path to an html
	   *      template that should be used  as the contents of this component.
	   *
	   *      If `templateUrl` is a function, then it is {@link auto.$injector#invoke injected} with
	   *      the following locals:
	   *
	   *      - `$element` - Current element
	   *      - `$attrs` - Current attributes object for the element
	   *
	   *    - `bindings` – `{object=}` – defines bindings between DOM attributes and component properties.
	   *      Component properties are always bound to the component controller and not to the scope.
	   *      See {@link ng.$compile#-bindtocontroller- `bindToController`}.
	   *    - `transclude` – `{boolean=}` – whether {@link $compile#transclusion content transclusion} is enabled.
	   *      Disabled by default.
	   *    - `require` - `{Object<string, string>=}` - requires the controllers of other directives and binds them to
	   *      this component's controller. The object keys specify the property names under which the required
	   *      controllers (object values) will be bound. See {@link ng.$compile#-require- `require`}.
	   *    - `$...` – additional properties to attach to the directive factory function and the controller
	   *      constructor function. (This is used by the component router to annotate)
	   *
	   * @returns {ng.$compileProvider} the compile provider itself, for chaining of function calls.
	   * @description
	   * Register a **component definition** with the compiler. This is a shorthand for registering a special
	   * type of directive, which represents a self-contained UI component in your application. Such components
	   * are always isolated (i.e. `scope: {}`) and are always restricted to elements (i.e. `restrict: 'E'`).
	   *
	   * Component definitions are very simple and do not require as much configuration as defining general
	   * directives. Component definitions usually consist only of a template and a controller backing it.
	   *
	   * In order to make the definition easier, components enforce best practices like use of `controllerAs`,
	   * `bindToController`. They always have **isolate scope** and are restricted to elements.
	   *
	   * Here are a few examples of how you would usually define components:
	   *
	   * ```js
	   *   var myMod = angular.module(...);
	   *   myMod.component('myComp', {
	   *     template: '<div>My name is {{$ctrl.name}}</div>',
	   *     controller: function() {
	   *       this.name = 'shahar';
	   *     }
	   *   });
	   *
	   *   myMod.component('myComp', {
	   *     template: '<div>My name is {{$ctrl.name}}</div>',
	   *     bindings: {name: '@'}
	   *   });
	   *
	   *   myMod.component('myComp', {
	   *     templateUrl: 'views/my-comp.html',
	   *     controller: 'MyCtrl',
	   *     controllerAs: 'ctrl',
	   *     bindings: {name: '@'}
	   *   });
	   *
	   * ```
	   * For more examples, and an in-depth guide, see the {@link guide/component component guide}.
	   *
	   * <br />
	   * See also {@link ng.$compileProvider#directive $compileProvider.directive()}.
	   */
this.component=function(t,e){function n(t){function n(e){return S(e)||Gr(e)?function(n,r){return t.invoke(e,this,{$element:n,$attrs:r})}:e}var o=e.template||e.templateUrl?e.template:"",a={controller:r,controllerAs:$e(e.controller)||e.controllerAs||"$ctrl",template:n(o),templateUrl:n(e.templateUrl),transclude:e.transclude,scope:{},bindToController:e.bindings||{},restrict:"E",require:e.require};
// Copy annotations (starting with $) over to the DDO
return i(e,function(t,e){"$"===e.charAt(0)&&(a[e]=t)}),a}var r=e.controller||function(){};
// TODO(pete) remove the following `forEach` before we release 1.6.0
// The component-router@0.2.0 looks for the annotations on the controller constructor
// Nothing in Angular looks for annotations on the factory function but we can't remove
// it from 1.5.x yet.
// Copy any annotation properties (starting with $) over to the factory and controller constructor functions
// These could be used by libraries such as the new component router
return i(e,function(t,e){"$"===e.charAt(0)&&(n[e]=t,
// Don't try to copy over annotations to named controller
S(r)&&(r[e]=t))}),n.$inject=["$injector"],this.directive(t,n)},/**
	   * @ngdoc method
	   * @name $compileProvider#aHrefSanitizationWhitelist
	   * @kind function
	   *
	   * @description
	   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
	   * urls during a[href] sanitization.
	   *
	   * The sanitization is a security measure aimed at preventing XSS attacks via html links.
	   *
	   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into
	   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`
	   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
	   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
	   *
	   * @param {RegExp=} regexp New regexp to whitelist urls with.
	   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
	   *    chaining otherwise.
	   */
this.aHrefSanitizationWhitelist=function(t){return $(t)?(n.aHrefSanitizationWhitelist(t),this):n.aHrefSanitizationWhitelist()},/**
	   * @ngdoc method
	   * @name $compileProvider#imgSrcSanitizationWhitelist
	   * @kind function
	   *
	   * @description
	   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
	   * urls during img[src] sanitization.
	   *
	   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
	   *
	   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into
	   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`
	   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
	   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
	   *
	   * @param {RegExp=} regexp New regexp to whitelist urls with.
	   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
	   *    chaining otherwise.
	   */
this.imgSrcSanitizationWhitelist=function(t){return $(t)?(n.imgSrcSanitizationWhitelist(t),this):n.imgSrcSanitizationWhitelist()};/**
	   * @ngdoc method
	   * @name  $compileProvider#debugInfoEnabled
	   *
	   * @param {boolean=} enabled update the debugInfoEnabled state if provided, otherwise just return the
	   * current debugInfoEnabled state
	   * @returns {*} current value if used as getter or itself (chaining) if used as setter
	   *
	   * @kind function
	   *
	   * @description
	   * Call this method to enable/disable various debug runtime information in the compiler such as adding
	   * binding information and a reference to the current scope on to DOM elements.
	   * If enabled, the compiler will add the following to DOM elements that have been bound to the scope
	   * * `ng-binding` CSS class
	   * * `$binding` data property containing an array of the binding expressions
	   *
	   * You may want to disable this in production for a significant performance boost. See
	   * {@link guide/production#disabling-debug-data Disabling Debug Data} for more.
	   *
	   * The default value is true.
	   */
var A=!0;this.debugInfoEnabled=function(t){return $(t)?(A=t,this):A};var E=10;/**
	   * @ngdoc method
	   * @name $compileProvider#onChangesTtl
	   * @description
	   *
	   * Sets the number of times `$onChanges` hooks can trigger new changes before giving up and
	   * assuming that the model is unstable.
	   *
	   * The current default is 10 iterations.
	   *
	   * In complex applications it's possible that dependencies between `$onChanges` hooks and bindings will result
	   * in several iterations of calls to these hooks. However if an application needs more than the default 10
	   * iterations to stabilize then you should investigate what is causing the model to continuously change during
	   * the `$onChanges` hook execution.
	   *
	   * Increasing the TTL could have performance implications, so you should not change it without proper justification.
	   *
	   * @param {number} limit The number of `$onChanges` hook iterations.
	   * @returns {number|object} the current limit (or `this` if called as a setter for chaining)
	   */
this.onChangesTtl=function(t){return arguments.length?(E=t,this):E},this.$get=["$injector","$interpolate","$exceptionHandler","$templateRequest","$parse","$controller","$rootScope","$sce","$animate","$$sanitizeUri",function(t,n,r,a,u,g,$,C,T,O){
// This function is called in a $$postDigest to trigger all the onChanges hooks in a single digest
function R(){try{if(!--$t)
// We have hit the TTL limit so reset everything
throw vt=void 0,Bi("infchng","{0} $onChanges() iterations reached. Aborting!\n",E);
// We must run this hook in an apply since the $$postDigest runs outside apply
$.$apply(function(){for(var t=0,e=vt.length;t<e;++t)vt[t]();
// Reset the queue to trigger a new schedule next time there is a change
vt=void 0})}finally{$t++}}function N(t,e){if(e){var n,r,i,o=Object.keys(e);for(n=0,r=o.length;n<r;n++)i=o[n],this[i]=e[i]}else this.$attr={};this.$$element=t}function P(t,e,n){
// Attributes names that do not start with letters (such as `(click)`) cannot be set using `setAttribute`
// so we have to jump through some hoops to get such an attribute
// https://github.com/angular/angular.js/pull/13318
yt.innerHTML="<span "+e+">";var r=yt.firstChild.attributes,i=r[0];
// We have to remove the attribute from its container element before we can add it to the destination element
r.removeNamedItem(i.name),i.value=n,t.attributes.setNamedItem(i)}function D(t,e){try{t.addClass(e)}catch(n){}}
//================================
function M(t,n,r,i,o){t instanceof Mr||(
// jquery always rewraps, whereas we need to preserve the original selector so that we can
// modify it.
t=Mr(t));
// We can not compile top level text elements since text nodes can be merged and we will
// not be able to attach scope data to them, so we will wrap them in <span>
for(var a=/\S+/,u=0,s=t.length;u<s;u++){var c=t[u];c.nodeType===oi&&c.nodeValue.match(a)&&Tt(c,t[u]=e.document.createElement("span"))}var l=U(t,n,t,r,i,o);M.$$addScopeClass(t);var f=null;return function(e,n,r){ft(e,"scope"),o&&o.needsNewScope&&(
// A parent directive did a replace and a directive on this element asked
// for transclusion, which caused us to lose a layer of element on which
// we could hold the new transclusion scope, so we will create it manually
// here.
e=e.$parent.$new()),r=r||{};var i=r.parentBoundTranscludeFn,a=r.transcludeControllers,u=r.futureParentElement;
// When `parentBoundTranscludeFn` is passed, it is a
// `controllersBoundTransclude` function (it was previously passed
// as `transclude` to directive.link) so we must unwrap it to get
// its `boundTranscludeFn`
i&&i.$$boundTransclude&&(i=i.$$boundTransclude),f||(f=I(u));var s;if(
// When using a directive with replace:true and templateUrl the $compileNodes
// (or a child element inside of them)
// might change, so we need to recreate the namespace adapted compileNodes
// for call to the link function.
// Note: This will already clone the nodes...
s="html"!==f?Mr(at(f,Mr("<div>").append(t).html())):n?Ci.clone.call(t):t,a)for(var c in a)s.data("$"+c+"Controller",a[c].instance);return M.$$addScopeInfo(s,e),n&&n(s,e),l&&l(e,s,s,i),s}}function I(t){
// TODO: Make this detect MathML as well...
var e=t&&t[0];return e&&"foreignobject"!==L(e)&&Vr.call(e).match(/SVG/)?"svg":"html"}/**
	     * Compile function matches each node in nodeList against the directives. Once all directives
	     * for a particular node are collected their compile functions are executed. The compile
	     * functions return values - the linking functions - are combined into a composite linking
	     * function, which is the a linking function for the node.
	     *
	     * @param {NodeList} nodeList an array of nodes or NodeList to compile
	     * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the
	     *        scope argument is auto-generated to the new child of the transcluded parent scope.
	     * @param {DOMElement=} $rootElement If the nodeList is the root of the compilation tree then
	     *        the rootElement must be set the jqLite collection of the compile root. This is
	     *        needed so that the jqLite collection items can be replaced with widgets.
	     * @param {number=} maxPriority Max directive priority.
	     * @returns {Function} A composite linking function of all of the matched directives or null.
	     */
function U(t,e,n,r,i,o){function a(t,n,r,i){var o,a,u,s,c,l,f,h,v;if(p){
// copy nodeList so that if a nodeLinkFn removes or adds an element at this DOM level our
// offsets don't get screwed up
var g=n.length;
// create a sparse array by only copying the elements which have a linkFn
for(v=new Array(g),c=0;c<d.length;c+=3)f=d[c],v[f]=n[f]}else v=n;for(c=0,l=d.length;c<l;)u=v[d[c++]],o=d[c++],a=d[c++],o?(o.scope?(s=t.$new(),M.$$addScopeInfo(Mr(u),s)):s=t,h=o.transcludeOnThisElement?F(t,o.transclude,i):!o.templateOnThisElement&&i?i:!i&&e?F(t,e):null,o(a,s,u,r,h)):a&&a(t,u.childNodes,void 0,i)}for(var u,s,c,l,f,h,p,d=[],v=0;v<t.length;v++)u=new N,
// we must always refer to nodeList[i] since the nodes can be replaced underneath us.
s=H(t[v],[],u,0===v?r:void 0,i),c=s.length?X(s,t[v],u,e,n,null,[],[],o):null,c&&c.scope&&M.$$addScopeClass(u.$$element),f=c&&c.terminal||!(l=t[v].childNodes)||!l.length?null:U(l,c?(c.transcludeOnThisElement||!c.templateOnThisElement)&&c.transclude:e),(c||f)&&(d.push(v,c,f),h=!0,p=p||c),
//use the previous context only for the first element in the virtual group
o=null;
// return a linking function if we have found anything, null otherwise
return h?a:null}function F(t,e,n){function r(r,i,o,a,u){return r||(r=t.$new(!1,u),r.$$transcluded=!0),e(r,i,{parentBoundTranscludeFn:n,transcludeControllers:o,futureParentElement:a})}
// We need  to attach the transclusion slots onto the `boundTranscludeFn`
// so that they are available inside the `controllersBoundTransclude` function
var i=r.$$slots=gt();for(var o in e.$$slots)e.$$slots[o]?i[o]=F(t,e.$$slots[o],n):i[o]=null;return r}/**
	     * Looks for directives on the given node and adds them to the directive collection which is
	     * sorted.
	     *
	     * @param node Node to search.
	     * @param directives An array to which the directives are added to. This array is sorted before
	     *        the function returns.
	     * @param attrs The shared attrs object which is used to populate the normalized attributes.
	     * @param {number=} maxPriority Max directive priority.
	     */
function H(t,e,n,r,i){var o,a,u=t.nodeType,s=n.$attr;switch(u){case ri:/* Element */
// use the node name: <directive>
Q(e,ge(L(t)),"E",r,i);
// iterate over the attributes
for(var c,l,p,d,v,g,m=t.attributes,y=0,$=m&&m.length;y<$;y++){var w=!1,_=!1;c=m[y],l=c.name,v=Jr(c.value),
// support ngAttr attribute binding
d=ge(l),(g=Ct.test(d))&&(l=l.replace(zi,"").substr(8).replace(/_(.)/g,function(t,e){return e.toUpperCase()}));var C=d.match(St);C&&tt(C[1])&&(w=l,_=l.substr(0,l.length-5)+"end",l=l.substr(0,l.length-6)),p=ge(l.toLowerCase()),s[p]=l,!g&&n.hasOwnProperty(p)||(n[p]=v,zt(t,p)&&(n[p]=!0)),st(t,e,v,p,g),Q(e,p,"A",r,i,w,_)}if(
// use class as directive
a=t.className,b(a)&&(
// Maybe SVGAnimatedString
a=a.animVal),x(a)&&""!==a)for(;o=h.exec(a);)p=ge(o[2]),Q(e,p,"C",r,i)&&(n[p]=Jr(o[3])),a=a.substr(o.index+o[0].length);break;case oi:/* Text Node */
if(11===Dr)
// Workaround for #11781
for(;t.parentNode&&t.nextSibling&&t.nextSibling.nodeType===oi;)t.nodeValue=t.nodeValue+t.nextSibling.nodeValue,t.parentNode.removeChild(t.nextSibling);ot(e,t.nodeValue);break;case ai:/* Comment */
try{o=f.exec(t.nodeValue),o&&(p=ge(o[1]),Q(e,p,"M",r,i)&&(n[p]=Jr(o[2])))}catch(S){}}return e.sort(rt),e}/**
	     * Given a node with an directive-start it collects all of the siblings until it finds
	     * directive-end.
	     * @param node
	     * @param attrStart
	     * @param attrEnd
	     * @returns {*}
	     */
function W(t,e,n){var r=[],i=0;if(e&&t.hasAttribute&&t.hasAttribute(e)){do{if(!t)throw Bi("uterdir","Unterminated attribute, found '{0}' but no matching '{1}' found.",e,n);t.nodeType==ri&&(t.hasAttribute(e)&&i++,t.hasAttribute(n)&&i--),r.push(t),t=t.nextSibling}while(i>0)}else r.push(t);return Mr(r)}/**
	     * Wrapper for linking function which converts normal linking function into a grouped
	     * linking function.
	     * @param linkFn
	     * @param attrStart
	     * @param attrEnd
	     * @returns {Function}
	     */
function z(t,e,n){return function(r,i,o,a,u){return i=W(i[0],e,n),t(r,i,o,a,u)}}/**
	     * A function generator that is used to support both eager and lazy compilation
	     * linking function.
	     * @param eager
	     * @param $compileNodes
	     * @param transcludeFn
	     * @param maxPriority
	     * @param ignoreDirective
	     * @param previousCompileContext
	     * @returns {Function}
	     */
function G(t,e,n,r,i,o){var a;return t?M(e,n,r,i,o):function(){
// Null out all of these references in order to make them eligible for garbage collection
// since this is a potentially long lived closure
return a||(a=M(e,n,r,i,o),e=n=o=null),a.apply(this,arguments)}}/**
	     * Once the directives have been collected, their compile functions are executed. This method
	     * is responsible for inlining directive templates as well as terminating the application
	     * of the directives if the terminal directive has been reached.
	     *
	     * @param {Array} directives Array of collected directives to execute their compile function.
	     *        this needs to be pre-sorted by priority order.
	     * @param {Node} compileNode The raw DOM node to apply the compile functions to
	     * @param {Object} templateAttrs The shared attribute function
	     * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the
	     *                                                  scope argument is auto-generated to the new
	     *                                                  child of the transcluded parent scope.
	     * @param {JQLite} jqCollection If we are working on the root of the compile tree then this
	     *                              argument has the root jqLite array so that we can replace nodes
	     *                              on it.
	     * @param {Object=} originalReplaceDirective An optional directive that will be ignored when
	     *                                           compiling the transclusion.
	     * @param {Array.<Function>} preLinkFns
	     * @param {Array.<Function>} postLinkFns
	     * @param {Object} previousCompileContext Context used for previous compilation of the current
	     *                                        node
	     * @returns {Function} linkFn
	     */
function X(t,e,n,o,a,u,s,c,f){
////////////////////
function h(t,e,n,r){t&&(n&&(t=z(t,n,r)),t.require=d.require,t.directiveName=v,(C===d||d.$$isolateScope)&&(t=ht(t,{isolateScope:!0})),s.push(t)),e&&(n&&(e=z(e,n,r)),e.require=d.require,e.directiveName=v,(C===d||d.$$isolateScope)&&(e=ht(e,{isolateScope:!0})),c.push(e))}function p(t,r,o,a,u){
// This is the function that is injected as `$transclude`.
// Note: all arguments are optional!
function f(t,e,n,r){var i;if(
// No scope passed in:
k(t)||(r=n,n=e,e=t,t=void 0),R&&(i=m),n||(n=R?w.parent():w),!r)return u(t,e,i,n,L);
// slotTranscludeFn can be one of three things:
//  * a transclude function - a filled slot
//  * `null` - an optional slot that was not filled
//  * `undefined` - a slot that was not declared (i.e. invalid)
var o=u.$$slots[r];if(o)return o(t,e,i,n,L);if(y(o))throw Bi("noslot",'No parent directive that requires a transclusion with slot name "{0}". Element: {1}',r,Z(w))}var h,p,d,v,g,m,$,w,E,T;e===o?(E=n,w=n.$$element):(w=Mr(o),E=new N(w,n)),g=r,C?v=r.$new(!0):x&&(g=r.$parent),u&&(
// track `boundTranscludeFn` so it can be unwrapped if `transcludeFn`
// is later passed as `parentBoundTranscludeFn` to `publicLinkFn`
$=f,$.$$boundTransclude=u,
// expose the slots on the `$transclude` function
$.isSlotFilled=function(t){return!!u.$$slots[t]}),_&&(m=Y(w,E,$,_,v,r,C)),C&&(
// Initialize isolate scope bindings for new isolate scope directive.
M.$$addScopeInfo(w,v,!0,!(A&&(A===C||A===C.$$originalDirective))),M.$$addScopeClass(w,!0),v.$$isolateBindings=C.$$isolateBindings,T=dt(r,E,v,v.$$isolateBindings,C),T.removeWatches&&v.$on("$destroy",T.removeWatches));
// Initialize bindToController bindings
for(var O in m){var j=_[O],P=m[O],D=j.$$bindings.bindToController;P.identifier&&D?P.bindingInfo=dt(g,E,P.instance,D,j):P.bindingInfo={};var I=P();I!==P.instance&&(
// If the controller constructor has a return value, overwrite the instance
// from setupControllers
P.instance=I,w.data("$"+j.name+"Controller",I),P.bindingInfo.removeWatches&&P.bindingInfo.removeWatches(),P.bindingInfo=dt(g,E,P.instance,D,j))}
// PRELINKING
for(
// Bind the required controllers to the controller, if `require` is an object and `bindToController` is truthy
i(_,function(t,e){var n=t.require;t.bindToController&&!Gr(n)&&b(n)&&l(m[e].instance,J(e,n,w,m))}),
// Handle the init and destroy lifecycle hooks on all controllers that have them
i(m,function(t){var e=t.instance;S(e.$onChanges)&&e.$onChanges(t.bindingInfo.initialChanges),S(e.$onInit)&&e.$onInit(),S(e.$onDestroy)&&g.$on("$destroy",function(){e.$onDestroy()})}),h=0,p=s.length;h<p;h++)d=s[h],pt(d,d.isolateScope?v:r,w,E,d.require&&J(d.directiveName,d.require,w,m),$);
// RECURSION
// We only pass the isolate scope, if the isolate directive has a template,
// otherwise the child elements do not belong to the isolate directive.
var L=r;
// POSTLINKING
for(C&&(C.template||null===C.templateUrl)&&(L=v),t&&t(L,o.childNodes,void 0,u),h=c.length-1;h>=0;h--)d=c[h],pt(d,d.isolateScope?v:r,w,E,d.require&&J(d.directiveName,d.require,w,m),$);
// Trigger $postLink lifecycle hooks
i(m,function(t){var e=t.instance;S(e.$postLink)&&e.$postLink()})}f=f||{};
// executes all directives on the current element
for(var d,v,g,m,$,w=-Number.MAX_VALUE,x=f.newScopeDirective,_=f.controllerDirectives,C=f.newIsolateScopeDirective,A=f.templateDirective,E=f.nonTlbTranscludeDirective,T=!1,O=!1,R=f.hasElementTranscludeDirective,j=n.$$element=Mr(e),P=u,D=o,I=!1,q=!1,U=0,F=t.length;U<F;U++){d=t[U];var V=d.$$start,X=d.$$end;if(
// collect multiblock sections
V&&(j=W(e,V,X)),g=void 0,w>d.priority)break;
// If we encounter a condition that can result in transclusion on the directive,
// then scan ahead in the remaining directives for others that may cause a multiple
// transclusion error to be thrown during the compilation process.  If a matching directive
// is found, then we know that when we encounter a transcluded directive, we need to eagerly
// compile the `transclude` function rather than doing it lazily in order to throw
// exceptions at the correct time
if(($=d.scope)&&(
// skip the check for directives with async templates, we'll check the derived sync
// directive when the template arrives
d.templateUrl||(b($)?(
// This directive is trying to add an isolated scope.
// Check that there is no scope of any kind already
it("new/isolated scope",C||x,d,j),C=d):
// This directive is trying to add a child scope.
// Check that there is no isolated scope already
it("new/isolated scope",C,d,j)),x=x||d),v=d.name,!I&&(d.replace&&(d.templateUrl||d.template)||d.transclude&&!d.$$tlb)){for(var Q,tt=U+1;Q=t[tt++];)if(Q.transclude&&!Q.$$tlb||Q.replace&&(Q.templateUrl||Q.template)){q=!0;break}I=!0}if(!d.templateUrl&&d.controller&&($=d.controller,_=_||gt(),it("'"+v+"' controller",_[v],d,j),_[v]=d),$=d.transclude)if(T=!0,
// Special case ngIf and ngRepeat so that we don't complain about duplicate transclusion.
// This option should only be used by directives that know how to safely handle element transclusion,
// where the transcluded nodes are added or replaced after linking.
d.$$tlb||(it("transclusion",E,d,j),E=d),"element"==$)R=!0,w=d.priority,g=j,j=n.$$element=Mr(M.$$createComment(v,n[v])),e=j[0],lt(a,B(g),e),
// Support: Chrome < 50
// https://github.com/angular/angular.js/issues/14041
// In the versions of V8 prior to Chrome 50, the document fragment that is created
// in the `replaceWith` function is improperly garbage collected despite still
// being referenced by the `parentNode` property of all of the child nodes.  By adding
// a reference to the fragment via a different property, we can avoid that incorrect
// behavior.
// TODO: remove this line after Chrome 50 has been released
g[0].$$parentNode=g[0].parentNode,D=G(q,g,o,w,P&&P.name,{
// Don't pass in:
// - controllerDirectives - otherwise we'll create duplicates controllers
// - newIsolateScopeDirective or templateDirective - combining templates with
//   element transclusion doesn't make sense.
//
// We need only nonTlbTranscludeDirective so that we prevent putting transclusion
// on the same element more than once.
nonTlbTranscludeDirective:E});else{var rt=gt();if(g=Mr(Rt(e)).contents(),b($)){
// We have transclusion slots,
// collect them up, compile them and store their transclusion functions
g=[];var ot=gt(),ut=gt();
// Parse the element selectors
i($,function(t,e){
// If an element selector starts with a ? then it is optional
var n="?"===t.charAt(0);t=n?t.substring(1):t,ot[t]=e,
// We explicitly assign `null` since this implies that a slot was defined but not filled.
// Later when calling boundTransclusion functions with a slot name we only error if the
// slot is `undefined`
rt[e]=null,
// filledSlots contains `true` for all slots that are either optional or have been
// filled. This is used to check that we have not missed any required slots
ut[e]=n}),
// Add the matching elements into their slot
i(j.contents(),function(t){var e=ot[ge(L(t))];e?(ut[e]=!0,rt[e]=rt[e]||[],rt[e].push(t)):g.push(t)}),
// Check for required slots that were not filled
i(ut,function(t,e){if(!t)throw Bi("reqslot","Required transclusion slot `{0}` was not filled.",e)});for(var st in rt)rt[st]&&(
// Only define a transclusion function if the slot was filled
rt[st]=G(q,rt[st],o))}j.empty(),// clear contents
D=G(q,g,o,void 0,void 0,{needsNewScope:d.$$isolateScope||d.$$newScope}),D.$$slots=rt}if(d.template)if(O=!0,it("template",A,d,j),A=d,$=S(d.template)?d.template(j,n):d.template,$=xt($),d.replace){if(P=d,g=_t($)?[]:ye(at(d.templateNamespace,Jr($))),e=g[0],1!=g.length||e.nodeType!==ri)throw Bi("tplrt","Template for directive '{0}' must have exactly one root element. {1}",v,"");lt(a,j,e);var ct={$attr:{}},ft=H(e,[],ct),vt=t.splice(U+1,t.length-(U+1));(C||x)&&
// The original directive caused the current element to be replaced but this element
// also needs to have a new scope, so we need to tell the template directives
// that they would need to get their scope from further up, if they require transclusion
K(ft,C,x),t=t.concat(ft).concat(vt),et(n,ct),F=t.length}else j.html($);if(d.templateUrl)O=!0,it("template",A,d,j),A=d,d.replace&&(P=d),/* jshint -W021 */
p=nt(t.splice(U,t.length-U),j,/* jshint +W021 */
n,a,T&&D,s,c,{controllerDirectives:_,newScopeDirective:x!==d&&x,newIsolateScopeDirective:C,templateDirective:A,nonTlbTranscludeDirective:E}),F=t.length;else if(d.compile)try{m=d.compile(j,n,D),S(m)?h(null,m,V,X):m&&h(m.pre,m.post,V,X)}catch(mt){r(mt,Z(j))}d.terminal&&(p.terminal=!0,w=Math.max(w,d.priority))}
// might be normal or delayed nodeLinkFn depending on if templateUrl is present
return p.scope=x&&x.scope===!0,p.transcludeOnThisElement=T,p.templateOnThisElement=O,p.transclude=D,f.hasElementTranscludeDirective=R,p}function J(t,e,n,r){var o;if(x(e)){var a=e.match(w),u=e.substring(a[0].length),s=a[1]||a[3],c="?"===a[2];if(
//If only parents then start at the parent element
"^^"===s?n=n.parent():(o=r&&r[u],o=o&&o.instance),!o){var l="$"+u+"Controller";o=s?n.inheritedData(l):n.data(l)}if(!o&&!c)throw Bi("ctreq","Controller '{0}', required by directive '{1}', can't be found!",u,t)}else if(Gr(e)){o=[];for(var f=0,h=e.length;f<h;f++)o[f]=J(t,e[f],n,r)}else b(e)&&(o={},i(e,function(e,i){o[i]=J(t,e,n,r)}));return o||null}function Y(t,e,n,r,i,o,a){var u=gt();for(var s in r){var c=r[s],l={$scope:c===a||c.$$isolateScope?i:o,$element:t,$attrs:e,$transclude:n},f=c.controller;"@"==f&&(f=e[c.name]);var h=g(f,l,!0,c.controllerAs);
// For directives with element transclusion the element is a comment.
// In this case .data will not attach any data.
// Instead, we save the controllers for the element in a local hash and attach to .data
// later, once we have the actual element.
u[c.name]=h,t.data("$"+c.name+"Controller",h.instance)}return u}
// Depending upon the context in which a directive finds itself it might need to have a new isolated
// or child scope created. For instance:
// * if the directive has been pulled into a template because another directive with a higher priority
// asked for element transclusion
// * if the directive itself asks for transclusion but it is at the root of a template and the original
// element was replaced. See https://github.com/angular/angular.js/issues/12936
function K(t,e,n){for(var r=0,i=t.length;r<i;r++)t[r]=p(t[r],{$$isolateScope:e,$$newScope:n})}/**
	     * looks up the directive and decorates it with exception handling and proper parameters. We
	     * call this the boundDirective.
	     *
	     * @param {string} name name of the directive to look up.
	     * @param {string} location The directive must be found in specific format.
	     *   String containing any of theses characters:
	     *
	     *   * `E`: element name
	     *   * `A': attribute
	     *   * `C`: class
	     *   * `M`: comment
	     * @returns {boolean} true if directive was added.
	     */
function Q(e,n,i,a,u,l,f){if(n===u)return null;var h=null;if(s.hasOwnProperty(n))for(var d,v=t.get(n+c),g=0,m=v.length;g<m;g++)try{if(d=v[g],(y(a)||a>d.priority)&&d.restrict.indexOf(i)!=-1){if(l&&(d=p(d,{$$start:l,$$end:f})),!d.$$bindings){var $=d.$$bindings=o(d,d.name);b($.isolateScope)&&(d.$$isolateBindings=$.isolateScope)}e.push(d),h=d}}catch(w){r(w)}return h}/**
	     * looks up the directive and returns true if it is a multi-element directive,
	     * and therefore requires DOM nodes between -start and -end markers to be grouped
	     * together.
	     *
	     * @param {string} name name of the directive to look up.
	     * @returns true if directive was registered as multi-element.
	     */
function tt(e){if(s.hasOwnProperty(e))for(var n,r=t.get(e+c),i=0,o=r.length;i<o;i++)if(n=r[i],n.multiElement)return!0;return!1}/**
	     * When the element is replaced with HTML template then the new attributes
	     * on the template need to be merged with the existing attributes in the DOM.
	     * The desired effect is to have both of the attributes present.
	     *
	     * @param {object} dst destination attributes (original DOM)
	     * @param {object} src source attributes (from the directive template)
	     */
function et(t,e){var n=e.$attr,r=t.$attr,o=t.$$element;
// reapply the old attributes to the new element
i(t,function(r,i){"$"!=i.charAt(0)&&(e[i]&&e[i]!==r&&(r+=("style"===i?";":" ")+e[i]),t.$set(i,r,!0,n[i]))}),
// copy the new attributes on the old attrs object
i(e,function(e,i){"class"==i?(D(o,e),t["class"]=(t["class"]?t["class"]+" ":"")+e):"style"==i?(o.attr("style",o.attr("style")+";"+e),t.style=(t.style?t.style+";":"")+e):"$"==i.charAt(0)||t.hasOwnProperty(i)||(t[i]=e,r[i]=n[i])})}function nt(t,e,n,r,o,u,s,c){var l,f,h=[],d=e[0],v=t.shift(),g=p(v,{templateUrl:null,transclude:null,replace:null,$$originalDirective:v}),m=S(v.templateUrl)?v.templateUrl(e,n):v.templateUrl,y=v.templateNamespace;return e.empty(),a(m).then(function(a){var p,$,w,x;if(a=xt(a),v.replace){if(w=_t(a)?[]:ye(at(y,Jr(a))),p=w[0],1!=w.length||p.nodeType!==ri)throw Bi("tplrt","Template for directive '{0}' must have exactly one root element. {1}",v.name,m);$={$attr:{}},lt(r,e,p);var _=H(p,[],$);b(v.scope)&&
// the original directive that caused the template to be loaded async required
// an isolate scope
K(_,!0),t=_.concat(t),et(n,$)}else p=d,e.html(a);for(t.unshift(g),l=X(t,p,n,o,e,v,u,s,c),i(r,function(t,n){t==p&&(r[n]=e[0])}),f=U(e[0].childNodes,o);h.length;){var C=h.shift(),S=h.shift(),A=h.shift(),E=h.shift(),k=e[0];if(!C.$$destroyed){if(S!==d){var T=S.className;c.hasElementTranscludeDirective&&v.replace||(
// it was cloned therefore we have to clone as well.
k=Rt(p)),lt(A,Mr(S),k),
// Copy in CSS classes from original node
D(Mr(k),T)}x=l.transcludeOnThisElement?F(C,l.transclude,E):E,l(f,C,k,r,x)}}h=null}),function(t,e,n,r,i){var o=i;e.$$destroyed||(h?h.push(e,n,r,o):(l.transcludeOnThisElement&&(o=F(e,l.transclude,i)),l(f,e,n,r,o)))}}/**
	     * Sorting function for bound directives.
	     */
function rt(t,e){var n=e.priority-t.priority;return 0!==n?n:t.name!==e.name?t.name<e.name?-1:1:t.index-e.index}function it(t,e,n,r){function i(t){return t?" (module: "+t+")":""}if(e)throw Bi("multidir","Multiple directives [{0}{1}, {2}{3}] asking for {4} on: {5}",e.name,i(e.$$moduleName),n.name,i(n.$$moduleName),t,Z(r))}function ot(t,e){var r=n(e,!0);r&&t.push({priority:0,compile:function(t){var e=t.parent(),n=!!e.length;
// When transcluding a template that has bindings in the root
// we don't have a parent and thus need to add the class during linking fn.
return n&&M.$$addBindingClass(e),function(t,e){var i=e.parent();n||M.$$addBindingClass(i),M.$$addBindingInfo(i,r.expressions),t.$watch(r,function(t){e[0].nodeValue=t})}}})}function at(t,n){switch(t=Rr(t||"html")){case"svg":case"math":var r=e.document.createElement("div");return r.innerHTML="<"+t+">"+n+"</"+t+">",r.childNodes[0].childNodes;default:return n}}function ut(t,e){if("srcdoc"==e)return C.HTML;var n=L(t);
// maction[xlink:href] can source SVG.  It's not limited to <maction>.
// maction[xlink:href] can source SVG.  It's not limited to <maction>.
return"xlinkHref"==e||"form"==n&&"action"==e||"img"!=n&&("src"==e||"ngSrc"==e)?C.RESOURCE_URL:void 0}function st(t,e,r,i,o){var a=ut(t,i);o=m[i]||o;var u=n(r,!0,a,o);
// no interpolation found -> ignore
if(u){if("multiple"===i&&"select"===L(t))throw Bi("selmulti","Binding to the 'multiple' attribute is not supported. Element: {0}",Z(t));e.push({priority:100,compile:function(){return{pre:function(t,e,s){var c=s.$$observers||(s.$$observers=gt());if(_.test(i))throw Bi("nodomevents","Interpolations for HTML DOM event attributes are disallowed.  Please use the ng- versions (such as ng-click instead of onclick) instead.");
// If the attribute has changed since last $interpolate()ed
var l=s[i];l!==r&&(
// we need to interpolate again since the attribute value has been updated
// (e.g. by another directive's compile function)
// ensure unset/empty values make interpolateFn falsy
u=l&&n(l,!0,a,o),r=l),
// if attribute was updated so that there is no interpolation going on we don't want to
// register any observers
u&&(
// initialize attr object so that it's ready in case we need the value for isolate
// scope initialization, otherwise the value would not be available from isolate
// directive's linking fn during linking phase
s[i]=u(t),(c[i]||(c[i]=[])).$$inter=!0,(s.$$observers&&s.$$observers[i].$$scope||t).$watch(u,function(t,e){
//special case for class attribute addition + removal
//so that class changes can tap into the animation
//hooks provided by the $animate service. Be sure to
//skip animations when the first digest occurs (when
//both the new and the old values are the same) since
//the CSS classes are the non-interpolated values
"class"===i&&t!=e?s.$updateClass(t,e):s.$set(i,t)}))}}}})}}/**
	     * This is a special jqLite.replaceWith, which can replace items which
	     * have no parents, provided that the containing jqLite collection is provided.
	     *
	     * @param {JqLite=} $rootElement The root of the compile tree. Used so that we can replace nodes
	     *                               in the root of the tree.
	     * @param {JqLite} elementsToRemove The jqLite element which we are going to replace. We keep
	     *                                  the shell, but replace its DOM node reference.
	     * @param {Node} newNode The new DOM node.
	     */
function lt(t,n,r){var i,o,a=n[0],u=n.length,s=a.parentNode;if(t)for(i=0,o=t.length;i<o;i++)if(t[i]==a){t[i++]=r;for(var c=i,l=c+u-1,f=t.length;c<f;c++,l++)l<f?t[c]=t[l]:delete t[c];t.length-=u-1,
// If the replaced element is also the jQuery .context then replace it
// .context is a deprecated jQuery api, so we should set it only when jQuery set it
// http://api.jquery.com/context/
t.context===a&&(t.context=r);break}s&&s.replaceChild(r,a);
// Append all the `elementsToRemove` to a fragment. This will...
// - remove them from the DOM
// - allow them to still be traversed with .nextSibling
// - allow a single fragment.qSA to fetch all elements being removed
var h=e.document.createDocumentFragment();for(i=0;i<u;i++)h.appendChild(n[i]);
// Update the jqLite collection to only contain the `newNode`
for(Mr.hasData(a)&&(
// Copy over user data (that includes Angular's $scope etc.). Don't copy private
// data here because there's no public interface in jQuery to do that and copying over
// event listeners (which is the main use of private data) wouldn't work anyway.
Mr.data(r,Mr.data(a)),
// Remove $destroy event listeners from `firstElementToRemove`
Mr(a).off("$destroy")),
// Cleanup any data/listeners on the elements and children.
// This includes invoking the $destroy event on any elements with listeners.
Mr.cleanData(h.querySelectorAll("*")),i=1;i<u;i++)delete n[i];n[0]=r,n.length=1}function ht(t,e){return l(function(){return t.apply(null,arguments)},t,e)}function pt(t,e,n,i,o,a){try{t(e,n,i,o,a)}catch(u){r(u,Z(n))}}
// Set up $watches for isolate scope and controller bindings. This process
// only occurs for isolate scopes and new scopes with controllerAs.
function dt(t,e,r,o,a){function s(e,n,i){S(r.$onChanges)&&n!==i&&(
// If we have not already scheduled the top level onChangesQueue handler then do so now
vt||(t.$$postDigest(R),vt=[]),
// If we have not already queued a trigger of onChanges for this controller then do so now
l||(l={},vt.push(c)),
// If the has been a change on this property already then we need to reuse the previous value
l[e]&&(i=l[e].previousValue),
// Store this change
l[e]=new ve(i,n))}function c(){r.$onChanges(l),
// Now clear the changes so that we schedule onChanges when more changes arrive
l=void 0}var l,f=[],h={};return i(o,function(i,o){var// @, =, or &
c,l,p,v,g,m=i.attrName,y=i.optional,$=i.mode;switch($){case"@":y||Or.call(e,m)||(r[o]=e[m]=void 0),e.$observe(m,function(t){if(x(t)||j(t)){var e=r[o];s(o,t,e),r[o]=t}}),e.$$observers[m].$$scope=t,c=e[m],x(c)?
// If the attribute has been provided then we trigger an interpolation to ensure
// the value is there for use in the link fn
r[o]=n(c)(t):j(c)&&(
// If the attributes is one of the BOOLEAN_ATTR then Angular will have converted
// the value to boolean rather than a string, so we special case this situation
r[o]=c),h[o]=new ve(Wi,r[o]);break;case"=":if(!Or.call(e,m)){if(y)break;e[m]=void 0}if(y&&!e[m])break;l=u(e[m]),v=l.literal?V:function(t,e){return t===e||t!==t&&e!==e},p=l.assign||function(){
// reset the change, or we will throw this exception on every $digest
throw c=r[o]=l(t),Bi("nonassign","Expression '{0}' in attribute '{1}' used with directive '{2}' is non-assignable!",e[m],m,a.name)},c=r[o]=l(t);var b=function(e){
// we are out of sync and need to copy
// if the parent can be assigned then do so
// parent changed and it has precedence
return v(e,r[o])||(v(e,c)?p(t,e=r[o]):r[o]=e),c=e};b.$stateful=!0,g=i.collection?t.$watchCollection(e[m],b):t.$watch(u(e[m],b),null,l.literal),f.push(g);break;case"<":if(!Or.call(e,m)){if(y)break;e[m]=void 0}if(y&&!e[m])break;l=u(e[m]),r[o]=l(t),h[o]=new ve(Wi,r[o]),g=t.$watch(l,function(t,e){t===e&&(
// If the new and old values are identical then this is the first time the watch has been triggered
// So instead we use the current value on the destination as the old value
e=r[o]),s(o,t,e),r[o]=t},l.literal),f.push(g);break;case"&":
// Don't assign noop to destination if expression is not valid
if(
// Don't assign Object.prototype method to scope
l=e.hasOwnProperty(m)?u(e[m]):d,l===d&&y)break;r[o]=function(e){return l(t,e)}}}),{initialChanges:h,removeWatches:f.length&&function(){for(var t=0,e=f.length;t<e;++t)f[t]()}}}var vt,mt=/^\w/,yt=e.document.createElement("div"),$t=E;N.prototype={/**
	       * @ngdoc method
	       * @name $compile.directive.Attributes#$normalize
	       * @kind function
	       *
	       * @description
	       * Converts an attribute name (e.g. dash/colon/underscore-delimited string, optionally prefixed with `x-` or
	       * `data-`) to its normalized, camelCase form.
	       *
	       * Also there is special case for Moz prefix starting with upper case letter.
	       *
	       * For further information check out the guide on {@link guide/directive#matching-directives Matching Directives}
	       *
	       * @param {string} name Name to normalize
	       */
$normalize:ge,/**
	       * @ngdoc method
	       * @name $compile.directive.Attributes#$addClass
	       * @kind function
	       *
	       * @description
	       * Adds the CSS class value specified by the classVal parameter to the element. If animations
	       * are enabled then an animation will be triggered for the class addition.
	       *
	       * @param {string} classVal The className value that will be added to the element
	       */
$addClass:function(t){t&&t.length>0&&T.addClass(this.$$element,t)},/**
	       * @ngdoc method
	       * @name $compile.directive.Attributes#$removeClass
	       * @kind function
	       *
	       * @description
	       * Removes the CSS class value specified by the classVal parameter from the element. If
	       * animations are enabled then an animation will be triggered for the class removal.
	       *
	       * @param {string} classVal The className value that will be removed from the element
	       */
$removeClass:function(t){t&&t.length>0&&T.removeClass(this.$$element,t)},/**
	       * @ngdoc method
	       * @name $compile.directive.Attributes#$updateClass
	       * @kind function
	       *
	       * @description
	       * Adds and removes the appropriate CSS class values to the element based on the difference
	       * between the new and old CSS class values (specified as newClasses and oldClasses).
	       *
	       * @param {string} newClasses The current CSS className value
	       * @param {string} oldClasses The former CSS className value
	       */
$updateClass:function(t,e){var n=me(t,e);n&&n.length&&T.addClass(this.$$element,n);var r=me(e,t);r&&r.length&&T.removeClass(this.$$element,r)},/**
	       * Set a normalized attribute on the element in a way such that all directives
	       * can share the attribute. This function properly handles boolean attributes.
	       * @param {string} key Normalized key. (ie ngAttribute)
	       * @param {string|boolean} value The value to set. If `null` attribute will be deleted.
	       * @param {boolean=} writeAttr If false, does not write the value to DOM element attribute.
	       *     Defaults to true.
	       * @param {string=} attrName Optional none normalized name. Defaults to key.
	       */
$set:function(t,e,n,o){
// TODO: decide whether or not to throw an error if "class"
//is set through this function since it may cause $updateClass to
//become unstable.
var a,u=this.$$element[0],s=zt(u,t),c=Gt(t),l=t;if(s?(this.$$element.prop(t,e),o=s):c&&(this[c]=e,l=c),this[t]=e,
// translate normalized key to actual key
o?this.$attr[t]=o:(o=this.$attr[t],o||(this.$attr[t]=o=ct(t,"-"))),a=L(this.$$element),"a"===a&&("href"===t||"xlinkHref"===t)||"img"===a&&"src"===t)
// sanitize a[href] and img[src] values
this[t]=e=O(e,"src"===t);else if("img"===a&&"srcset"===t){for(var f="",h=Jr(e),p=/(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/,d=/\s/.test(h)?p:/(,)/,v=h.split(d),g=Math.floor(v.length/2),m=0;m<g;m++){var $=2*m;
// sanitize the uri
f+=O(Jr(v[$]),!0),
// add the descriptor
f+=" "+Jr(v[$+1])}
// split the last item into uri and descriptor
var b=Jr(v[2*m]).split(/\s/);
// sanitize the last uri
f+=O(Jr(b[0]),!0),
// and add the last descriptor if any
2===b.length&&(f+=" "+Jr(b[1])),this[t]=e=f}n!==!1&&(null===e||y(e)?this.$$element.removeAttr(o):mt.test(o)?this.$$element.attr(o,e):P(this.$$element[0],o,e));
// fire observers
var w=this.$$observers;w&&i(w[l],function(t){try{t(e)}catch(n){r(n)}})},/**
	       * @ngdoc method
	       * @name $compile.directive.Attributes#$observe
	       * @kind function
	       *
	       * @description
	       * Observes an interpolated attribute.
	       *
	       * The observer function will be invoked once during the next `$digest` following
	       * compilation. The observer is then invoked whenever the interpolated value
	       * changes.
	       *
	       * @param {string} key Normalized key. (ie ngAttribute) .
	       * @param {function(interpolatedValue)} fn Function that will be called whenever
	                the interpolated value of the attribute changes.
	       *        See the {@link guide/interpolation#how-text-and-attribute-bindings-work Interpolation
	       *        guide} for more info.
	       * @returns {function()} Returns a deregistration function for this observer.
	       */
$observe:function(t,e){var n=this,r=n.$$observers||(n.$$observers=gt()),i=r[t]||(r[t]=[]);return i.push(e),$.$evalAsync(function(){i.$$inter||!n.hasOwnProperty(t)||y(n[t])||
// no one registered attribute interpolation function, so lets call it manually
e(n[t])}),function(){q(i,e)}}};var bt=n.startSymbol(),wt=n.endSymbol(),xt="{{"==bt&&"}}"==wt?v:function(t){return t.replace(/\{\{/g,bt).replace(/}}/g,wt)},Ct=/^ngAttr[A-Z]/,St=/^(.+)Start$/;return M.$$addBindingInfo=A?function(t,e){var n=t.data("$binding")||[];Gr(e)?n=n.concat(e):n.push(e),t.data("$binding",n)}:d,M.$$addBindingClass=A?function(t){D(t,"ng-binding")}:d,M.$$addScopeInfo=A?function(t,e,n,r){var i=n?r?"$isolateScopeNoTemplate":"$isolateScope":"$scope";t.data(i,e)}:d,M.$$addScopeClass=A?function(t,e){D(t,e?"ng-isolate-scope":"ng-scope")}:d,M.$$createComment=function(t,n){var r="";return A&&(r=" "+(t||"")+": "+(n||"")+" "),e.document.createComment(r)},M}]}function ve(t,e){this.previousValue=t,this.currentValue=e}/**
	 * Converts all accepted directives format into proper directive name.
	 * @param name Name to normalize
	 */
function ge(t){return xt(t.replace(zi,""))}function me(t,e){var n="",r=t.split(/\s+/),i=e.split(/\s+/);t:for(var o=0;o<r.length;o++){for(var a=r[o],u=0;u<i.length;u++)if(a==i[u])continue t;n+=(n.length>0?" ":"")+a}return n}function ye(t){t=Mr(t);var e=t.length;if(e<=1)return t;for(;e--;){var n=t[e];n.nodeType===ai&&Ur.call(t,e,1)}return t}function $e(t,e){if(e&&x(e))return e;if(x(t)){var n=Xi.exec(t);if(n)return n[3]}}/**
	 * @ngdoc provider
	 * @name $controllerProvider
	 * @description
	 * The {@link ng.$controller $controller service} is used by Angular to create new
	 * controllers.
	 *
	 * This provider allows controller registration via the
	 * {@link ng.$controllerProvider#register register} method.
	 */
function be(){var t={},e=!1;/**
	   * @ngdoc method
	   * @name $controllerProvider#has
	   * @param {string} name Controller name to check.
	   */
this.has=function(e){return t.hasOwnProperty(e)},/**
	   * @ngdoc method
	   * @name $controllerProvider#register
	   * @param {string|Object} name Controller name, or an object map of controllers where the keys are
	   *    the names and the values are the constructors.
	   * @param {Function|Array} constructor Controller constructor fn (optionally decorated with DI
	   *    annotations in the array notation).
	   */
this.register=function(e,n){pt(e,"controller"),b(e)?l(t,e):t[e]=n},/**
	   * @ngdoc method
	   * @name $controllerProvider#allowGlobals
	   * @description If called, allows `$controller` to find controller constructors on `window`
	   */
this.allowGlobals=function(){e=!0},this.$get=["$injector","$window",function(r,i){function o(t,e,r,i){if(!t||!b(t.$scope))throw n("$controller")("noscp","Cannot export controller '{0}' as '{1}'! No $scope object provided via `locals`.",i,e);t.$scope[e]=r}/**
	     * @ngdoc service
	     * @name $controller
	     * @requires $injector
	     *
	     * @param {Function|string} constructor If called with a function then it's considered to be the
	     *    controller constructor function. Otherwise it's considered to be a string which is used
	     *    to retrieve the controller constructor using the following steps:
	     *
	     *    * check if a controller with given name is registered via `$controllerProvider`
	     *    * check if evaluating the string on the current scope returns a constructor
	     *    * if $controllerProvider#allowGlobals, check `window[constructor]` on the global
	     *      `window` object (not recommended)
	     *
	     *    The string can use the `controller as property` syntax, where the controller instance is published
	     *    as the specified property on the `scope`; the `scope` must be injected into `locals` param for this
	     *    to work correctly.
	     *
	     * @param {Object} locals Injection locals for Controller.
	     * @return {Object} Instance of given controller.
	     *
	     * @description
	     * `$controller` service is responsible for instantiating controllers.
	     *
	     * It's just a simple call to {@link auto.$injector $injector}, but extracted into
	     * a service, so that one can override this service with [BC version](https://gist.github.com/1649788).
	     */
return function(n,a,u,s){
// PRIVATE API:
//   param `later` --- indicates that the controller's constructor is invoked at a later time.
//                     If true, $controller will allocate the object with the correct
//                     prototype chain, but will not invoke the controller until a returned
//                     callback is invoked.
//   param `ident` --- An optional label which overrides the label parsed from the controller
//                     expression, if any.
var c,f,h,p;if(u=u===!0,s&&x(s)&&(p=s),x(n)){if(f=n.match(Xi),!f)throw Gi("ctrlfmt","Badly formed controller string '{0}'. Must match `__name__ as __id__` or `__name__`.",n);h=f[1],p=p||f[3],n=t.hasOwnProperty(h)?t[h]:dt(a.$scope,h,!0)||(e?dt(i,h,!0):void 0),ht(n,h,!0)}if(u){
// Instantiate controller later:
// This machinery is used to create an instance of the object before calling the
// controller's constructor itself.
//
// This allows properties to be added to the controller before the constructor is
// invoked. Primarily, this is used for isolate scope bindings in $compile.
//
// This feature is not intended for use by applications, and is thus not documented
// publicly.
// Object creation: http://jsperf.com/create-constructor/2
var d=(Gr(n)?n[n.length-1]:n).prototype;c=Object.create(d||null),p&&o(a,p,c,h||n.name);var v;return v=l(function(){var t=r.invoke(n,c,a,h);
// If result changed, re-assign controllerAs value to scope.
return t!==c&&(b(t)||S(t))&&(c=t,p&&o(a,p,c,h||n.name)),c},{instance:c,identifier:p})}return c=r.instantiate(n,a,h),p&&o(a,p,c,h||n.name),c}}]}/**
	 * @ngdoc service
	 * @name $document
	 * @requires $window
	 *
	 * @description
	 * A {@link angular.element jQuery or jqLite} wrapper for the browser's `window.document` object.
	 *
	 * @example
	   <example module="documentExample">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	         <p>$document title: <b ng-bind="title"></b></p>
	         <p>window.document title: <b ng-bind="windowTitle"></b></p>
	       </div>
	     </file>
	     <file name="script.js">
	       angular.module('documentExample', [])
	         .controller('ExampleController', ['$scope', '$document', function($scope, $document) {
	           $scope.title = $document[0].title;
	           $scope.windowTitle = angular.element(window.document)[0].title;
	         }]);
	     </file>
	   </example>
	 */
function we(){this.$get=["$window",function(t){return Mr(t.document)}]}/**
	 * @ngdoc service
	 * @name $exceptionHandler
	 * @requires ng.$log
	 *
	 * @description
	 * Any uncaught exception in angular expressions is delegated to this service.
	 * The default implementation simply delegates to `$log.error` which logs it into
	 * the browser console.
	 *
	 * In unit tests, if `angular-mocks.js` is loaded, this service is overridden by
	 * {@link ngMock.$exceptionHandler mock $exceptionHandler} which aids in testing.
	 *
	 * ## Example:
	 *
	 * ```js
	 *   angular.module('exceptionOverride', []).factory('$exceptionHandler', function() {
	 *     return function(exception, cause) {
	 *       exception.message += ' (caused by "' + cause + '")';
	 *       throw exception;
	 *     };
	 *   });
	 * ```
	 *
	 * This example will override the normal action of `$exceptionHandler`, to make angular
	 * exceptions fail hard when they happen, instead of just logging to the console.
	 *
	 * <hr />
	 * Note, that code executed in event-listeners (even those registered using jqLite's `on`/`bind`
	 * methods) does not delegate exceptions to the {@link ng.$exceptionHandler $exceptionHandler}
	 * (unless executed during a digest).
	 *
	 * If you wish, you can manually delegate exceptions, e.g.
	 * `try { ... } catch(e) { $exceptionHandler(e); }`
	 *
	 * @param {Error} exception Exception associated with the error.
	 * @param {string=} cause optional information about the context in which
	 *       the error was thrown.
	 *
	 */
function xe(){this.$get=["$log",function(t){return function(e,n){t.error.apply(t,arguments)}}]}function _e(t){return b(t)?C(t)?t.toISOString():G(t):t}function Ce(){/**
	   * @ngdoc service
	   * @name $httpParamSerializer
	   * @description
	   *
	   * Default {@link $http `$http`} params serializer that converts objects to strings
	   * according to the following rules:
	   *
	   * * `{'foo': 'bar'}` results in `foo=bar`
	   * * `{'foo': Date.now()}` results in `foo=2015-04-01T09%3A50%3A49.262Z` (`toISOString()` and encoded representation of a Date object)
	   * * `{'foo': ['bar', 'baz']}` results in `foo=bar&foo=baz` (repeated key for each array element)
	   * * `{'foo': {'bar':'baz'}}` results in `foo=%7B%22bar%22%3A%22baz%22%7D"` (stringified and encoded representation of an object)
	   *
	   * Note that serializer will sort the request parameters alphabetically.
	   * */
this.$get=function(){return function(t){if(!t)return"";var e=[];return o(t,function(t,n){null===t||y(t)||(Gr(t)?i(t,function(t){e.push(rt(n)+"="+rt(_e(t)))}):e.push(rt(n)+"="+rt(_e(t))))}),e.join("&")}}}function Se(){/**
	   * @ngdoc service
	   * @name $httpParamSerializerJQLike
	   * @description
	   *
	   * Alternative {@link $http `$http`} params serializer that follows
	   * jQuery's [`param()`](http://api.jquery.com/jquery.param/) method logic.
	   * The serializer will also sort the params alphabetically.
	   *
	   * To use it for serializing `$http` request parameters, set it as the `paramSerializer` property:
	   *
	   * ```js
	   * $http({
	   *   url: myUrl,
	   *   method: 'GET',
	   *   params: myParams,
	   *   paramSerializer: '$httpParamSerializerJQLike'
	   * });
	   * ```
	   *
	   * It is also possible to set it as the default `paramSerializer` in the
	   * {@link $httpProvider#defaults `$httpProvider`}.
	   *
	   * Additionally, you can inject the serializer and use it explicitly, for example to serialize
	   * form data for submission:
	   *
	   * ```js
	   * .controller(function($http, $httpParamSerializerJQLike) {
	   *   //...
	   *
	   *   $http({
	   *     url: myUrl,
	   *     method: 'POST',
	   *     data: $httpParamSerializerJQLike(myData),
	   *     headers: {
	   *       'Content-Type': 'application/x-www-form-urlencoded'
	   *     }
	   *   });
	   *
	   * });
	   * ```
	   *
	   * */
this.$get=function(){return function(t){function e(t,r,a){null===t||y(t)||(Gr(t)?i(t,function(t,n){e(t,r+"["+(b(t)?n:"")+"]")}):b(t)&&!C(t)?o(t,function(t,n){e(t,r+(a?"":"[")+n+(a?"":"]"))}):n.push(rt(r)+"="+rt(_e(t))))}if(!t)return"";var n=[];return e(t,"",!0),n.join("&")}}}function Ae(t,e){if(x(t)){
// Strip json vulnerability protection prefix and trim whitespace
var n=t.replace(to,"").trim();if(n){var r=e("Content-Type");(r&&0===r.indexOf(Yi)||Ee(n))&&(t=X(n))}}return t}function Ee(t){var e=t.match(Zi);return e&&Qi[e[0]].test(t)}/**
	 * Parse headers into key value object
	 *
	 * @param {string} headers Raw headers as a string
	 * @returns {Object} Parsed headers as key value object
	 */
function ke(t){function e(t,e){t&&(r[t]=r[t]?r[t]+", "+e:e)}var n,r=gt();return x(t)?i(t.split("\n"),function(t){n=t.indexOf(":"),e(Rr(Jr(t.substr(0,n))),Jr(t.substr(n+1)))}):b(t)&&i(t,function(t,n){e(Rr(n),Jr(t))}),r}/**
	 * Returns a function that provides access to parsed headers.
	 *
	 * Headers are lazy parsed when first requested.
	 * @see parseHeaders
	 *
	 * @param {(string|Object)} headers Headers to provide access to.
	 * @returns {function(string=)} Returns a getter function which if called with:
	 *
	 *   - if called with single an argument returns a single header value or null
	 *   - if called with no arguments returns an object containing all headers.
	 */
function Te(t){var e;return function(n){if(e||(e=ke(t)),n){var r=e[Rr(n)];return void 0===r&&(r=null),r}return e}}/**
	 * Chain all given functions
	 *
	 * This function is used for both request and response transforming
	 *
	 * @param {*} data Data to transform.
	 * @param {function(string=)} headers HTTP headers getter fn.
	 * @param {number} status HTTP status code of the response.
	 * @param {(Function|Array.<Function>)} fns Function or an array of functions.
	 * @returns {*} Transformed data.
	 */
function Oe(t,e,n,r){return S(r)?r(t,e,n):(i(r,function(r){t=r(t,e,n)}),t)}function Re(t){return 200<=t&&t<300}/**
	 * @ngdoc provider
	 * @name $httpProvider
	 * @description
	 * Use `$httpProvider` to change the default behavior of the {@link ng.$http $http} service.
	 * */
function je(){/**
	   * @ngdoc property
	   * @name $httpProvider#defaults
	   * @description
	   *
	   * Object containing default values for all {@link ng.$http $http} requests.
	   *
	   * - **`defaults.cache`** - {boolean|Object} - A boolean value or object created with
	   * {@link ng.$cacheFactory `$cacheFactory`} to enable or disable caching of HTTP responses
	   * by default. See {@link $http#caching $http Caching} for more information.
	   *
	   * - **`defaults.xsrfCookieName`** - {string} - Name of cookie containing the XSRF token.
	   * Defaults value is `'XSRF-TOKEN'`.
	   *
	   * - **`defaults.xsrfHeaderName`** - {string} - Name of HTTP header to populate with the
	   * XSRF token. Defaults value is `'X-XSRF-TOKEN'`.
	   *
	   * - **`defaults.headers`** - {Object} - Default headers for all $http requests.
	   * Refer to {@link ng.$http#setting-http-headers $http} for documentation on
	   * setting default headers.
	   *     - **`defaults.headers.common`**
	   *     - **`defaults.headers.post`**
	   *     - **`defaults.headers.put`**
	   *     - **`defaults.headers.patch`**
	   *
	   *
	   * - **`defaults.paramSerializer`** - `{string|function(Object<string,string>):string}` - A function
	   *  used to the prepare string representation of request parameters (specified as an object).
	   *  If specified as string, it is interpreted as a function registered with the {@link auto.$injector $injector}.
	   *  Defaults to {@link ng.$httpParamSerializer $httpParamSerializer}.
	   *
	   **/
var t=this.defaults={
// transform incoming response data
transformResponse:[Ae],
// transform outgoing request data
transformRequest:[function(t){return!b(t)||T(t)||R(t)||O(t)?t:G(t)}],
// default headers
headers:{common:{Accept:"application/json, text/plain, */*"},post:F(Ki),put:F(Ki),patch:F(Ki)},xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",paramSerializer:"$httpParamSerializer"},e=!1;/**
	   * @ngdoc method
	   * @name $httpProvider#useApplyAsync
	   * @description
	   *
	   * Configure $http service to combine processing of multiple http responses received at around
	   * the same time via {@link ng.$rootScope.Scope#$applyAsync $rootScope.$applyAsync}. This can result in
	   * significant performance improvement for bigger applications that make many HTTP requests
	   * concurrently (common during application bootstrap).
	   *
	   * Defaults to false. If no value is specified, returns the current configured value.
	   *
	   * @param {boolean=} value If true, when requests are loaded, they will schedule a deferred
	   *    "apply" on the next tick, giving time for subsequent requests in a roughly ~10ms window
	   *    to load and share the same digest cycle.
	   *
	   * @returns {boolean|Object} If a value is specified, returns the $httpProvider for chaining.
	   *    otherwise, returns the current configured value.
	   **/
this.useApplyAsync=function(t){return $(t)?(e=!!t,this):e};var r=!0;/**
	   * @ngdoc method
	   * @name $httpProvider#useLegacyPromiseExtensions
	   * @description
	   *
	   * Configure `$http` service to return promises without the shorthand methods `success` and `error`.
	   * This should be used to make sure that applications work without these methods.
	   *
	   * Defaults to true. If no value is specified, returns the current configured value.
	   *
	   * @param {boolean=} value If true, `$http` will return a promise with the deprecated legacy `success` and `error` methods.
	   *
	   * @returns {boolean|Object} If a value is specified, returns the $httpProvider for chaining.
	   *    otherwise, returns the current configured value.
	   **/
this.useLegacyPromiseExtensions=function(t){return $(t)?(r=!!t,this):r};/**
	   * @ngdoc property
	   * @name $httpProvider#interceptors
	   * @description
	   *
	   * Array containing service factories for all synchronous or asynchronous {@link ng.$http $http}
	   * pre-processing of request or postprocessing of responses.
	   *
	   * These service factories are ordered by request, i.e. they are applied in the same order as the
	   * array, on request, but reverse order, on response.
	   *
	   * {@link ng.$http#interceptors Interceptors detailed info}
	   **/
var o=this.interceptors=[];this.$get=["$httpBackend","$$cookieReader","$cacheFactory","$rootScope","$q","$injector",function(a,u,s,c,f,h){/**
	     * @ngdoc service
	     * @kind function
	     * @name $http
	     * @requires ng.$httpBackend
	     * @requires $cacheFactory
	     * @requires $rootScope
	     * @requires $q
	     * @requires $injector
	     *
	     * @description
	     * The `$http` service is a core Angular service that facilitates communication with the remote
	     * HTTP servers via the browser's [XMLHttpRequest](https://developer.mozilla.org/en/xmlhttprequest)
	     * object or via [JSONP](http://en.wikipedia.org/wiki/JSONP).
	     *
	     * For unit testing applications that use `$http` service, see
	     * {@link ngMock.$httpBackend $httpBackend mock}.
	     *
	     * For a higher level of abstraction, please check out the {@link ngResource.$resource
	     * $resource} service.
	     *
	     * The $http API is based on the {@link ng.$q deferred/promise APIs} exposed by
	     * the $q service. While for simple usage patterns this doesn't matter much, for advanced usage
	     * it is important to familiarize yourself with these APIs and the guarantees they provide.
	     *
	     *
	     * ## General usage
	     * The `$http` service is a function which takes a single argument — a {@link $http#usage configuration object} —
	     * that is used to generate an HTTP request and returns  a {@link ng.$q promise}.
	     *
	     * ```js
	     *   // Simple GET request example:
	     *   $http({
	     *     method: 'GET',
	     *     url: '/someUrl'
	     *   }).then(function successCallback(response) {
	     *       // this callback will be called asynchronously
	     *       // when the response is available
	     *     }, function errorCallback(response) {
	     *       // called asynchronously if an error occurs
	     *       // or server returns response with an error status.
	     *     });
	     * ```
	     *
	     * The response object has these properties:
	     *
	     *   - **data** – `{string|Object}` – The response body transformed with the transform
	     *     functions.
	     *   - **status** – `{number}` – HTTP status code of the response.
	     *   - **headers** – `{function([headerName])}` – Header getter function.
	     *   - **config** – `{Object}` – The configuration object that was used to generate the request.
	     *   - **statusText** – `{string}` – HTTP status text of the response.
	     *
	     * A response status code between 200 and 299 is considered a success status and
	     * will result in the success callback being called. Note that if the response is a redirect,
	     * XMLHttpRequest will transparently follow it, meaning that the error callback will not be
	     * called for such responses.
	     *
	     *
	     * ## Shortcut methods
	     *
	     * Shortcut methods are also available. All shortcut methods require passing in the URL, and
	     * request data must be passed in for POST/PUT requests. An optional config can be passed as the
	     * last argument.
	     *
	     * ```js
	     *   $http.get('/someUrl', config).then(successCallback, errorCallback);
	     *   $http.post('/someUrl', data, config).then(successCallback, errorCallback);
	     * ```
	     *
	     * Complete list of shortcut methods:
	     *
	     * - {@link ng.$http#get $http.get}
	     * - {@link ng.$http#head $http.head}
	     * - {@link ng.$http#post $http.post}
	     * - {@link ng.$http#put $http.put}
	     * - {@link ng.$http#delete $http.delete}
	     * - {@link ng.$http#jsonp $http.jsonp}
	     * - {@link ng.$http#patch $http.patch}
	     *
	     *
	     * ## Writing Unit Tests that use $http
	     * When unit testing (using {@link ngMock ngMock}), it is necessary to call
	     * {@link ngMock.$httpBackend#flush $httpBackend.flush()} to flush each pending
	     * request using trained responses.
	     *
	     * ```
	     * $httpBackend.expectGET(...);
	     * $http.get(...);
	     * $httpBackend.flush();
	     * ```
	     *
	     * ## Deprecation Notice
	     * <div class="alert alert-danger">
	     *   The `$http` legacy promise methods `success` and `error` have been deprecated.
	     *   Use the standard `then` method instead.
	     *   If {@link $httpProvider#useLegacyPromiseExtensions `$httpProvider.useLegacyPromiseExtensions`} is set to
	     *   `false` then these methods will throw {@link $http:legacy `$http/legacy`} error.
	     * </div>
	     *
	     * ## Setting HTTP Headers
	     *
	     * The $http service will automatically add certain HTTP headers to all requests. These defaults
	     * can be fully configured by accessing the `$httpProvider.defaults.headers` configuration
	     * object, which currently contains this default configuration:
	     *
	     * - `$httpProvider.defaults.headers.common` (headers that are common for all requests):
	     *   - `Accept: application/json, text/plain, * / *`
	     * - `$httpProvider.defaults.headers.post`: (header defaults for POST requests)
	     *   - `Content-Type: application/json`
	     * - `$httpProvider.defaults.headers.put` (header defaults for PUT requests)
	     *   - `Content-Type: application/json`
	     *
	     * To add or overwrite these defaults, simply add or remove a property from these configuration
	     * objects. To add headers for an HTTP method other than POST or PUT, simply add a new object
	     * with the lowercased HTTP method name as the key, e.g.
	     * `$httpProvider.defaults.headers.get = { 'My-Header' : 'value' }`.
	     *
	     * The defaults can also be set at runtime via the `$http.defaults` object in the same
	     * fashion. For example:
	     *
	     * ```
	     * module.run(function($http) {
	     *   $http.defaults.headers.common.Authorization = 'Basic YmVlcDpib29w';
	     * });
	     * ```
	     *
	     * In addition, you can supply a `headers` property in the config object passed when
	     * calling `$http(config)`, which overrides the defaults without changing them globally.
	     *
	     * To explicitly remove a header automatically added via $httpProvider.defaults.headers on a per request basis,
	     * Use the `headers` property, setting the desired header to `undefined`. For example:
	     *
	     * ```js
	     * var req = {
	     *  method: 'POST',
	     *  url: 'http://example.com',
	     *  headers: {
	     *    'Content-Type': undefined
	     *  },
	     *  data: { test: 'test' }
	     * }
	     *
	     * $http(req).then(function(){...}, function(){...});
	     * ```
	     *
	     * ## Transforming Requests and Responses
	     *
	     * Both requests and responses can be transformed using transformation functions: `transformRequest`
	     * and `transformResponse`. These properties can be a single function that returns
	     * the transformed value (`function(data, headersGetter, status)`) or an array of such transformation functions,
	     * which allows you to `push` or `unshift` a new transformation function into the transformation chain.
	     *
	     * <div class="alert alert-warning">
	     * **Note:** Angular does not make a copy of the `data` parameter before it is passed into the `transformRequest` pipeline.
	     * That means changes to the properties of `data` are not local to the transform function (since Javascript passes objects by reference).
	     * For example, when calling `$http.get(url, $scope.myObject)`, modifications to the object's properties in a transformRequest
	     * function will be reflected on the scope and in any templates where the object is data-bound.
	     * To prevent this, transform functions should have no side-effects.
	     * If you need to modify properties, it is recommended to make a copy of the data, or create new object to return.
	     * </div>
	     *
	     * ### Default Transformations
	     *
	     * The `$httpProvider` provider and `$http` service expose `defaults.transformRequest` and
	     * `defaults.transformResponse` properties. If a request does not provide its own transformations
	     * then these will be applied.
	     *
	     * You can augment or replace the default transformations by modifying these properties by adding to or
	     * replacing the array.
	     *
	     * Angular provides the following default transformations:
	     *
	     * Request transformations (`$httpProvider.defaults.transformRequest` and `$http.defaults.transformRequest`):
	     *
	     * - If the `data` property of the request configuration object contains an object, serialize it
	     *   into JSON format.
	     *
	     * Response transformations (`$httpProvider.defaults.transformResponse` and `$http.defaults.transformResponse`):
	     *
	     *  - If XSRF prefix is detected, strip it (see Security Considerations section below).
	     *  - If JSON response is detected, deserialize it using a JSON parser.
	     *
	     *
	     * ### Overriding the Default Transformations Per Request
	     *
	     * If you wish override the request/response transformations only for a single request then provide
	     * `transformRequest` and/or `transformResponse` properties on the configuration object passed
	     * into `$http`.
	     *
	     * Note that if you provide these properties on the config object the default transformations will be
	     * overwritten. If you wish to augment the default transformations then you must include them in your
	     * local transformation array.
	     *
	     * The following code demonstrates adding a new response transformation to be run after the default response
	     * transformations have been run.
	     *
	     * ```js
	     * function appendTransform(defaults, transform) {
	     *
	     *   // We can't guarantee that the default transformation is an array
	     *   defaults = angular.isArray(defaults) ? defaults : [defaults];
	     *
	     *   // Append the new transformation to the defaults
	     *   return defaults.concat(transform);
	     * }
	     *
	     * $http({
	     *   url: '...',
	     *   method: 'GET',
	     *   transformResponse: appendTransform($http.defaults.transformResponse, function(value) {
	     *     return doTransform(value);
	     *   })
	     * });
	     * ```
	     *
	     *
	     * ## Caching
	     *
	     * {@link ng.$http `$http`} responses are not cached by default. To enable caching, you must
	     * set the config.cache value or the default cache value to TRUE or to a cache object (created
	     * with {@link ng.$cacheFactory `$cacheFactory`}). If defined, the value of config.cache takes
	     * precedence over the default cache value.
	     *
	     * In order to:
	     *   * cache all responses - set the default cache value to TRUE or to a cache object
	     *   * cache a specific response - set config.cache value to TRUE or to a cache object
	     *
	     * If caching is enabled, but neither the default cache nor config.cache are set to a cache object,
	     * then the default `$cacheFactory($http)` object is used.
	     *
	     * The default cache value can be set by updating the
	     * {@link ng.$http#defaults `$http.defaults.cache`} property or the
	     * {@link $httpProvider#defaults `$httpProvider.defaults.cache`} property.
	     *
	     * When caching is enabled, {@link ng.$http `$http`} stores the response from the server using
	     * the relevant cache object. The next time the same request is made, the response is returned
	     * from the cache without sending a request to the server.
	     *
	     * Take note that:
	     *
	     *   * Only GET and JSONP requests are cached.
	     *   * The cache key is the request URL including search parameters; headers are not considered.
	     *   * Cached responses are returned asynchronously, in the same way as responses from the server.
	     *   * If multiple identical requests are made using the same cache, which is not yet populated,
	     *     one request will be made to the server and remaining requests will return the same response.
	     *   * A cache-control header on the response does not affect if or how responses are cached.
	     *
	     *
	     * ## Interceptors
	     *
	     * Before you start creating interceptors, be sure to understand the
	     * {@link ng.$q $q and deferred/promise APIs}.
	     *
	     * For purposes of global error handling, authentication, or any kind of synchronous or
	     * asynchronous pre-processing of request or postprocessing of responses, it is desirable to be
	     * able to intercept requests before they are handed to the server and
	     * responses before they are handed over to the application code that
	     * initiated these requests. The interceptors leverage the {@link ng.$q
	     * promise APIs} to fulfill this need for both synchronous and asynchronous pre-processing.
	     *
	     * The interceptors are service factories that are registered with the `$httpProvider` by
	     * adding them to the `$httpProvider.interceptors` array. The factory is called and
	     * injected with dependencies (if specified) and returns the interceptor.
	     *
	     * There are two kinds of interceptors (and two kinds of rejection interceptors):
	     *
	     *   * `request`: interceptors get called with a http {@link $http#usage config} object. The function is free to
	     *     modify the `config` object or create a new one. The function needs to return the `config`
	     *     object directly, or a promise containing the `config` or a new `config` object.
	     *   * `requestError`: interceptor gets called when a previous interceptor threw an error or
	     *     resolved with a rejection.
	     *   * `response`: interceptors get called with http `response` object. The function is free to
	     *     modify the `response` object or create a new one. The function needs to return the `response`
	     *     object directly, or as a promise containing the `response` or a new `response` object.
	     *   * `responseError`: interceptor gets called when a previous interceptor threw an error or
	     *     resolved with a rejection.
	     *
	     *
	     * ```js
	     *   // register the interceptor as a service
	     *   $provide.factory('myHttpInterceptor', function($q, dependency1, dependency2) {
	     *     return {
	     *       // optional method
	     *       'request': function(config) {
	     *         // do something on success
	     *         return config;
	     *       },
	     *
	     *       // optional method
	     *      'requestError': function(rejection) {
	     *         // do something on error
	     *         if (canRecover(rejection)) {
	     *           return responseOrNewPromise
	     *         }
	     *         return $q.reject(rejection);
	     *       },
	     *
	     *
	     *
	     *       // optional method
	     *       'response': function(response) {
	     *         // do something on success
	     *         return response;
	     *       },
	     *
	     *       // optional method
	     *      'responseError': function(rejection) {
	     *         // do something on error
	     *         if (canRecover(rejection)) {
	     *           return responseOrNewPromise
	     *         }
	     *         return $q.reject(rejection);
	     *       }
	     *     };
	     *   });
	     *
	     *   $httpProvider.interceptors.push('myHttpInterceptor');
	     *
	     *
	     *   // alternatively, register the interceptor via an anonymous factory
	     *   $httpProvider.interceptors.push(function($q, dependency1, dependency2) {
	     *     return {
	     *      'request': function(config) {
	     *          // same as above
	     *       },
	     *
	     *       'response': function(response) {
	     *          // same as above
	     *       }
	     *     };
	     *   });
	     * ```
	     *
	     * ## Security Considerations
	     *
	     * When designing web applications, consider security threats from:
	     *
	     * - [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)
	     * - [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery)
	     *
	     * Both server and the client must cooperate in order to eliminate these threats. Angular comes
	     * pre-configured with strategies that address these issues, but for this to work backend server
	     * cooperation is required.
	     *
	     * ### JSON Vulnerability Protection
	     *
	     * A [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)
	     * allows third party website to turn your JSON resource URL into
	     * [JSONP](http://en.wikipedia.org/wiki/JSONP) request under some conditions. To
	     * counter this your server can prefix all JSON requests with following string `")]}',\n"`.
	     * Angular will automatically strip the prefix before processing it as JSON.
	     *
	     * For example if your server needs to return:
	     * ```js
	     * ['one','two']
	     * ```
	     *
	     * which is vulnerable to attack, your server can return:
	     * ```js
	     * )]}',
	     * ['one','two']
	     * ```
	     *
	     * Angular will strip the prefix, before processing the JSON.
	     *
	     *
	     * ### Cross Site Request Forgery (XSRF) Protection
	     *
	     * [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery) is an attack technique by
	     * which the attacker can trick an authenticated user into unknowingly executing actions on your
	     * website. Angular provides a mechanism to counter XSRF. When performing XHR requests, the
	     * $http service reads a token from a cookie (by default, `XSRF-TOKEN`) and sets it as an HTTP
	     * header (`X-XSRF-TOKEN`). Since only JavaScript that runs on your domain could read the
	     * cookie, your server can be assured that the XHR came from JavaScript running on your domain.
	     * The header will not be set for cross-domain requests.
	     *
	     * To take advantage of this, your server needs to set a token in a JavaScript readable session
	     * cookie called `XSRF-TOKEN` on the first HTTP GET request. On subsequent XHR requests the
	     * server can verify that the cookie matches `X-XSRF-TOKEN` HTTP header, and therefore be sure
	     * that only JavaScript running on your domain could have sent the request. The token must be
	     * unique for each user and must be verifiable by the server (to prevent the JavaScript from
	     * making up its own tokens). We recommend that the token is a digest of your site's
	     * authentication cookie with a [salt](https://en.wikipedia.org/wiki/Salt_(cryptography&#41;)
	     * for added security.
	     *
	     * The name of the headers can be specified using the xsrfHeaderName and xsrfCookieName
	     * properties of either $httpProvider.defaults at config-time, $http.defaults at run-time,
	     * or the per-request config object.
	     *
	     * In order to prevent collisions in environments where multiple Angular apps share the
	     * same domain or subdomain, we recommend that each application uses unique cookie name.
	     *
	     * @param {object} config Object describing the request to be made and how it should be
	     *    processed. The object has following properties:
	     *
	     *    - **method** – `{string}` – HTTP method (e.g. 'GET', 'POST', etc)
	     *    - **url** – `{string}` – Absolute or relative URL of the resource that is being requested.
	     *    - **params** – `{Object.<string|Object>}` – Map of strings or objects which will be serialized
	     *      with the `paramSerializer` and appended as GET parameters.
	     *    - **data** – `{string|Object}` – Data to be sent as the request message data.
	     *    - **headers** – `{Object}` – Map of strings or functions which return strings representing
	     *      HTTP headers to send to the server. If the return value of a function is null, the
	     *      header will not be sent. Functions accept a config object as an argument.
	     *    - **eventHandlers** - `{Object}` - Event listeners to be bound to the XMLHttpRequest object.
	     *      To bind events to the XMLHttpRequest upload object, use `uploadEventHandlers`.
	     *      The handler will be called in the context of a `$apply` block.
	     *    - **uploadEventHandlers** - `{Object}` - Event listeners to be bound to the XMLHttpRequest upload
	     *      object. To bind events to the XMLHttpRequest object, use `eventHandlers`.
	     *      The handler will be called in the context of a `$apply` block.
	     *    - **xsrfHeaderName** – `{string}` – Name of HTTP header to populate with the XSRF token.
	     *    - **xsrfCookieName** – `{string}` – Name of cookie containing the XSRF token.
	     *    - **transformRequest** –
	     *      `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –
	     *      transform function or an array of such functions. The transform function takes the http
	     *      request body and headers and returns its transformed (typically serialized) version.
	     *      See {@link ng.$http#overriding-the-default-transformations-per-request
	     *      Overriding the Default Transformations}
	     *    - **transformResponse** –
	     *      `{function(data, headersGetter, status)|Array.<function(data, headersGetter, status)>}` –
	     *      transform function or an array of such functions. The transform function takes the http
	     *      response body, headers and status and returns its transformed (typically deserialized) version.
	     *      See {@link ng.$http#overriding-the-default-transformations-per-request
	     *      Overriding the Default Transformations}
	     *    - **paramSerializer** - `{string|function(Object<string,string>):string}` - A function used to
	     *      prepare the string representation of request parameters (specified as an object).
	     *      If specified as string, it is interpreted as function registered with the
	     *      {@link $injector $injector}, which means you can create your own serializer
	     *      by registering it as a {@link auto.$provide#service service}.
	     *      The default serializer is the {@link $httpParamSerializer $httpParamSerializer};
	     *      alternatively, you can use the {@link $httpParamSerializerJQLike $httpParamSerializerJQLike}
	     *    - **cache** – `{boolean|Object}` – A boolean value or object created with
	     *      {@link ng.$cacheFactory `$cacheFactory`} to enable or disable caching of the HTTP response.
	     *      See {@link $http#caching $http Caching} for more information.
	     *    - **timeout** – `{number|Promise}` – timeout in milliseconds, or {@link ng.$q promise}
	     *      that should abort the request when resolved.
	     *    - **withCredentials** - `{boolean}` - whether to set the `withCredentials` flag on the
	     *      XHR object. See [requests with credentials](https://developer.mozilla.org/docs/Web/HTTP/Access_control_CORS#Requests_with_credentials)
	     *      for more information.
	     *    - **responseType** - `{string}` - see
	     *      [XMLHttpRequest.responseType](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#xmlhttprequest-responsetype).
	     *
	     * @returns {HttpPromise} Returns a {@link ng.$q `Promise}` that will be resolved to a response object
	     *                        when the request succeeds or fails.
	     *
	     *
	     * @property {Array.<Object>} pendingRequests Array of config objects for currently pending
	     *   requests. This is primarily meant to be used for debugging purposes.
	     *
	     *
	     * @example
	<example module="httpExample">
	<file name="index.html">
	  <div ng-controller="FetchController">
	    <select ng-model="method" aria-label="Request method">
	      <option>GET</option>
	      <option>JSONP</option>
	    </select>
	    <input type="text" ng-model="url" size="80" aria-label="URL" />
	    <button id="fetchbtn" ng-click="fetch()">fetch</button><br>
	    <button id="samplegetbtn" ng-click="updateModel('GET', 'http-hello.html')">Sample GET</button>
	    <button id="samplejsonpbtn"
	      ng-click="updateModel('JSONP',
	                    'https://angularjs.org/greet.php?callback=JSON_CALLBACK&name=Super%20Hero')">
	      Sample JSONP
	    </button>
	    <button id="invalidjsonpbtn"
	      ng-click="updateModel('JSONP', 'https://angularjs.org/doesntexist&callback=JSON_CALLBACK')">
	        Invalid JSONP
	      </button>
	    <pre>http status code: {{status}}</pre>
	    <pre>http response data: {{data}}</pre>
	  </div>
	</file>
	<file name="script.js">
	  angular.module('httpExample', [])
	    .controller('FetchController', ['$scope', '$http', '$templateCache',
	      function($scope, $http, $templateCache) {
	        $scope.method = 'GET';
	        $scope.url = 'http-hello.html';
	
	        $scope.fetch = function() {
	          $scope.code = null;
	          $scope.response = null;
	
	          $http({method: $scope.method, url: $scope.url, cache: $templateCache}).
	            then(function(response) {
	              $scope.status = response.status;
	              $scope.data = response.data;
	            }, function(response) {
	              $scope.data = response.data || "Request failed";
	              $scope.status = response.status;
	          });
	        };
	
	        $scope.updateModel = function(method, url) {
	          $scope.method = method;
	          $scope.url = url;
	        };
	      }]);
	</file>
	<file name="http-hello.html">
	  Hello, $http!
	</file>
	<file name="protractor.js" type="protractor">
	  var status = element(by.binding('status'));
	  var data = element(by.binding('data'));
	  var fetchBtn = element(by.id('fetchbtn'));
	  var sampleGetBtn = element(by.id('samplegetbtn'));
	  var sampleJsonpBtn = element(by.id('samplejsonpbtn'));
	  var invalidJsonpBtn = element(by.id('invalidjsonpbtn'));
	
	  it('should make an xhr GET request', function() {
	    sampleGetBtn.click();
	    fetchBtn.click();
	    expect(status.getText()).toMatch('200');
	    expect(data.getText()).toMatch(/Hello, \$http!/);
	  });
	
	// Commented out due to flakes. See https://github.com/angular/angular.js/issues/9185
	// it('should make a JSONP request to angularjs.org', function() {
	//   sampleJsonpBtn.click();
	//   fetchBtn.click();
	//   expect(status.getText()).toMatch('200');
	//   expect(data.getText()).toMatch(/Super Hero!/);
	// });
	
	  it('should make JSONP request to invalid URL and invoke the error handler',
	      function() {
	    invalidJsonpBtn.click();
	    fetchBtn.click();
	    expect(status.getText()).toMatch('0');
	    expect(data.getText()).toMatch('Request failed');
	  });
	</file>
	</example>
	     */
function p(e){function o(t){
// make a copy since the response must be cacheable
var e=l({},t);return e.data=Oe(t.data,t.headers,t.status,s.transformResponse),Re(t.status)?e:f.reject(e)}function a(t,e){var n,r={};return i(t,function(t,i){S(t)?(n=t(e),null!=n&&(r[i]=n)):r[i]=t}),r}function u(e){var n,r,i,o=t.headers,u=l({},e.headers);o=l({},o.common,o[Rr(e.method)]);
// using for-in instead of forEach to avoid unnecessary iteration after header has been found
t:for(n in o){r=Rr(n);for(i in u)if(Rr(i)===r)continue t;u[n]=o[n]}
// execute if header value is a function for merged headers
return a(u,F(e))}if(!b(e))throw n("$http")("badreq","Http request configuration must be an object.  Received: {0}",e);if(!x(e.url))throw n("$http")("badreq","Http request configuration url must be a string.  Received: {0}",e.url);var s=l({method:"get",transformRequest:t.transformRequest,transformResponse:t.transformResponse,paramSerializer:t.paramSerializer},e);s.headers=u(e),s.method=jr(s.method),s.paramSerializer=x(s.paramSerializer)?h.get(s.paramSerializer):s.paramSerializer;var c=function(e){var n=e.headers,r=Oe(e.data,Te(n),void 0,e.transformRequest);
// send request
// strip content-type if data is undefined
return y(r)&&i(n,function(t,e){"content-type"===Rr(e)&&delete n[e]}),y(e.withCredentials)&&!y(t.withCredentials)&&(e.withCredentials=t.withCredentials),g(e,r).then(o,o)},p=[c,void 0],d=f.when(s);for(
// apply interceptors
i(_,function(t){(t.request||t.requestError)&&p.unshift(t.request,t.requestError),(t.response||t.responseError)&&p.push(t.response,t.responseError)});p.length;){var v=p.shift(),m=p.shift();d=d.then(v,m)}return r?(d.success=function(t){return ht(t,"fn"),d.then(function(e){t(e.data,e.status,e.headers,s)}),d},d.error=function(t){return ht(t,"fn"),d.then(null,function(e){t(e.data,e.status,e.headers,s)}),d}):(d.success=no("success"),d.error=no("error")),d}function d(t){i(arguments,function(t){p[t]=function(e,n){return p(l({},n||{},{method:t,url:e}))}})}function v(t){i(arguments,function(t){p[t]=function(e,n,r){return p(l({},r||{},{method:t,url:e,data:n}))}})}/**
	     * Makes the request.
	     *
	     * !!! ACCESSES CLOSURE VARS:
	     * $httpBackend, defaults, $log, $rootScope, defaultCache, $http.pendingRequests
	     */
function g(n,r){function o(t){if(t){var n={};return i(t,function(t,r){n[r]=function(n){function r(){t(n)}e?c.$applyAsync(r):c.$$phase?r():c.$apply(r)}}),n}}/**
	       * Callback registered to $httpBackend():
	       *  - caches the response if desired
	       *  - resolves the raw $http promise
	       *  - calls $apply
	       */
function s(t,n,r,i){function o(){l(n,t,r,i)}v&&(Re(t)?v.put(S,[t,n,ke(r),i]):
// remove promise from the cache
v.remove(S)),e?c.$applyAsync(o):(o(),c.$$phase||c.$apply())}/**
	       * Resolves the raw $http promise.
	       */
function l(t,e,r,i){
//status: HTTP response status code, 0, -1 (aborted by timeout / promise)
e=e>=-1?e:0,(Re(e)?x.resolve:x.reject)({data:t,status:e,headers:Te(r),config:n,statusText:i})}function h(t){l(t.data,t.status,F(t.headers()),t.statusText)}function d(){var t=p.pendingRequests.indexOf(n);t!==-1&&p.pendingRequests.splice(t,1)}var v,g,x=f.defer(),_=x.promise,C=n.headers,S=m(n.url,n.paramSerializer(n.params));
// if we won't have the response in cache, set the xsrf headers and
// send the request to the backend
if(p.pendingRequests.push(n),_.then(d,d),!n.cache&&!t.cache||n.cache===!1||"GET"!==n.method&&"JSONP"!==n.method||(v=b(n.cache)?n.cache:b(t.cache)?t.cache:w),v&&(g=v.get(S),$(g)?N(g)?
// cached request has already been sent, but there is no response yet
g.then(h,h):
// serving from cache
Gr(g)?l(g[1],g[0],F(g[2]),g[3]):l(g,200,{},"OK"):
// put the promise for the non-transformed response into cache as a placeholder
v.put(S,_)),y(g)){var A=Pn(n.url)?u()[n.xsrfCookieName||t.xsrfCookieName]:void 0;A&&(C[n.xsrfHeaderName||t.xsrfHeaderName]=A),a(n.method,S,r,s,C,n.timeout,n.withCredentials,n.responseType,o(n.eventHandlers),o(n.uploadEventHandlers))}return _}function m(t,e){return e.length>0&&(t+=(t.indexOf("?")==-1?"?":"&")+e),t}var w=s("$http");/**
	     * Make sure that default param serializer is exposed as a function
	     */
t.paramSerializer=x(t.paramSerializer)?h.get(t.paramSerializer):t.paramSerializer;/**
	     * Interceptors stored in reverse order. Inner interceptors before outer interceptors.
	     * The reversal is needed so that we can build up the interception chain around the
	     * server request.
	     */
var _=[];/**
	     * @ngdoc method
	     * @name $http#get
	     *
	     * @description
	     * Shortcut method to perform `GET` request.
	     *
	     * @param {string} url Relative or absolute URL specifying the destination of the request
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     */
/**
	     * @ngdoc method
	     * @name $http#delete
	     *
	     * @description
	     * Shortcut method to perform `DELETE` request.
	     *
	     * @param {string} url Relative or absolute URL specifying the destination of the request
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     */
/**
	     * @ngdoc method
	     * @name $http#head
	     *
	     * @description
	     * Shortcut method to perform `HEAD` request.
	     *
	     * @param {string} url Relative or absolute URL specifying the destination of the request
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     */
/**
	     * @ngdoc method
	     * @name $http#jsonp
	     *
	     * @description
	     * Shortcut method to perform `JSONP` request.
	     *
	     * @param {string} url Relative or absolute URL specifying the destination of the request.
	     *                     The name of the callback should be the string `JSON_CALLBACK`.
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     */
/**
	     * @ngdoc method
	     * @name $http#post
	     *
	     * @description
	     * Shortcut method to perform `POST` request.
	     *
	     * @param {string} url Relative or absolute URL specifying the destination of the request
	     * @param {*} data Request content
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     */
/**
	     * @ngdoc method
	     * @name $http#put
	     *
	     * @description
	     * Shortcut method to perform `PUT` request.
	     *
	     * @param {string} url Relative or absolute URL specifying the destination of the request
	     * @param {*} data Request content
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     */
/**
	      * @ngdoc method
	      * @name $http#patch
	      *
	      * @description
	      * Shortcut method to perform `PATCH` request.
	      *
	      * @param {string} url Relative or absolute URL specifying the destination of the request
	      * @param {*} data Request content
	      * @param {Object=} config Optional configuration object
	      * @returns {HttpPromise} Future object
	      */
/**
	         * @ngdoc property
	         * @name $http#defaults
	         *
	         * @description
	         * Runtime equivalent of the `$httpProvider.defaults` property. Allows configuration of
	         * default headers, withCredentials as well as request and response transformations.
	         *
	         * See "Setting HTTP Headers" and "Transforming Requests and Responses" sections above.
	         */
return i(o,function(t){_.unshift(x(t)?h.get(t):h.invoke(t))}),p.pendingRequests=[],d("get","delete","head","jsonp"),v("post","put","patch"),p.defaults=t,p}]}/**
	 * @ngdoc service
	 * @name $xhrFactory
	 *
	 * @description
	 * Factory function used to create XMLHttpRequest objects.
	 *
	 * Replace or decorate this service to create your own custom XMLHttpRequest objects.
	 *
	 * ```
	 * angular.module('myApp', [])
	 * .factory('$xhrFactory', function() {
	 *   return function createXhr(method, url) {
	 *     return new window.XMLHttpRequest({mozSystem: true});
	 *   };
	 * });
	 * ```
	 *
	 * @param {string} method HTTP method of the request (GET, POST, PUT, ..)
	 * @param {string} url URL of the request.
	 */
function Ne(){this.$get=function(){return function(){return new e.XMLHttpRequest}}}/**
	 * @ngdoc service
	 * @name $httpBackend
	 * @requires $window
	 * @requires $document
	 * @requires $xhrFactory
	 *
	 * @description
	 * HTTP backend used by the {@link ng.$http service} that delegates to
	 * XMLHttpRequest object or JSONP and deals with browser incompatibilities.
	 *
	 * You should never need to use this service directly, instead use the higher-level abstractions:
	 * {@link ng.$http $http} or {@link ngResource.$resource $resource}.
	 *
	 * During testing this implementation is swapped with {@link ngMock.$httpBackend mock
	 * $httpBackend} which can be trained with responses.
	 */
function Pe(){this.$get=["$browser","$window","$document","$xhrFactory",function(t,e,n,r){return De(t,r,t.defer,e.angular.callbacks,n[0])}]}function De(t,e,n,r,o){function a(t,e,n){
// we can't use jQuery/jqLite here because jQuery does crazy stuff with script elements, e.g.:
// - fetches local scripts via XHR and evals them
// - adds and immediately removes script elements from the document
var i=o.createElement("script"),a=null;return i.type="text/javascript",i.src=t,i.async=!0,a=function(t){pi(i,"load",a),pi(i,"error",a),o.body.removeChild(i),i=null;var u=-1,s="unknown";t&&("load"!==t.type||r[e].called||(t={type:"error"}),s=t.type,u="error"===t.type?404:200),n&&n(u,s)},hi(i,"load",a),hi(i,"error",a),o.body.appendChild(i),a}
// TODO(vojta): fix the signature
return function(o,u,s,c,l,f,h,p,v,g){function m(){x&&x(),_&&_.abort()}function b(e,r,i,o,a){
// cancel timeout and subsequent timeout promise resolution
$(A)&&n.cancel(A),x=_=null,e(r,i,o,a),t.$$completeOutstandingRequest(d)}if(t.$$incOutstandingRequestCount(),u=u||t.url(),"jsonp"==Rr(o)){var w="_"+(r.counter++).toString(36);r[w]=function(t){r[w].data=t,r[w].called=!0};var x=a(u.replace("JSON_CALLBACK","angular.callbacks."+w),w,function(t,e){b(c,t,r[w].data,"",e),r[w]=d})}else{var _=e(o,u);_.open(o,u,!0),i(l,function(t,e){$(t)&&_.setRequestHeader(e,t)}),_.onload=function(){var t=_.statusText||"",e="response"in _?_.response:_.responseText,n=1223===_.status?204:_.status;
// fix status code when it is 0 (0 status is undocumented).
// Occurs when accessing file resources or on Android 4.1 stock browser
// while retrieving files from application cache.
0===n&&(n=e?200:"file"==Nn(u).protocol?404:0),b(c,n,e,_.getAllResponseHeaders(),t)};var C=function(){
// The response is always empty
// See https://xhr.spec.whatwg.org/#request-error-steps and https://fetch.spec.whatwg.org/#concept-network-error
b(c,-1,null,null,"")};if(_.onerror=C,_.onabort=C,i(v,function(t,e){_.addEventListener(e,t)}),i(g,function(t,e){_.upload.addEventListener(e,t)}),h&&(_.withCredentials=!0),p)try{_.responseType=p}catch(S){
// WebKit added support for the json responseType value on 09/03/2013
// https://bugs.webkit.org/show_bug.cgi?id=73648. Versions of Safari prior to 7 are
// known to throw when setting the value "json" as the response type. Other older
// browsers implementing the responseType
//
// The json response type can be ignored if not supported, because JSON payloads are
// parsed on the client-side regardless.
if("json"!==p)throw S}_.send(y(s)?null:s)}if(f>0)var A=n(m,f);else N(f)&&f.then(m)}}/**
	 * @ngdoc provider
	 * @name $interpolateProvider
	 *
	 * @description
	 *
	 * Used for configuring the interpolation markup. Defaults to `{{` and `}}`.
	 *
	 * <div class="alert alert-danger">
	 * This feature is sometimes used to mix different markup languages, e.g. to wrap an Angular
	 * template within a Python Jinja template (or any other template language). Mixing templating
	 * languages is **very dangerous**. The embedding template language will not safely escape Angular
	 * expressions, so any user-controlled values in the template will cause Cross Site Scripting (XSS)
	 * security bugs!
	 * </div>
	 *
	 * @example
	<example name="custom-interpolation-markup" module="customInterpolationApp">
	<file name="index.html">
	<script>
	  var customInterpolationApp = angular.module('customInterpolationApp', []);
	
	  customInterpolationApp.config(function($interpolateProvider) {
	    $interpolateProvider.startSymbol('//');
	    $interpolateProvider.endSymbol('//');
	  });
	
	
	  customInterpolationApp.controller('DemoController', function() {
	      this.label = "This binding is brought you by // interpolation symbols.";
	  });
	</script>
	<div ng-controller="DemoController as demo">
	    //demo.label//
	</div>
	</file>
	<file name="protractor.js" type="protractor">
	  it('should interpolate binding with custom symbols', function() {
	    expect(element(by.binding('demo.label')).getText()).toBe('This binding is brought you by // interpolation symbols.');
	  });
	</file>
	</example>
	 */
function Me(){var t="{{",e="}}";/**
	   * @ngdoc method
	   * @name $interpolateProvider#startSymbol
	   * @description
	   * Symbol to denote start of expression in the interpolated string. Defaults to `{{`.
	   *
	   * @param {string=} value new value to set the starting symbol to.
	   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.
	   */
this.startSymbol=function(e){return e?(t=e,this):t},/**
	   * @ngdoc method
	   * @name $interpolateProvider#endSymbol
	   * @description
	   * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.
	   *
	   * @param {string=} value new value to set the ending symbol to.
	   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.
	   */
this.endSymbol=function(t){return t?(e=t,this):e},this.$get=["$parse","$exceptionHandler","$sce",function(n,r,i){function o(t){return"\\\\\\"+t}function a(n){return n.replace(p,t).replace(d,e)}function u(t){if(null==t)// null || undefined
return"";switch(typeof t){case"string":break;case"number":t=""+t;break;default:t=G(t)}return t}
//TODO: this is the same as the constantWatchDelegate in parse.js
function s(t,e,n,r){var i;return i=t.$watch(function(t){return i(),r(t)},e,n)}/**
	     * @ngdoc service
	     * @name $interpolate
	     * @kind function
	     *
	     * @requires $parse
	     * @requires $sce
	     *
	     * @description
	     *
	     * Compiles a string with markup into an interpolation function. This service is used by the
	     * HTML {@link ng.$compile $compile} service for data binding. See
	     * {@link ng.$interpolateProvider $interpolateProvider} for configuring the
	     * interpolation markup.
	     *
	     *
	     * ```js
	     *   var $interpolate = ...; // injected
	     *   var exp = $interpolate('Hello {{name | uppercase}}!');
	     *   expect(exp({name:'Angular'})).toEqual('Hello ANGULAR!');
	     * ```
	     *
	     * `$interpolate` takes an optional fourth argument, `allOrNothing`. If `allOrNothing` is
	     * `true`, the interpolation function will return `undefined` unless all embedded expressions
	     * evaluate to a value other than `undefined`.
	     *
	     * ```js
	     *   var $interpolate = ...; // injected
	     *   var context = {greeting: 'Hello', name: undefined };
	     *
	     *   // default "forgiving" mode
	     *   var exp = $interpolate('{{greeting}} {{name}}!');
	     *   expect(exp(context)).toEqual('Hello !');
	     *
	     *   // "allOrNothing" mode
	     *   exp = $interpolate('{{greeting}} {{name}}!', false, null, true);
	     *   expect(exp(context)).toBeUndefined();
	     *   context.name = 'Angular';
	     *   expect(exp(context)).toEqual('Hello Angular!');
	     * ```
	     *
	     * `allOrNothing` is useful for interpolating URLs. `ngSrc` and `ngSrcset` use this behavior.
	     *
	     * ####Escaped Interpolation
	     * $interpolate provides a mechanism for escaping interpolation markers. Start and end markers
	     * can be escaped by preceding each of their characters with a REVERSE SOLIDUS U+005C (backslash).
	     * It will be rendered as a regular start/end marker, and will not be interpreted as an expression
	     * or binding.
	     *
	     * This enables web-servers to prevent script injection attacks and defacing attacks, to some
	     * degree, while also enabling code examples to work without relying on the
	     * {@link ng.directive:ngNonBindable ngNonBindable} directive.
	     *
	     * **For security purposes, it is strongly encouraged that web servers escape user-supplied data,
	     * replacing angle brackets (&lt;, &gt;) with &amp;lt; and &amp;gt; respectively, and replacing all
	     * interpolation start/end markers with their escaped counterparts.**
	     *
	     * Escaped interpolation markers are only replaced with the actual interpolation markers in rendered
	     * output when the $interpolate service processes the text. So, for HTML elements interpolated
	     * by {@link ng.$compile $compile}, or otherwise interpolated with the `mustHaveExpression` parameter
	     * set to `true`, the interpolated text must contain an unescaped interpolation expression. As such,
	     * this is typically useful only when user-data is used in rendering a template from the server, or
	     * when otherwise untrusted data is used by a directive.
	     *
	     * <example>
	     *  <file name="index.html">
	     *    <div ng-init="username='A user'">
	     *      <p ng-init="apptitle='Escaping demo'">{{apptitle}}: \{\{ username = "defaced value"; \}\}
	     *        </p>
	     *      <p><strong>{{username}}</strong> attempts to inject code which will deface the
	     *        application, but fails to accomplish their task, because the server has correctly
	     *        escaped the interpolation start/end markers with REVERSE SOLIDUS U+005C (backslash)
	     *        characters.</p>
	     *      <p>Instead, the result of the attempted script injection is visible, and can be removed
	     *        from the database by an administrator.</p>
	     *    </div>
	     *  </file>
	     * </example>
	     *
	     * @param {string} text The text with markup to interpolate.
	     * @param {boolean=} mustHaveExpression if set to true then the interpolation string must have
	     *    embedded expression in order to return an interpolation function. Strings with no
	     *    embedded expression will return null for the interpolation function.
	     * @param {string=} trustedContext when provided, the returned function passes the interpolated
	     *    result through {@link ng.$sce#getTrusted $sce.getTrusted(interpolatedResult,
	     *    trustedContext)} before returning it.  Refer to the {@link ng.$sce $sce} service that
	     *    provides Strict Contextual Escaping for details.
	     * @param {boolean=} allOrNothing if `true`, then the returned function returns undefined
	     *    unless all embedded expressions evaluate to a value other than `undefined`.
	     * @returns {function(context)} an interpolation function which is used to compute the
	     *    interpolated string. The function has these parameters:
	     *
	     * - `context`: evaluation context for all expressions embedded in the interpolated text
	     */
function c(o,c,p,d){function v(t){try{return t=j(t),d&&!$(t)?t:u(t)}catch(e){r(ro.interr(o,e))}}
// Provide a quick exit and simplified result function for text with no interpolation
if(!o.length||o.indexOf(t)===-1){var m;if(!c){var b=a(o);m=g(b),m.exp=o,m.expressions=[],m.$$watchDelegate=s}return m}d=!!d;for(var w,x,_,C=0,A=[],E=[],k=o.length,T=[],O=[];C<k;){if((w=o.indexOf(t,C))==-1||(x=o.indexOf(e,w+f))==-1){
// we did not find an interpolation, so we have to add the remainder to the separators array
C!==k&&T.push(a(o.substring(C)));break}C!==w&&T.push(a(o.substring(C,w))),_=o.substring(w+f,x),A.push(_),E.push(n(_,v)),C=x+h,O.push(T.length),T.push("")}if(
// Concatenating expressions makes it hard to reason about whether some combination of
// concatenated values are unsafe to use and could easily lead to XSS.  By requiring that a
// single expression be used for iframe[src], object[src], etc., we ensure that the value
// that's used is assigned or constructed by some JS code somewhere that is more testable or
// make it obvious that you bound the value to some user controlled value.  This helps reduce
// the load when auditing for XSS issues.
p&&T.length>1&&ro.throwNoconcat(o),!c||A.length){var R=function(t){for(var e=0,n=A.length;e<n;e++){if(d&&y(t[e]))return;T[O[e]]=t[e]}return T.join("")},j=function(t){return p?i.getTrusted(p,t):i.valueOf(t)};return l(function(t){var e=0,n=A.length,i=new Array(n);try{for(;e<n;e++)i[e]=E[e](t);return R(i)}catch(a){r(ro.interr(o,a))}},{
// all of these properties are undocumented for now
exp:o,//just for compatibility with regular watchers created via $watch
expressions:A,$$watchDelegate:function(t,e){var n;return t.$watchGroup(E,function(r,i){var o=R(r);S(e)&&e.call(this,o,r!==i?n:o,t),n=o})}})}}var f=t.length,h=e.length,p=new RegExp(t.replace(/./g,o),"g"),d=new RegExp(e.replace(/./g,o),"g");/**
	     * @ngdoc method
	     * @name $interpolate#startSymbol
	     * @description
	     * Symbol to denote the start of expression in the interpolated string. Defaults to `{{`.
	     *
	     * Use {@link ng.$interpolateProvider#startSymbol `$interpolateProvider.startSymbol`} to change
	     * the symbol.
	     *
	     * @returns {string} start symbol.
	     */
/**
	     * @ngdoc method
	     * @name $interpolate#endSymbol
	     * @description
	     * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.
	     *
	     * Use {@link ng.$interpolateProvider#endSymbol `$interpolateProvider.endSymbol`} to change
	     * the symbol.
	     *
	     * @returns {string} end symbol.
	     */
return c.startSymbol=function(){return t},c.endSymbol=function(){return e},c}]}function Ie(){this.$get=["$rootScope","$window","$q","$$q","$browser",function(t,e,n,r,i){/**
	      * @ngdoc service
	      * @name $interval
	      *
	      * @description
	      * Angular's wrapper for `window.setInterval`. The `fn` function is executed every `delay`
	      * milliseconds.
	      *
	      * The return value of registering an interval function is a promise. This promise will be
	      * notified upon each tick of the interval, and will be resolved after `count` iterations, or
	      * run indefinitely if `count` is not defined. The value of the notification will be the
	      * number of iterations that have run.
	      * To cancel an interval, call `$interval.cancel(promise)`.
	      *
	      * In tests you can use {@link ngMock.$interval#flush `$interval.flush(millis)`} to
	      * move forward by `millis` milliseconds and trigger any functions scheduled to run in that
	      * time.
	      *
	      * <div class="alert alert-warning">
	      * **Note**: Intervals created by this service must be explicitly destroyed when you are finished
	      * with them.  In particular they are not automatically destroyed when a controller's scope or a
	      * directive's element are destroyed.
	      * You should take this into consideration and make sure to always cancel the interval at the
	      * appropriate moment.  See the example below for more details on how and when to do this.
	      * </div>
	      *
	      * @param {function()} fn A function that should be called repeatedly.
	      * @param {number} delay Number of milliseconds between each function call.
	      * @param {number=} [count=0] Number of times to repeat. If not set, or 0, will repeat
	      *   indefinitely.
	      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
	      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
	      * @param {...*=} Pass additional parameters to the executed function.
	      * @returns {promise} A promise which will be notified on each iteration.
	      *
	      * @example
	      * <example module="intervalExample">
	      * <file name="index.html">
	      *   <script>
	      *     angular.module('intervalExample', [])
	      *       .controller('ExampleController', ['$scope', '$interval',
	      *         function($scope, $interval) {
	      *           $scope.format = 'M/d/yy h:mm:ss a';
	      *           $scope.blood_1 = 100;
	      *           $scope.blood_2 = 120;
	      *
	      *           var stop;
	      *           $scope.fight = function() {
	      *             // Don't start a new fight if we are already fighting
	      *             if ( angular.isDefined(stop) ) return;
	      *
	      *             stop = $interval(function() {
	      *               if ($scope.blood_1 > 0 && $scope.blood_2 > 0) {
	      *                 $scope.blood_1 = $scope.blood_1 - 3;
	      *                 $scope.blood_2 = $scope.blood_2 - 4;
	      *               } else {
	      *                 $scope.stopFight();
	      *               }
	      *             }, 100);
	      *           };
	      *
	      *           $scope.stopFight = function() {
	      *             if (angular.isDefined(stop)) {
	      *               $interval.cancel(stop);
	      *               stop = undefined;
	      *             }
	      *           };
	      *
	      *           $scope.resetFight = function() {
	      *             $scope.blood_1 = 100;
	      *             $scope.blood_2 = 120;
	      *           };
	      *
	      *           $scope.$on('$destroy', function() {
	      *             // Make sure that the interval is destroyed too
	      *             $scope.stopFight();
	      *           });
	      *         }])
	      *       // Register the 'myCurrentTime' directive factory method.
	      *       // We inject $interval and dateFilter service since the factory method is DI.
	      *       .directive('myCurrentTime', ['$interval', 'dateFilter',
	      *         function($interval, dateFilter) {
	      *           // return the directive link function. (compile function not needed)
	      *           return function(scope, element, attrs) {
	      *             var format,  // date format
	      *                 stopTime; // so that we can cancel the time updates
	      *
	      *             // used to update the UI
	      *             function updateTime() {
	      *               element.text(dateFilter(new Date(), format));
	      *             }
	      *
	      *             // watch the expression, and update the UI on change.
	      *             scope.$watch(attrs.myCurrentTime, function(value) {
	      *               format = value;
	      *               updateTime();
	      *             });
	      *
	      *             stopTime = $interval(updateTime, 1000);
	      *
	      *             // listen on DOM destroy (removal) event, and cancel the next UI update
	      *             // to prevent updating time after the DOM element was removed.
	      *             element.on('$destroy', function() {
	      *               $interval.cancel(stopTime);
	      *             });
	      *           }
	      *         }]);
	      *   </script>
	      *
	      *   <div>
	      *     <div ng-controller="ExampleController">
	      *       <label>Date format: <input ng-model="format"></label> <hr/>
	      *       Current time is: <span my-current-time="format"></span>
	      *       <hr/>
	      *       Blood 1 : <font color='red'>{{blood_1}}</font>
	      *       Blood 2 : <font color='red'>{{blood_2}}</font>
	      *       <button type="button" data-ng-click="fight()">Fight</button>
	      *       <button type="button" data-ng-click="stopFight()">StopFight</button>
	      *       <button type="button" data-ng-click="resetFight()">resetFight</button>
	      *     </div>
	      *   </div>
	      *
	      * </file>
	      * </example>
	      */
function o(o,u,s,c){function l(){f?o.apply(null,h):o(v)}var f=arguments.length>4,h=f?B(arguments,4):[],p=e.setInterval,d=e.clearInterval,v=0,g=$(c)&&!c,m=(g?r:n).defer(),y=m.promise;return s=$(s)?s:0,y.$$intervalId=p(function(){g?i.defer(l):t.$evalAsync(l),m.notify(v++),s>0&&v>=s&&(m.resolve(v),d(y.$$intervalId),delete a[y.$$intervalId]),g||t.$apply()},u),a[y.$$intervalId]=m,y}var a={};/**
	      * @ngdoc method
	      * @name $interval#cancel
	      *
	      * @description
	      * Cancels a task associated with the `promise`.
	      *
	      * @param {Promise=} promise returned by the `$interval` function.
	      * @returns {boolean} Returns `true` if the task was successfully canceled.
	      */
return o.cancel=function(t){return!!(t&&t.$$intervalId in a)&&(a[t.$$intervalId].reject("canceled"),e.clearInterval(t.$$intervalId),delete a[t.$$intervalId],!0)},o}]}/**
	 * Encode path using encodeUriSegment, ignoring forward slashes
	 *
	 * @param {string} path Path to encode
	 * @returns {string}
	 */
function Le(t){for(var e=t.split("/"),n=e.length;n--;)e[n]=nt(e[n]);return e.join("/")}function qe(t,e){var n=Nn(t);e.$$protocol=n.protocol,e.$$host=n.hostname,e.$$port=h(n.port)||oo[n.protocol]||null}function Ue(t,e){var n="/"!==t.charAt(0);n&&(t="/"+t);var r=Nn(t);e.$$path=decodeURIComponent(n&&"/"===r.pathname.charAt(0)?r.pathname.substring(1):r.pathname),e.$$search=tt(r.search),e.$$hash=decodeURIComponent(r.hash),
// make sure path starts with '/';
e.$$path&&"/"!=e.$$path.charAt(0)&&(e.$$path="/"+e.$$path)}/**
	 *
	 * @param {string} begin
	 * @param {string} whole
	 * @returns {string} returns text from whole after begin or undefined if it does not begin with
	 *                   expected string.
	 */
function Fe(t,e){if(0===e.indexOf(t))return e.substr(t.length)}function Ve(t){var e=t.indexOf("#");return e==-1?t:t.substr(0,e)}function He(t){return t.replace(/(#.+)|#$/,"$1")}function Be(t){return t.substr(0,Ve(t).lastIndexOf("/")+1)}/* return the server only (scheme://host:port) */
function We(t){return t.substring(0,t.indexOf("/",t.indexOf("//")+2))}/**
	 * LocationHtml5Url represents an url
	 * This object is exposed as $location service when HTML5 mode is enabled and supported
	 *
	 * @constructor
	 * @param {string} appBase application base URL
	 * @param {string} appBaseNoFile application base URL stripped of any filename
	 * @param {string} basePrefix url path prefix
	 */
function ze(t,e,n){this.$$html5=!0,n=n||"",qe(t,this),/**
	   * Parse given html5 (regular) url string into properties
	   * @param {string} url HTML5 url
	   * @private
	   */
this.$$parse=function(t){var n=Fe(e,t);if(!x(n))throw ao("ipthprfx",'Invalid url "{0}", missing path prefix "{1}".',t,e);Ue(n,this),this.$$path||(this.$$path="/"),this.$$compose()},/**
	   * Compose url and update `absUrl` property
	   * @private
	   */
this.$$compose=function(){var t=et(this.$$search),n=this.$$hash?"#"+nt(this.$$hash):"";this.$$url=Le(this.$$path)+(t?"?"+t:"")+n,this.$$absUrl=e+this.$$url.substr(1)},this.$$parseLinkUrl=function(r,i){if(i&&"#"===i[0])
// special case for links to hash fragments:
// keep the old url and only replace the hash fragment
return this.hash(i.slice(1)),!0;var o,a,u;return $(o=Fe(t,r))?(a=o,u=$(o=Fe(n,o))?e+(Fe("/",o)||o):t+a):$(o=Fe(e,r))?u=e+o:e==r+"/"&&(u=e),u&&this.$$parse(u),!!u}}/**
	 * LocationHashbangUrl represents url
	 * This object is exposed as $location service when developer doesn't opt into html5 mode.
	 * It also serves as the base class for html5 mode fallback on legacy browsers.
	 *
	 * @constructor
	 * @param {string} appBase application base URL
	 * @param {string} appBaseNoFile application base URL stripped of any filename
	 * @param {string} hashPrefix hashbang prefix
	 */
function Ge(t,e,n){qe(t,this),/**
	   * Parse given hashbang url into properties
	   * @param {string} url Hashbang url
	   * @private
	   */
this.$$parse=function(r){/*
	     * In Windows, on an anchor node on documents loaded from
	     * the filesystem, the browser will return a pathname
	     * prefixed with the drive name ('/C:/path') when a
	     * pathname without a drive is set:
	     *  * a.setAttribute('href', '/foo')
	     *   * a.pathname === '/C:/foo' //true
	     *
	     * Inside of Angular, we're always using pathnames that
	     * do not include drive names for routing.
	     */
function i(t,e,n){/*
	      Matches paths for file protocol on windows,
	      such as /C:/foo/bar, and captures only /foo/bar.
	      */
var r,i=/^\/[A-Z]:(\/.*)/;
// The input URL intentionally contains a first path segment that ends with a colon.
//Get the relative path from the input URL.
// The input URL intentionally contains a first path segment that ends with a colon.
return 0===e.indexOf(n)&&(e=e.replace(n,"")),i.exec(e)?t:(r=i.exec(t),r?r[1]:t)}var o,a=Fe(t,r)||Fe(e,r);y(a)||"#"!==a.charAt(0)?
// There was no hashbang path nor hash fragment:
// If we are in HTML5 mode we use what is left as the path;
// Otherwise we ignore what is left
this.$$html5?o=a:(o="",y(a)&&(t=r,this.replace())):(
// The rest of the url starts with a hash so we have
// got either a hashbang path or a plain hash fragment
o=Fe(n,a),y(o)&&(
// There was no hashbang prefix so we just have a hash fragment
o=a)),Ue(o,this),this.$$path=i(this.$$path,o,t),this.$$compose()},/**
	   * Compose hashbang url and update `absUrl` property
	   * @private
	   */
this.$$compose=function(){var e=et(this.$$search),r=this.$$hash?"#"+nt(this.$$hash):"";this.$$url=Le(this.$$path)+(e?"?"+e:"")+r,this.$$absUrl=t+(this.$$url?n+this.$$url:"")},this.$$parseLinkUrl=function(e,n){return Ve(t)==Ve(e)&&(this.$$parse(e),!0)}}/**
	 * LocationHashbangUrl represents url
	 * This object is exposed as $location service when html5 history api is enabled but the browser
	 * does not support it.
	 *
	 * @constructor
	 * @param {string} appBase application base URL
	 * @param {string} appBaseNoFile application base URL stripped of any filename
	 * @param {string} hashPrefix hashbang prefix
	 */
function Xe(t,e,n){this.$$html5=!0,Ge.apply(this,arguments),this.$$parseLinkUrl=function(r,i){if(i&&"#"===i[0])
// special case for links to hash fragments:
// keep the old url and only replace the hash fragment
return this.hash(i.slice(1)),!0;var o,a;return t==Ve(r)?o=r:(a=Fe(e,r))?o=t+n+a:e===r+"/"&&(o=e),o&&this.$$parse(o),!!o},this.$$compose=function(){var e=et(this.$$search),r=this.$$hash?"#"+nt(this.$$hash):"";this.$$url=Le(this.$$path)+(e?"?"+e:"")+r,
// include hashPrefix in $$absUrl when $$url is empty so IE9 does not reload page because of removal of '#'
this.$$absUrl=t+n+this.$$url}}function Je(t){return function(){return this[t]}}function Ye(t,e){return function(n){return y(n)?this[t]:(this[t]=e(n),this.$$compose(),this)}}/**
	 * @ngdoc service
	 * @name $location
	 *
	 * @requires $rootElement
	 *
	 * @description
	 * The $location service parses the URL in the browser address bar (based on the
	 * [window.location](https://developer.mozilla.org/en/window.location)) and makes the URL
	 * available to your application. Changes to the URL in the address bar are reflected into
	 * $location service and changes to $location are reflected into the browser address bar.
	 *
	 * **The $location service:**
	 *
	 * - Exposes the current URL in the browser address bar, so you can
	 *   - Watch and observe the URL.
	 *   - Change the URL.
	 * - Synchronizes the URL with the browser when the user
	 *   - Changes the address bar.
	 *   - Clicks the back or forward button (or clicks a History link).
	 *   - Clicks on a link.
	 * - Represents the URL object as a set of methods (protocol, host, port, path, search, hash).
	 *
	 * For more information see {@link guide/$location Developer Guide: Using $location}
	 */
/**
	 * @ngdoc provider
	 * @name $locationProvider
	 * @description
	 * Use the `$locationProvider` to configure how the application deep linking paths are stored.
	 */
function Ke(){var t="",e={enabled:!1,requireBase:!0,rewriteLinks:!0};/**
	   * @ngdoc method
	   * @name $locationProvider#hashPrefix
	   * @description
	   * @param {string=} prefix Prefix for hash part (containing path and search)
	   * @returns {*} current value if used as getter or itself (chaining) if used as setter
	   */
this.hashPrefix=function(e){return $(e)?(t=e,this):t},/**
	   * @ngdoc method
	   * @name $locationProvider#html5Mode
	   * @description
	   * @param {(boolean|Object)=} mode If boolean, sets `html5Mode.enabled` to value.
	   *   If object, sets `enabled`, `requireBase` and `rewriteLinks` to respective values. Supported
	   *   properties:
	   *   - **enabled** – `{boolean}` – (default: false) If true, will rely on `history.pushState` to
	   *     change urls where supported. Will fall back to hash-prefixed paths in browsers that do not
	   *     support `pushState`.
	   *   - **requireBase** - `{boolean}` - (default: `true`) When html5Mode is enabled, specifies
	   *     whether or not a <base> tag is required to be present. If `enabled` and `requireBase` are
	   *     true, and a base tag is not present, an error will be thrown when `$location` is injected.
	   *     See the {@link guide/$location $location guide for more information}
	   *   - **rewriteLinks** - `{boolean}` - (default: `true`) When html5Mode is enabled,
	   *     enables/disables url rewriting for relative links.
	   *
	   * @returns {Object} html5Mode object if used as getter or itself (chaining) if used as setter
	   */
this.html5Mode=function(t){return j(t)?(e.enabled=t,this):b(t)?(j(t.enabled)&&(e.enabled=t.enabled),j(t.requireBase)&&(e.requireBase=t.requireBase),j(t.rewriteLinks)&&(e.rewriteLinks=t.rewriteLinks),this):e},/**
	   * @ngdoc event
	   * @name $location#$locationChangeStart
	   * @eventType broadcast on root scope
	   * @description
	   * Broadcasted before a URL will change.
	   *
	   * This change can be prevented by calling
	   * `preventDefault` method of the event. See {@link ng.$rootScope.Scope#$on} for more
	   * details about event object. Upon successful change
	   * {@link ng.$location#$locationChangeSuccess $locationChangeSuccess} is fired.
	   *
	   * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when
	   * the browser supports the HTML5 History API.
	   *
	   * @param {Object} angularEvent Synthetic event object.
	   * @param {string} newUrl New URL
	   * @param {string=} oldUrl URL that was before it was changed.
	   * @param {string=} newState New history state object
	   * @param {string=} oldState History state object that was before it was changed.
	   */
/**
	   * @ngdoc event
	   * @name $location#$locationChangeSuccess
	   * @eventType broadcast on root scope
	   * @description
	   * Broadcasted after a URL was changed.
	   *
	   * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when
	   * the browser supports the HTML5 History API.
	   *
	   * @param {Object} angularEvent Synthetic event object.
	   * @param {string} newUrl New URL
	   * @param {string=} oldUrl URL that was before it was changed.
	   * @param {string=} newState New history state object
	   * @param {string=} oldState History state object that was before it was changed.
	   */
this.$get=["$rootScope","$browser","$sniffer","$rootElement","$window",function(n,r,i,o,a){function u(t,e,n){var i=c.url(),o=c.$$state;try{r.url(t,e,n),
// Make sure $location.state() returns referentially identical (not just deeply equal)
// state object; this makes possible quick checking if the state changed in the digest
// loop. Checking deep equality would be too expensive.
c.$$state=r.state()}catch(a){
// Restore old values if pushState fails
throw c.url(i),c.$$state=o,a}}function s(t,e){n.$broadcast("$locationChangeSuccess",c.absUrl(),t,c.$$state,e)}var c,l,f,h=r.baseHref(),// if base[href] is undefined, it defaults to ''
p=r.url();if(e.enabled){if(!h&&e.requireBase)throw ao("nobase","$location in HTML5 mode requires a <base> tag to be present!");f=We(p)+(h||"/"),l=i.history?ze:Xe}else f=Ve(p),l=Ge;var d=Be(f);c=new l(f,d,"#"+t),c.$$parseLinkUrl(p,p),c.$$state=r.state();var v=/^\s*(javascript|mailto):/i;o.on("click",function(t){
// TODO(vojta): rewrite link when opening in new tab/window (in legacy browser)
// currently we open nice url link and redirect then
if(e.rewriteLinks&&!t.ctrlKey&&!t.metaKey&&!t.shiftKey&&2!=t.which&&2!=t.button){
// traverse the DOM up to find first A tag
for(var i=Mr(t.target);"a"!==L(i[0]);)
// ignore rewriting if no A tag (reached root element, or no parent - removed from document)
if(i[0]===o[0]||!(i=i.parent())[0])return;var u=i.prop("href"),s=i.attr("href")||i.attr("xlink:href");b(u)&&"[object SVGAnimatedString]"===u.toString()&&(
// SVGAnimatedString.animVal should be identical to SVGAnimatedString.baseVal, unless during
// an animation.
u=Nn(u.animVal).href),
// Ignore when url is started with javascript: or mailto:
v.test(u)||!u||i.attr("target")||t.isDefaultPrevented()||c.$$parseLinkUrl(u,s)&&(
// We do a preventDefault for all urls that are part of the angular application,
// in html5mode and also without, so that we are able to abort navigation without
// getting double entries in the location history.
t.preventDefault(),
// update location manually
c.absUrl()!=r.url()&&(n.$apply(),
// hack to work around FF6 bug 684208 when scenario runner clicks on links
a.angular["ff-684208-preventDefault"]=!0))}}),
// rewrite hashbang url <> html5 url
He(c.absUrl())!=He(p)&&r.url(c.absUrl(),!0);var g=!0;
// update $location when $browser url changes
// update browser
return r.onUrlChange(function(t,e){
// If we are navigating outside of the app then force a reload
return y(Fe(d,t))?void(a.location.href=t):(n.$evalAsync(function(){var r,i=c.absUrl(),o=c.$$state;t=He(t),c.$$parse(t),c.$$state=e,r=n.$broadcast("$locationChangeStart",t,i,e,o).defaultPrevented,
// if the location was changed by a `$locationChangeStart` handler then stop
// processing this location change
c.absUrl()===t&&(r?(c.$$parse(i),c.$$state=o,u(i,!1,o)):(g=!1,s(i,o)))}),void(n.$$phase||n.$digest()))}),n.$watch(function(){var t=He(r.url()),e=He(c.absUrl()),o=r.state(),a=c.$$replace,l=t!==e||c.$$html5&&i.history&&o!==c.$$state;(g||l)&&(g=!1,n.$evalAsync(function(){var e=c.absUrl(),r=n.$broadcast("$locationChangeStart",e,t,c.$$state,o).defaultPrevented;
// if the location was changed by a `$locationChangeStart` handler then stop
// processing this location change
c.absUrl()===e&&(r?(c.$$parse(t),c.$$state=o):(l&&u(e,a,o===c.$$state?null:c.$$state),s(t,o)))})),c.$$replace=!1}),c}]}/**
	 * @ngdoc service
	 * @name $log
	 * @requires $window
	 *
	 * @description
	 * Simple service for logging. Default implementation safely writes the message
	 * into the browser's console (if present).
	 *
	 * The main purpose of this service is to simplify debugging and troubleshooting.
	 *
	 * The default is to log `debug` messages. You can use
	 * {@link ng.$logProvider ng.$logProvider#debugEnabled} to change this.
	 *
	 * @example
	   <example module="logExample">
	     <file name="script.js">
	       angular.module('logExample', [])
	         .controller('LogController', ['$scope', '$log', function($scope, $log) {
	           $scope.$log = $log;
	           $scope.message = 'Hello World!';
	         }]);
	     </file>
	     <file name="index.html">
	       <div ng-controller="LogController">
	         <p>Reload this page with open console, enter text and hit the log button...</p>
	         <label>Message:
	         <input type="text" ng-model="message" /></label>
	         <button ng-click="$log.log(message)">log</button>
	         <button ng-click="$log.warn(message)">warn</button>
	         <button ng-click="$log.info(message)">info</button>
	         <button ng-click="$log.error(message)">error</button>
	         <button ng-click="$log.debug(message)">debug</button>
	       </div>
	     </file>
	   </example>
	 */
/**
	 * @ngdoc provider
	 * @name $logProvider
	 * @description
	 * Use the `$logProvider` to configure how the application logs messages
	 */
function Ze(){var t=!0,e=this;/**
	   * @ngdoc method
	   * @name $logProvider#debugEnabled
	   * @description
	   * @param {boolean=} flag enable or disable debug level messages
	   * @returns {*} current value if used as getter or itself (chaining) if used as setter
	   */
this.debugEnabled=function(e){return $(e)?(t=e,this):t},this.$get=["$window",function(n){function r(t){return t instanceof Error&&(t.stack?t=t.message&&t.stack.indexOf(t.message)===-1?"Error: "+t.message+"\n"+t.stack:t.stack:t.sourceURL&&(t=t.message+"\n"+t.sourceURL+":"+t.line)),t}function o(t){var e=n.console||{},o=e[t]||e.log||d,a=!1;
// Note: reading logFn.apply throws an error in IE11 in IE8 document mode.
// The reason behind this is that console.log has type "object" in IE8...
try{a=!!o.apply}catch(u){}return a?function(){var t=[];return i(arguments,function(e){t.push(r(e))}),o.apply(e,t)}:function(t,e){o(t,null==e?"":e)}}return{/**
	       * @ngdoc method
	       * @name $log#log
	       *
	       * @description
	       * Write a log message
	       */
log:o("log"),/**
	       * @ngdoc method
	       * @name $log#info
	       *
	       * @description
	       * Write an information message
	       */
info:o("info"),/**
	       * @ngdoc method
	       * @name $log#warn
	       *
	       * @description
	       * Write a warning message
	       */
warn:o("warn"),/**
	       * @ngdoc method
	       * @name $log#error
	       *
	       * @description
	       * Write an error message
	       */
error:o("error"),/**
	       * @ngdoc method
	       * @name $log#debug
	       *
	       * @description
	       * Write a debug message
	       */
debug:function(){var n=o("debug");return function(){t&&n.apply(e,arguments)}}()}}]}
// Sandboxing Angular Expressions
// ------------------------------
// Angular expressions are generally considered safe because these expressions only have direct
// access to `$scope` and locals. However, one can obtain the ability to execute arbitrary JS code by
// obtaining a reference to native JS functions such as the Function constructor.
//
// As an example, consider the following Angular expression:
//
//   {}.toString.constructor('alert("evil JS code")')
//
// This sandboxing technique is not perfect and doesn't aim to be. The goal is to prevent exploits
// against the expression language, but not to prevent exploits that were enabled by exposing
// sensitive JavaScript or browser APIs on Scope. Exposing such objects on a Scope is never a good
// practice and therefore we are not even trying to protect against interaction with an object
// explicitly exposed in this way.
//
// In general, it is not possible to access a Window object from an angular expression unless a
// window or some DOM object that has a reference to window is published onto a Scope.
// Similarly we prevent invocations of function known to be dangerous, as well as assignments to
// native objects.
//
// See https://docs.angularjs.org/guide/security
function Qe(t,e){if("__defineGetter__"===t||"__defineSetter__"===t||"__lookupGetter__"===t||"__lookupSetter__"===t||"__proto__"===t)throw so("isecfld","Attempting to access a disallowed field in Angular expressions! Expression: {0}",e);return t}function tn(t){
// Property names must be strings. This means that non-string objects cannot be used
// as keys in an object. Any non-string object, including a number, is typecasted
// into a string via the toString method.
// -- MDN, https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Property_accessors#Property_names
//
// So, to ensure that we are checking the same `name` that JavaScript would use, we cast it
// to a string. It's not always possible. If `name` is an object and its `toString` method is
// 'broken' (doesn't return a string, isn't a function, etc.), an error will be thrown:
//
// TypeError: Cannot convert object to primitive value
//
// For performance reasons, we don't catch this error here and allow it to propagate up the call
// stack. Note that you'll get the same error in JavaScript if you try to access a property using
// such a 'broken' object as a key.
return t+""}function en(t,e){
// nifty check if obj is Function that is fast and works across iframes and other contexts
if(t){if(t.constructor===t)throw so("isecfn","Referencing Function in Angular expressions is disallowed! Expression: {0}",e);if(// isWindow(obj)
t.window===t)throw so("isecwindow","Referencing the Window in Angular expressions is disallowed! Expression: {0}",e);if(// isElement(obj)
t.children&&(t.nodeName||t.prop&&t.attr&&t.find))throw so("isecdom","Referencing DOM nodes in Angular expressions is disallowed! Expression: {0}",e);if(// block Object so that we can't get hold of dangerous Object.* methods
t===Object)throw so("isecobj","Referencing Object in Angular expressions is disallowed! Expression: {0}",e)}return t}function nn(t,e){if(t){if(t.constructor===t)throw so("isecfn","Referencing Function in Angular expressions is disallowed! Expression: {0}",e);if(t===co||t===lo||t===fo)throw so("isecff","Referencing call, apply or bind in Angular expressions is disallowed! Expression: {0}",e)}}function rn(t,e){if(t&&(t===(0).constructor||t===(!1).constructor||t==="".constructor||t==={}.constructor||t===[].constructor||t===Function.constructor))throw so("isecaf","Assigning to a constructor is disallowed! Expression: {0}",e)}function on(t,e){return"undefined"!=typeof t?t:e}function an(t,e){return"undefined"==typeof t?e:"undefined"==typeof e?t:t+e}function un(t,e){var n=t(e);return!n.$stateful}function sn(t,e){var n,r;switch(t.type){case go.Program:n=!0,i(t.body,function(t){sn(t.expression,e),n=n&&t.expression.constant}),t.constant=n;break;case go.Literal:t.constant=!0,t.toWatch=[];break;case go.UnaryExpression:sn(t.argument,e),t.constant=t.argument.constant,t.toWatch=t.argument.toWatch;break;case go.BinaryExpression:sn(t.left,e),sn(t.right,e),t.constant=t.left.constant&&t.right.constant,t.toWatch=t.left.toWatch.concat(t.right.toWatch);break;case go.LogicalExpression:sn(t.left,e),sn(t.right,e),t.constant=t.left.constant&&t.right.constant,t.toWatch=t.constant?[]:[t];break;case go.ConditionalExpression:sn(t.test,e),sn(t.alternate,e),sn(t.consequent,e),t.constant=t.test.constant&&t.alternate.constant&&t.consequent.constant,t.toWatch=t.constant?[]:[t];break;case go.Identifier:t.constant=!1,t.toWatch=[t];break;case go.MemberExpression:sn(t.object,e),t.computed&&sn(t.property,e),t.constant=t.object.constant&&(!t.computed||t.property.constant),t.toWatch=[t];break;case go.CallExpression:n=!!t.filter&&un(e,t.callee.name),r=[],i(t.arguments,function(t){sn(t,e),n=n&&t.constant,t.constant||r.push.apply(r,t.toWatch)}),t.constant=n,t.toWatch=t.filter&&un(e,t.callee.name)?r:[t];break;case go.AssignmentExpression:sn(t.left,e),sn(t.right,e),t.constant=t.left.constant&&t.right.constant,t.toWatch=[t];break;case go.ArrayExpression:n=!0,r=[],i(t.elements,function(t){sn(t,e),n=n&&t.constant,t.constant||r.push.apply(r,t.toWatch)}),t.constant=n,t.toWatch=r;break;case go.ObjectExpression:n=!0,r=[],i(t.properties,function(t){sn(t.value,e),n=n&&t.value.constant,t.value.constant||r.push.apply(r,t.value.toWatch)}),t.constant=n,t.toWatch=r;break;case go.ThisExpression:t.constant=!1,t.toWatch=[];break;case go.LocalsExpression:t.constant=!1,t.toWatch=[]}}function cn(t){if(1==t.length){var e=t[0].expression,n=e.toWatch;return 1!==n.length?n:n[0]!==e?n:void 0}}function ln(t){return t.type===go.Identifier||t.type===go.MemberExpression}function fn(t){if(1===t.body.length&&ln(t.body[0].expression))return{type:go.AssignmentExpression,left:t.body[0].expression,right:{type:go.NGValueParameter},operator:"="}}function hn(t){return 0===t.body.length||1===t.body.length&&(t.body[0].expression.type===go.Literal||t.body[0].expression.type===go.ArrayExpression||t.body[0].expression.type===go.ObjectExpression)}function pn(t){return t.constant}function dn(t,e){this.astBuilder=t,this.$filter=e}function vn(t,e){this.astBuilder=t,this.$filter=e}function gn(t){return"constructor"==t}function mn(t){return S(t.valueOf)?t.valueOf():yo.call(t)}
///////////////////////////////////
/**
	 * @ngdoc service
	 * @name $parse
	 * @kind function
	 *
	 * @description
	 *
	 * Converts Angular {@link guide/expression expression} into a function.
	 *
	 * ```js
	 *   var getter = $parse('user.name');
	 *   var setter = getter.assign;
	 *   var context = {user:{name:'angular'}};
	 *   var locals = {user:{name:'local'}};
	 *
	 *   expect(getter(context)).toEqual('angular');
	 *   setter(context, 'newValue');
	 *   expect(context.user.name).toEqual('newValue');
	 *   expect(getter(context, locals)).toEqual('local');
	 * ```
	 *
	 *
	 * @param {string} expression String expression to compile.
	 * @returns {function(context, locals)} a function which represents the compiled expression:
	 *
	 *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	 *      are evaluated against (typically a scope object).
	 *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	 *      `context`.
	 *
	 *    The returned function also has the following properties:
	 *      * `literal` – `{boolean}` – whether the expression's top-level node is a JavaScript
	 *        literal.
	 *      * `constant` – `{boolean}` – whether the expression is made entirely of JavaScript
	 *        constant literals.
	 *      * `assign` – `{?function(context, value)}` – if the expression is assignable, this will be
	 *        set to a function to change its value on the given context.
	 *
	 */
/**
	 * @ngdoc provider
	 * @name $parseProvider
	 *
	 * @description
	 * `$parseProvider` can be used for configuring the default behavior of the {@link ng.$parse $parse}
	 *  service.
	 */
function yn(){var t,e,n=gt(),r=gt(),o={"true":!0,"false":!1,"null":null,undefined:void 0};/**
	   * @ngdoc method
	   * @name $parseProvider#addLiteral
	   * @description
	   *
	   * Configure $parse service to add literal values that will be present as literal at expressions.
	   *
	   * @param {string} literalName Token for the literal value. The literal name value must be a valid literal name.
	   * @param {*} literalValue Value for this literal. All literal values must be primitives or `undefined`.
	   *
	   **/
this.addLiteral=function(t,e){o[t]=e},/**
	  * @ngdoc method
	  * @name $parseProvider#setIdentifierFns
	  * @description
	  *
	  * Allows defining the set of characters that are allowed in Angular expressions. The function
	  * `identifierStart` will get called to know if a given character is a valid character to be the
	  * first character for an identifier. The function `identifierContinue` will get called to know if
	  * a given character is a valid character to be a follow-up identifier character. The functions
	  * `identifierStart` and `identifierContinue` will receive as arguments the single character to be
	  * identifier and the character code point. These arguments will be `string` and `numeric`. Keep in
	  * mind that the `string` parameter can be two characters long depending on the character
	  * representation. It is expected for the function to return `true` or `false`, whether that
	  * character is allowed or not.
	  *
	  * Since this function will be called extensivelly, keep the implementation of these functions fast,
	  * as the performance of these functions have a direct impact on the expressions parsing speed.
	  *
	  * @param {function=} identifierStart The function that will decide whether the given character is
	  *   a valid identifier start character.
	  * @param {function=} identifierContinue The function that will decide whether the given character is
	  *   a valid identifier continue character.
	  */
this.setIdentifierFns=function(n,r){return t=n,e=r,this},this.$get=["$filter",function(a){function u(t,e,i){var o,u,c;switch(i=i||b,typeof t){case"string":t=t.trim(),c=t;var g=i?r:n;if(o=g[c],!o){":"===t.charAt(0)&&":"===t.charAt(1)&&(u=!0,t=t.substring(2));var $=i?y:m,w=new vo($),x=new mo(w,a,$);o=x.parse(t),o.constant?o.$$watchDelegate=p:u?o.$$watchDelegate=o.literal?h:f:o.inputs&&(o.$$watchDelegate=l),i&&(o=s(o)),g[c]=o}return v(o,e);case"function":return v(t,e);default:return v(d,e)}}function s(t){function e(e,n,r,i){var o=b;b=!0;try{return t(e,n,r,i)}finally{b=o}}if(!t)return t;e.$$watchDelegate=t.$$watchDelegate,e.assign=s(t.assign),e.constant=t.constant,e.literal=t.literal;for(var n=0;t.inputs&&n<t.inputs.length;++n)t.inputs[n]=s(t.inputs[n]);return e.inputs=t.inputs,e}function c(t,e){
// attempt to convert the value to a primitive type
// TODO(docs): add a note to docs that by implementing valueOf even objects and arrays can
//             be cheaply dirty-checked
return null==t||null==e?t===e:("object"!=typeof t||(t=mn(t),"object"!=typeof t))&&(t===e||t!==t&&e!==e)}function l(t,e,n,r,i){var o,a=r.inputs;if(1===a.length){var u=c;// init to something unique so that equals check fails
return a=a[0],t.$watch(function(t){var e=a(t);return c(e,u)||(o=r(t,void 0,void 0,[e]),u=e&&mn(e)),o},e,n,i)}for(var s=[],l=[],f=0,h=a.length;f<h;f++)s[f]=c,// init to something unique so that equals check fails
l[f]=null;return t.$watch(function(t){for(var e=!1,n=0,i=a.length;n<i;n++){var u=a[n](t);(e||(e=!c(u,s[n])))&&(l[n]=u,s[n]=u&&mn(u))}return e&&(o=r(t,void 0,void 0,l)),o},e,n,i)}function f(t,e,n,r){var i,o;return i=t.$watch(function(t){return r(t)},function(t,n,r){o=t,S(e)&&e.apply(this,arguments),$(t)&&r.$$postDigest(function(){$(o)&&i()})},n)}function h(t,e,n,r){function o(t){var e=!0;return i(t,function(t){$(t)||(e=!1)}),e}var a,u;return a=t.$watch(function(t){return r(t)},function(t,n,r){u=t,S(e)&&e.call(this,t,n,r),o(t)&&r.$$postDigest(function(){o(u)&&a()})},n)}function p(t,e,n,r){var i;return i=t.$watch(function(t){return i(),r(t)},e,n)}function v(t,e){if(!e)return t;var n=t.$$watchDelegate,r=!1,i=n!==h&&n!==f,o=i?function(n,i,o,a){var u=r&&a?a[0]:t(n,i,o,a);return e(u,n,i)}:function(n,r,i,o){var a=t(n,r,i,o),u=e(a,n,r);
// we only return the interceptor's result if the
// initial value is defined (for bind-once)
return $(a)?u:a};
// Propagate $$watchDelegates other then inputsWatchDelegate
// If there is an interceptor, but no watchDelegate then treat the interceptor like
// we treat filters - it is assumed to be a pure function unless flagged with $stateful
return t.$$watchDelegate&&t.$$watchDelegate!==l?o.$$watchDelegate=t.$$watchDelegate:e.$stateful||(o.$$watchDelegate=l,r=!t.inputs,o.inputs=t.inputs?t.inputs:[t]),o}var g=Kr().noUnsafeEval,m={csp:g,expensiveChecks:!1,literals:U(o),isIdentifierStart:S(t)&&t,isIdentifierContinue:S(e)&&e},y={csp:g,expensiveChecks:!0,literals:U(o),isIdentifierStart:S(t)&&t,isIdentifierContinue:S(e)&&e},b=!1;return u.$$runningExpensiveChecks=function(){return b},u}]}/**
	 * @ngdoc service
	 * @name $q
	 * @requires $rootScope
	 *
	 * @description
	 * A service that helps you run functions asynchronously, and use their return values (or exceptions)
	 * when they are done processing.
	 *
	 * This is an implementation of promises/deferred objects inspired by
	 * [Kris Kowal's Q](https://github.com/kriskowal/q).
	 *
	 * $q can be used in two fashions --- one which is more similar to Kris Kowal's Q or jQuery's Deferred
	 * implementations, and the other which resembles ES6 (ES2015) promises to some degree.
	 *
	 * # $q constructor
	 *
	 * The streamlined ES6 style promise is essentially just using $q as a constructor which takes a `resolver`
	 * function as the first argument. This is similar to the native Promise implementation from ES6,
	 * see [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).
	 *
	 * While the constructor-style use is supported, not all of the supporting methods from ES6 promises are
	 * available yet.
	 *
	 * It can be used like so:
	 *
	 * ```js
	 *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`
	 *   // are available in the current lexical scope (they could have been injected or passed in).
	 *
	 *   function asyncGreet(name) {
	 *     // perform some asynchronous operation, resolve or reject the promise when appropriate.
	 *     return $q(function(resolve, reject) {
	 *       setTimeout(function() {
	 *         if (okToGreet(name)) {
	 *           resolve('Hello, ' + name + '!');
	 *         } else {
	 *           reject('Greeting ' + name + ' is not allowed.');
	 *         }
	 *       }, 1000);
	 *     });
	 *   }
	 *
	 *   var promise = asyncGreet('Robin Hood');
	 *   promise.then(function(greeting) {
	 *     alert('Success: ' + greeting);
	 *   }, function(reason) {
	 *     alert('Failed: ' + reason);
	 *   });
	 * ```
	 *
	 * Note: progress/notify callbacks are not currently supported via the ES6-style interface.
	 *
	 * Note: unlike ES6 behavior, an exception thrown in the constructor function will NOT implicitly reject the promise.
	 *
	 * However, the more traditional CommonJS-style usage is still available, and documented below.
	 *
	 * [The CommonJS Promise proposal](http://wiki.commonjs.org/wiki/Promises) describes a promise as an
	 * interface for interacting with an object that represents the result of an action that is
	 * performed asynchronously, and may or may not be finished at any given point in time.
	 *
	 * From the perspective of dealing with error handling, deferred and promise APIs are to
	 * asynchronous programming what `try`, `catch` and `throw` keywords are to synchronous programming.
	 *
	 * ```js
	 *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`
	 *   // are available in the current lexical scope (they could have been injected or passed in).
	 *
	 *   function asyncGreet(name) {
	 *     var deferred = $q.defer();
	 *
	 *     setTimeout(function() {
	 *       deferred.notify('About to greet ' + name + '.');
	 *
	 *       if (okToGreet(name)) {
	 *         deferred.resolve('Hello, ' + name + '!');
	 *       } else {
	 *         deferred.reject('Greeting ' + name + ' is not allowed.');
	 *       }
	 *     }, 1000);
	 *
	 *     return deferred.promise;
	 *   }
	 *
	 *   var promise = asyncGreet('Robin Hood');
	 *   promise.then(function(greeting) {
	 *     alert('Success: ' + greeting);
	 *   }, function(reason) {
	 *     alert('Failed: ' + reason);
	 *   }, function(update) {
	 *     alert('Got notification: ' + update);
	 *   });
	 * ```
	 *
	 * At first it might not be obvious why this extra complexity is worth the trouble. The payoff
	 * comes in the way of guarantees that promise and deferred APIs make, see
	 * https://github.com/kriskowal/uncommonjs/blob/master/promises/specification.md.
	 *
	 * Additionally the promise api allows for composition that is very hard to do with the
	 * traditional callback ([CPS](http://en.wikipedia.org/wiki/Continuation-passing_style)) approach.
	 * For more on this please see the [Q documentation](https://github.com/kriskowal/q) especially the
	 * section on serial or parallel joining of promises.
	 *
	 * # The Deferred API
	 *
	 * A new instance of deferred is constructed by calling `$q.defer()`.
	 *
	 * The purpose of the deferred object is to expose the associated Promise instance as well as APIs
	 * that can be used for signaling the successful or unsuccessful completion, as well as the status
	 * of the task.
	 *
	 * **Methods**
	 *
	 * - `resolve(value)` – resolves the derived promise with the `value`. If the value is a rejection
	 *   constructed via `$q.reject`, the promise will be rejected instead.
	 * - `reject(reason)` – rejects the derived promise with the `reason`. This is equivalent to
	 *   resolving it with a rejection constructed via `$q.reject`.
	 * - `notify(value)` - provides updates on the status of the promise's execution. This may be called
	 *   multiple times before the promise is either resolved or rejected.
	 *
	 * **Properties**
	 *
	 * - promise – `{Promise}` – promise object associated with this deferred.
	 *
	 *
	 * # The Promise API
	 *
	 * A new promise instance is created when a deferred instance is created and can be retrieved by
	 * calling `deferred.promise`.
	 *
	 * The purpose of the promise object is to allow for interested parties to get access to the result
	 * of the deferred task when it completes.
	 *
	 * **Methods**
	 *
	 * - `then(successCallback, errorCallback, notifyCallback)` – regardless of when the promise was or
	 *   will be resolved or rejected, `then` calls one of the success or error callbacks asynchronously
	 *   as soon as the result is available. The callbacks are called with a single argument: the result
	 *   or rejection reason. Additionally, the notify callback may be called zero or more times to
	 *   provide a progress indication, before the promise is resolved or rejected.
	 *
	 *   This method *returns a new promise* which is resolved or rejected via the return value of the
	 *   `successCallback`, `errorCallback` (unless that value is a promise, in which case it is resolved
	 *   with the value which is resolved in that promise using
	 *   [promise chaining](http://www.html5rocks.com/en/tutorials/es6/promises/#toc-promises-queues)).
	 *   It also notifies via the return value of the `notifyCallback` method. The promise cannot be
	 *   resolved or rejected from the notifyCallback method.
	 *
	 * - `catch(errorCallback)` – shorthand for `promise.then(null, errorCallback)`
	 *
	 * - `finally(callback, notifyCallback)` – allows you to observe either the fulfillment or rejection of a promise,
	 *   but to do so without modifying the final value. This is useful to release resources or do some
	 *   clean-up that needs to be done whether the promise was rejected or resolved. See the [full
	 *   specification](https://github.com/kriskowal/q/wiki/API-Reference#promisefinallycallback) for
	 *   more information.
	 *
	 * # Chaining promises
	 *
	 * Because calling the `then` method of a promise returns a new derived promise, it is easily
	 * possible to create a chain of promises:
	 *
	 * ```js
	 *   promiseB = promiseA.then(function(result) {
	 *     return result + 1;
	 *   });
	 *
	 *   // promiseB will be resolved immediately after promiseA is resolved and its value
	 *   // will be the result of promiseA incremented by 1
	 * ```
	 *
	 * It is possible to create chains of any length and since a promise can be resolved with another
	 * promise (which will defer its resolution further), it is possible to pause/defer resolution of
	 * the promises at any point in the chain. This makes it possible to implement powerful APIs like
	 * $http's response interceptors.
	 *
	 *
	 * # Differences between Kris Kowal's Q and $q
	 *
	 *  There are two main differences:
	 *
	 * - $q is integrated with the {@link ng.$rootScope.Scope} Scope model observation
	 *   mechanism in angular, which means faster propagation of resolution or rejection into your
	 *   models and avoiding unnecessary browser repaints, which would result in flickering UI.
	 * - Q has many more features than $q, but that comes at a cost of bytes. $q is tiny, but contains
	 *   all the important functionality needed for common async tasks.
	 *
	 * # Testing
	 *
	 *  ```js
	 *    it('should simulate promise', inject(function($q, $rootScope) {
	 *      var deferred = $q.defer();
	 *      var promise = deferred.promise;
	 *      var resolvedValue;
	 *
	 *      promise.then(function(value) { resolvedValue = value; });
	 *      expect(resolvedValue).toBeUndefined();
	 *
	 *      // Simulate resolving of promise
	 *      deferred.resolve(123);
	 *      // Note that the 'then' function does not get called synchronously.
	 *      // This is because we want the promise API to always be async, whether or not
	 *      // it got called synchronously or asynchronously.
	 *      expect(resolvedValue).toBeUndefined();
	 *
	 *      // Propagate promise resolution to 'then' functions using $apply().
	 *      $rootScope.$apply();
	 *      expect(resolvedValue).toEqual(123);
	 *    }));
	 *  ```
	 *
	 * @param {function(function, function)} resolver Function which is responsible for resolving or
	 *   rejecting the newly created promise. The first parameter is a function which resolves the
	 *   promise, the second parameter is a function which rejects the promise.
	 *
	 * @returns {Promise} The newly created promise.
	 */
function $n(){this.$get=["$rootScope","$exceptionHandler",function(t,e){return wn(function(e){t.$evalAsync(e)},e)}]}function bn(){this.$get=["$browser","$exceptionHandler",function(t,e){return wn(function(e){t.defer(e)},e)}]}/**
	 * Constructs a promise manager.
	 *
	 * @param {function(function)} nextTick Function for executing functions in the next turn.
	 * @param {function(...*)} exceptionHandler Function into which unexpected exceptions are passed for
	 *     debugging purposes.
	 * @returns {object} Promise manager.
	 */
function wn(t,e){function r(){this.$$state={status:0}}
//Faster, more basic than angular.bind http://jsperf.com/angular-bind-vs-custom-vs-native
function o(t,e){return function(n){e.call(t,n)}}function a(t){var n,r,i;i=t.pending,t.processScheduled=!1,t.pending=void 0;for(var o=0,a=i.length;o<a;++o){r=i[o][0],n=i[o][t.status];try{S(n)?r.resolve(n(t.value)):1===t.status?r.resolve(t.value):r.reject(t.value)}catch(u){r.reject(u),e(u)}}}function u(e){!e.processScheduled&&e.pending&&(e.processScheduled=!0,t(function(){a(e)}))}function s(){this.promise=new r}/**
	   * @ngdoc method
	   * @name $q#all
	   * @kind function
	   *
	   * @description
	   * Combines multiple promises into a single promise that is resolved when all of the input
	   * promises are resolved.
	   *
	   * @param {Array.<Promise>|Object.<Promise>} promises An array or hash of promises.
	   * @returns {Promise} Returns a single promise that will be resolved with an array/hash of values,
	   *   each value corresponding to the promise at the same index/key in the `promises` array/hash.
	   *   If any of the promises is resolved with a rejection, this resulting promise will be rejected
	   *   with the same rejection value.
	   */
function c(t){var e=new s,n=0,r=Gr(t)?[]:{};return i(t,function(t,i){n++,g(t).then(function(t){r.hasOwnProperty(i)||(r[i]=t,--n||e.resolve(r))},function(t){r.hasOwnProperty(i)||e.reject(t)})}),0===n&&e.resolve(r),e.promise}var f=n("$q",TypeError),h=function(){var t=new s;
//Necessary to support unbound execution :/
return t.resolve=o(t,t.resolve),t.reject=o(t,t.reject),t.notify=o(t,t.notify),t};l(r.prototype,{then:function(t,e,n){if(y(t)&&y(e)&&y(n))return this;var r=new s;return this.$$state.pending=this.$$state.pending||[],this.$$state.pending.push([r,t,e,n]),this.$$state.status>0&&u(this.$$state),r.promise},"catch":function(t){return this.then(null,t)},"finally":function(t,e){return this.then(function(e){return v(e,!0,t)},function(e){return v(e,!1,t)},e)}}),l(s.prototype,{resolve:function(t){this.promise.$$state.status||(t===this.promise?this.$$reject(f("qcycle","Expected promise to be resolved with value other than itself '{0}'",t)):this.$$resolve(t))},$$resolve:function(t){function n(t){s||(s=!0,a.$$resolve(t))}function r(t){s||(s=!0,a.$$reject(t))}var i,a=this,s=!1;try{(b(t)||S(t))&&(i=t&&t.then),S(i)?(this.promise.$$state.status=-1,i.call(t,n,r,o(this,this.notify))):(this.promise.$$state.value=t,this.promise.$$state.status=1,u(this.promise.$$state))}catch(c){r(c),e(c)}},reject:function(t){this.promise.$$state.status||this.$$reject(t)},$$reject:function(t){this.promise.$$state.value=t,this.promise.$$state.status=2,u(this.promise.$$state)},notify:function(n){var r=this.promise.$$state.pending;this.promise.$$state.status<=0&&r&&r.length&&t(function(){for(var t,i,o=0,a=r.length;o<a;o++){i=r[o][0],t=r[o][3];try{i.notify(S(t)?t(n):n)}catch(u){e(u)}}})}});/**
	   * @ngdoc method
	   * @name $q#reject
	   * @kind function
	   *
	   * @description
	   * Creates a promise that is resolved as rejected with the specified `reason`. This api should be
	   * used to forward rejection in a chain of promises. If you are dealing with the last promise in
	   * a promise chain, you don't need to worry about it.
	   *
	   * When comparing deferreds/promises to the familiar behavior of try/catch/throw, think of
	   * `reject` as the `throw` keyword in JavaScript. This also means that if you "catch" an error via
	   * a promise error callback and you want to forward the error to the promise derived from the
	   * current promise, you have to "rethrow" the error by returning a rejection constructed via
	   * `reject`.
	   *
	   * ```js
	   *   promiseB = promiseA.then(function(result) {
	   *     // success: do something and resolve promiseB
	   *     //          with the old or a new result
	   *     return result;
	   *   }, function(reason) {
	   *     // error: handle the error if possible and
	   *     //        resolve promiseB with newPromiseOrValue,
	   *     //        otherwise forward the rejection to promiseB
	   *     if (canHandle(reason)) {
	   *      // handle the error and recover
	   *      return newPromiseOrValue;
	   *     }
	   *     return $q.reject(reason);
	   *   });
	   * ```
	   *
	   * @param {*} reason Constant, message, exception or an object representing the rejection reason.
	   * @returns {Promise} Returns a promise that was already resolved as rejected with the `reason`.
	   */
var p=function(t){var e=new s;return e.reject(t),e.promise},d=function(t,e){var n=new s;return e?n.resolve(t):n.reject(t),n.promise},v=function(t,e,n){var r=null;try{S(n)&&(r=n())}catch(i){return d(i,!1)}return N(r)?r.then(function(){return d(t,e)},function(t){return d(t,!1)}):d(t,e)},g=function(t,e,n,r){var i=new s;return i.resolve(t),i.promise.then(e,n,r)},m=g,$=function(t){function e(t){r.resolve(t)}function n(t){r.reject(t)}if(!S(t))throw f("norslvr","Expected resolverFn, got '{0}'",t);var r=new s;return t(e,n),r.promise};
// Let's make the instanceof operator work for promises, so that
// `new $q(fn) instanceof $q` would evaluate to true.
return $.prototype=r.prototype,$.defer=h,$.reject=p,$.when=g,$.resolve=m,$.all=c,$}function xn(){//rAF
this.$get=["$window","$timeout",function(t,e){var n=t.requestAnimationFrame||t.webkitRequestAnimationFrame,r=t.cancelAnimationFrame||t.webkitCancelAnimationFrame||t.webkitCancelRequestAnimationFrame,i=!!n,o=i?function(t){var e=n(t);return function(){r(e)}}:function(t){var n=e(t,16.66,!1);// 1000 / 60 = 16.666
return function(){e.cancel(n)}};return o.supported=i,o}]}/**
	 * DESIGN NOTES
	 *
	 * The design decisions behind the scope are heavily favored for speed and memory consumption.
	 *
	 * The typical use of scope is to watch the expressions, which most of the time return the same
	 * value as last time so we optimize the operation.
	 *
	 * Closures construction is expensive in terms of speed as well as memory:
	 *   - No closures, instead use prototypical inheritance for API
	 *   - Internal state needs to be stored on scope directly, which means that private state is
	 *     exposed as $$____ properties
	 *
	 * Loop operations are optimized by using while(count--) { ... }
	 *   - This means that in order to keep the same order of execution as addition we have to add
	 *     items to the array at the beginning (unshift) instead of at the end (push)
	 *
	 * Child scopes are created and removed often
	 *   - Using an array would be slow since inserts in the middle are expensive; so we use linked lists
	 *
	 * There are fewer watches than observers. This is why you don't want the observer to be implemented
	 * in the same way as watch. Watch requires return of the initialization function which is expensive
	 * to construct.
	 */
/**
	 * @ngdoc provider
	 * @name $rootScopeProvider
	 * @description
	 *
	 * Provider for the $rootScope service.
	 */
/**
	 * @ngdoc method
	 * @name $rootScopeProvider#digestTtl
	 * @description
	 *
	 * Sets the number of `$digest` iterations the scope should attempt to execute before giving up and
	 * assuming that the model is unstable.
	 *
	 * The current default is 10 iterations.
	 *
	 * In complex applications it's possible that the dependencies between `$watch`s will result in
	 * several digest iterations. However if an application needs more than the default 10 digest
	 * iterations for its model to stabilize then you should investigate what is causing the model to
	 * continuously change during the digest.
	 *
	 * Increasing the TTL could have performance implications, so you should not change it without
	 * proper justification.
	 *
	 * @param {number} limit The number of digest iterations.
	 */
/**
	 * @ngdoc service
	 * @name $rootScope
	 * @description
	 *
	 * Every application has a single root {@link ng.$rootScope.Scope scope}.
	 * All other scopes are descendant scopes of the root scope. Scopes provide separation
	 * between the model and the view, via a mechanism for watching the model for changes.
	 * They also provide event emission/broadcast and subscription facility. See the
	 * {@link guide/scope developer guide on scopes}.
	 */
function _n(){function t(t){function e(){this.$$watchers=this.$$nextSibling=this.$$childHead=this.$$childTail=null,this.$$listeners={},this.$$listenerCount={},this.$$watchersCount=0,this.$id=u(),this.$$ChildScope=null}return e.prototype=t,e}var e=10,o=n("$rootScope"),a=null,s=null;this.digestTtl=function(t){return arguments.length&&(e=t),e},this.$get=["$exceptionHandler","$parse","$browser",function(n,c,l){function f(t){t.currentScope.$$destroyed=!0}function h(t){9===Dr&&(
// There is a memory leak in IE9 if all child scopes are not disconnected
// completely when a scope is destroyed. So this code will recurse up through
// all this scopes children
//
// See issue https://github.com/angular/angular.js/issues/10706
t.$$childHead&&h(t.$$childHead),t.$$nextSibling&&h(t.$$nextSibling)),
// The code below works around IE9 and V8's memory leaks
//
// See:
// - https://code.google.com/p/v8/issues/detail?id=2073#c26
// - https://github.com/angular/angular.js/issues/6794#issuecomment-38648909
// - https://github.com/angular/angular.js/issues/1313#issuecomment-10378451
t.$parent=t.$$nextSibling=t.$$prevSibling=t.$$childHead=t.$$childTail=t.$root=t.$$watchers=null}/**
	     * @ngdoc type
	     * @name $rootScope.Scope
	     *
	     * @description
	     * A root scope can be retrieved using the {@link ng.$rootScope $rootScope} key from the
	     * {@link auto.$injector $injector}. Child scopes are created using the
	     * {@link ng.$rootScope.Scope#$new $new()} method. (Most scopes are created automatically when
	     * compiled HTML template is executed.) See also the {@link guide/scope Scopes guide} for
	     * an in-depth introduction and usage examples.
	     *
	     *
	     * # Inheritance
	     * A scope can inherit from a parent scope, as in this example:
	     * ```js
	         var parent = $rootScope;
	         var child = parent.$new();
	
	         parent.salutation = "Hello";
	         expect(child.salutation).toEqual('Hello');
	
	         child.salutation = "Welcome";
	         expect(child.salutation).toEqual('Welcome');
	         expect(parent.salutation).toEqual('Hello');
	     * ```
	     *
	     * When interacting with `Scope` in tests, additional helper methods are available on the
	     * instances of `Scope` type. See {@link ngMock.$rootScope.Scope ngMock Scope} for additional
	     * details.
	     *
	     *
	     * @param {Object.<string, function()>=} providers Map of service factory which need to be
	     *                                       provided for the current scope. Defaults to {@link ng}.
	     * @param {Object.<string, *>=} instanceCache Provides pre-instantiated services which should
	     *                              append/override services provided by `providers`. This is handy
	     *                              when unit-testing and having the need to override a default
	     *                              service.
	     * @returns {Object} Newly created scope.
	     *
	     */
function p(){this.$id=u(),this.$$phase=this.$parent=this.$$watchers=this.$$nextSibling=this.$$prevSibling=this.$$childHead=this.$$childTail=null,this.$root=this,this.$$destroyed=!1,this.$$listeners={},this.$$listenerCount={},this.$$watchersCount=0,this.$$isolateBindings=null}function v(t){if(C.$$phase)throw o("inprog","{0} already in progress",C.$$phase);C.$$phase=t}function g(){C.$$phase=null}function m(t,e){do t.$$watchersCount+=e;while(t=t.$parent)}function $(t,e,n){do t.$$listenerCount[n]-=e,0===t.$$listenerCount[n]&&delete t.$$listenerCount[n];while(t=t.$parent)}/**
	     * function used as an initial value for watchers.
	     * because it's unique we can easily tell it apart from other values
	     */
function w(){}function x(){for(;k.length;)try{k.shift()()}catch(t){n(t)}s=null}function _(){null===s&&(s=l.defer(function(){C.$apply(x)}))}/**
	     * @ngdoc property
	     * @name $rootScope.Scope#$id
	     *
	     * @description
	     * Unique scope ID (monotonically increasing) useful for debugging.
	     */
/**
	      * @ngdoc property
	      * @name $rootScope.Scope#$parent
	      *
	      * @description
	      * Reference to the parent scope.
	      */
/**
	       * @ngdoc property
	       * @name $rootScope.Scope#$root
	       *
	       * @description
	       * Reference to the root scope.
	       */
p.prototype={constructor:p,/**
	       * @ngdoc method
	       * @name $rootScope.Scope#$new
	       * @kind function
	       *
	       * @description
	       * Creates a new child {@link ng.$rootScope.Scope scope}.
	       *
	       * The parent scope will propagate the {@link ng.$rootScope.Scope#$digest $digest()} event.
	       * The scope can be removed from the scope hierarchy using {@link ng.$rootScope.Scope#$destroy $destroy()}.
	       *
	       * {@link ng.$rootScope.Scope#$destroy $destroy()} must be called on a scope when it is
	       * desired for the scope and its child scopes to be permanently detached from the parent and
	       * thus stop participating in model change detection and listener notification by invoking.
	       *
	       * @param {boolean} isolate If true, then the scope does not prototypically inherit from the
	       *         parent scope. The scope is isolated, as it can not see parent scope properties.
	       *         When creating widgets, it is useful for the widget to not accidentally read parent
	       *         state.
	       *
	       * @param {Scope} [parent=this] The {@link ng.$rootScope.Scope `Scope`} that will be the `$parent`
	       *                              of the newly created scope. Defaults to `this` scope if not provided.
	       *                              This is used when creating a transclude scope to correctly place it
	       *                              in the scope hierarchy while maintaining the correct prototypical
	       *                              inheritance.
	       *
	       * @returns {Object} The newly created child scope.
	       *
	       */
$new:function(e,n){var r;
// Only create a child scope class if somebody asks for one,
// but cache it to allow the VM to optimize lookups.
// When the new scope is not isolated or we inherit from `this`, and
// the parent scope is destroyed, the property `$$destroyed` is inherited
// prototypically. In all other cases, this property needs to be set
// when the parent scope is destroyed.
// The listener needs to be added after the parent is set
return n=n||this,e?(r=new p,r.$root=this.$root):(this.$$ChildScope||(this.$$ChildScope=t(this)),r=new this.$$ChildScope),r.$parent=n,r.$$prevSibling=n.$$childTail,n.$$childHead?(n.$$childTail.$$nextSibling=r,n.$$childTail=r):n.$$childHead=n.$$childTail=r,(e||n!=this)&&r.$on("$destroy",f),r},/**
	       * @ngdoc method
	       * @name $rootScope.Scope#$watch
	       * @kind function
	       *
	       * @description
	       * Registers a `listener` callback to be executed whenever the `watchExpression` changes.
	       *
	       * - The `watchExpression` is called on every call to {@link ng.$rootScope.Scope#$digest
	       *   $digest()} and should return the value that will be watched. (`watchExpression` should not change
	       *   its value when executed multiple times with the same input because it may be executed multiple
	       *   times by {@link ng.$rootScope.Scope#$digest $digest()}. That is, `watchExpression` should be
	       *   [idempotent](http://en.wikipedia.org/wiki/Idempotence).
	       * - The `listener` is called only when the value from the current `watchExpression` and the
	       *   previous call to `watchExpression` are not equal (with the exception of the initial run,
	       *   see below). Inequality is determined according to reference inequality,
	       *   [strict comparison](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators)
	       *    via the `!==` Javascript operator, unless `objectEquality == true`
	       *   (see next point)
	       * - When `objectEquality == true`, inequality of the `watchExpression` is determined
	       *   according to the {@link angular.equals} function. To save the value of the object for
	       *   later comparison, the {@link angular.copy} function is used. This therefore means that
	       *   watching complex objects will have adverse memory and performance implications.
	       * - The watch `listener` may change the model, which may trigger other `listener`s to fire.
	       *   This is achieved by rerunning the watchers until no changes are detected. The rerun
	       *   iteration limit is 10 to prevent an infinite loop deadlock.
	       *
	       *
	       * If you want to be notified whenever {@link ng.$rootScope.Scope#$digest $digest} is called,
	       * you can register a `watchExpression` function with no `listener`. (Be prepared for
	       * multiple calls to your `watchExpression` because it will execute multiple times in a
	       * single {@link ng.$rootScope.Scope#$digest $digest} cycle if a change is detected.)
	       *
	       * After a watcher is registered with the scope, the `listener` fn is called asynchronously
	       * (via {@link ng.$rootScope.Scope#$evalAsync $evalAsync}) to initialize the
	       * watcher. In rare cases, this is undesirable because the listener is called when the result
	       * of `watchExpression` didn't change. To detect this scenario within the `listener` fn, you
	       * can compare the `newVal` and `oldVal`. If these two values are identical (`===`) then the
	       * listener was called due to initialization.
	       *
	       *
	       *
	       * # Example
	       * ```js
	           // let's assume that scope was dependency injected as the $rootScope
	           var scope = $rootScope;
	           scope.name = 'misko';
	           scope.counter = 0;
	
	           expect(scope.counter).toEqual(0);
	           scope.$watch('name', function(newValue, oldValue) {
	             scope.counter = scope.counter + 1;
	           });
	           expect(scope.counter).toEqual(0);
	
	           scope.$digest();
	           // the listener is always called during the first $digest loop after it was registered
	           expect(scope.counter).toEqual(1);
	
	           scope.$digest();
	           // but now it will not be called unless the value changes
	           expect(scope.counter).toEqual(1);
	
	           scope.name = 'adam';
	           scope.$digest();
	           expect(scope.counter).toEqual(2);
	
	
	
	           // Using a function as a watchExpression
	           var food;
	           scope.foodCounter = 0;
	           expect(scope.foodCounter).toEqual(0);
	           scope.$watch(
	             // This function returns the value being watched. It is called for each turn of the $digest loop
	             function() { return food; },
	             // This is the change listener, called when the value returned from the above function changes
	             function(newValue, oldValue) {
	               if ( newValue !== oldValue ) {
	                 // Only increment the counter if the value changed
	                 scope.foodCounter = scope.foodCounter + 1;
	               }
	             }
	           );
	           // No digest has been run so the counter will be zero
	           expect(scope.foodCounter).toEqual(0);
	
	           // Run the digest but since food has not changed count will still be zero
	           scope.$digest();
	           expect(scope.foodCounter).toEqual(0);
	
	           // Update food and run digest.  Now the counter will increment
	           food = 'cheeseburger';
	           scope.$digest();
	           expect(scope.foodCounter).toEqual(1);
	
	       * ```
	       *
	       *
	       *
	       * @param {(function()|string)} watchExpression Expression that is evaluated on each
	       *    {@link ng.$rootScope.Scope#$digest $digest} cycle. A change in the return value triggers
	       *    a call to the `listener`.
	       *
	       *    - `string`: Evaluated as {@link guide/expression expression}
	       *    - `function(scope)`: called with current `scope` as a parameter.
	       * @param {function(newVal, oldVal, scope)} listener Callback called whenever the value
	       *    of `watchExpression` changes.
	       *
	       *    - `newVal` contains the current value of the `watchExpression`
	       *    - `oldVal` contains the previous value of the `watchExpression`
	       *    - `scope` refers to the current scope
	       * @param {boolean=} [objectEquality=false] Compare for object equality using {@link angular.equals} instead of
	       *     comparing for reference equality.
	       * @returns {function()} Returns a deregistration function for this listener.
	       */
$watch:function(t,e,n,r){var i=c(t);if(i.$$watchDelegate)return i.$$watchDelegate(this,e,n,i,t);var o=this,u=o.$$watchers,s={fn:e,last:w,get:i,exp:r||t,eq:!!n};
// we use unshift since we use a while loop in $digest for speed.
// the while loop reads in reverse order.
return a=null,S(e)||(s.fn=d),u||(u=o.$$watchers=[]),u.unshift(s),m(this,1),function(){q(u,s)>=0&&m(o,-1),a=null}},/**
	       * @ngdoc method
	       * @name $rootScope.Scope#$watchGroup
	       * @kind function
	       *
	       * @description
	       * A variant of {@link ng.$rootScope.Scope#$watch $watch()} where it watches an array of `watchExpressions`.
	       * If any one expression in the collection changes the `listener` is executed.
	       *
	       * - The items in the `watchExpressions` array are observed via standard $watch operation and are examined on every
	       *   call to $digest() to see if any items changes.
	       * - The `listener` is called whenever any expression in the `watchExpressions` array changes.
	       *
	       * @param {Array.<string|Function(scope)>} watchExpressions Array of expressions that will be individually
	       * watched using {@link ng.$rootScope.Scope#$watch $watch()}
	       *
	       * @param {function(newValues, oldValues, scope)} listener Callback called whenever the return value of any
	       *    expression in `watchExpressions` changes
	       *    The `newValues` array contains the current values of the `watchExpressions`, with the indexes matching
	       *    those of `watchExpression`
	       *    and the `oldValues` array contains the previous values of the `watchExpressions`, with the indexes matching
	       *    those of `watchExpression`
	       *    The `scope` refers to the current scope.
	       * @returns {function()} Returns a de-registration function for all listeners.
	       */
$watchGroup:function(t,e){function n(){s=!1,c?(c=!1,e(o,o,u)):e(o,r,u)}var r=new Array(t.length),o=new Array(t.length),a=[],u=this,s=!1,c=!0;if(!t.length){
// No expressions means we call the listener ASAP
var l=!0;return u.$evalAsync(function(){l&&e(o,o,u)}),function(){l=!1}}return 1===t.length?this.$watch(t[0],function(t,n,i){o[0]=t,r[0]=n,e(o,t===n?o:r,i)}):(i(t,function(t,e){var i=u.$watch(t,function(t,i){o[e]=t,r[e]=i,s||(s=!0,u.$evalAsync(n))});a.push(i)}),function(){for(;a.length;)a.shift()()})},/**
	       * @ngdoc method
	       * @name $rootScope.Scope#$watchCollection
	       * @kind function
	       *
	       * @description
	       * Shallow watches the properties of an object and fires whenever any of the properties change
	       * (for arrays, this implies watching the array items; for object maps, this implies watching
	       * the properties). If a change is detected, the `listener` callback is fired.
	       *
	       * - The `obj` collection is observed via standard $watch operation and is examined on every
	       *   call to $digest() to see if any items have been added, removed, or moved.
	       * - The `listener` is called whenever anything within the `obj` has changed. Examples include
	       *   adding, removing, and moving items belonging to an object or array.
	       *
	       *
	       * # Example
	       * ```js
	          $scope.names = ['igor', 'matias', 'misko', 'james'];
	          $scope.dataCount = 4;
	
	          $scope.$watchCollection('names', function(newNames, oldNames) {
	            $scope.dataCount = newNames.length;
	          });
	
	          expect($scope.dataCount).toEqual(4);
	          $scope.$digest();
	
	          //still at 4 ... no changes
	          expect($scope.dataCount).toEqual(4);
	
	          $scope.names.pop();
	          $scope.$digest();
	
	          //now there's been a change
	          expect($scope.dataCount).toEqual(3);
	       * ```
	       *
	       *
	       * @param {string|function(scope)} obj Evaluated as {@link guide/expression expression}. The
	       *    expression value should evaluate to an object or an array which is observed on each
	       *    {@link ng.$rootScope.Scope#$digest $digest} cycle. Any shallow change within the
	       *    collection will trigger a call to the `listener`.
	       *
	       * @param {function(newCollection, oldCollection, scope)} listener a callback function called
	       *    when a change is detected.
	       *    - The `newCollection` object is the newly modified data obtained from the `obj` expression
	       *    - The `oldCollection` object is a copy of the former collection data.
	       *      Due to performance considerations, the`oldCollection` value is computed only if the
	       *      `listener` function declares two or more arguments.
	       *    - The `scope` argument refers to the current scope.
	       *
	       * @returns {function()} Returns a de-registration function for this listener. When the
	       *    de-registration function is executed, the internal watch operation is terminated.
	       */
$watchCollection:function(t,e){function n(t){o=t;var e,n,i,u,s;
// If the new value is undefined, then return undefined as the watch may be a one-time watch
if(!y(o)){if(b(o))if(r(o)){a!==p&&(
// we are transitioning from something which was not an array into array.
a=p,g=a.length=0,f++),e=o.length,g!==e&&(
// if lengths do not match we need to trigger change notification
f++,a.length=g=e);
// copy the items to oldValue and look for changes.
for(var c=0;c<e;c++)s=a[c],u=o[c],i=s!==s&&u!==u,i||s===u||(f++,a[c]=u)}else{a!==d&&(
// we are transitioning from something which was not an object into object.
a=d={},g=0,f++),
// copy the items to oldValue and look for changes.
e=0;for(n in o)Or.call(o,n)&&(e++,u=o[n],s=a[n],n in a?(i=s!==s&&u!==u,i||s===u||(f++,a[n]=u)):(g++,a[n]=u,f++));if(g>e){
// we used to have more keys, need to find them and destroy them.
f++;for(n in a)Or.call(o,n)||(g--,delete a[n])}}else// if primitive
a!==o&&(a=o,f++);return f}}function i(){
// make a copy for the next time a collection is changed
if(v?(v=!1,e(o,o,s)):e(o,u,s),l)if(b(o))if(r(o)){u=new Array(o.length);for(var t=0;t<o.length;t++)u[t]=o[t]}else{// if object
u={};for(var n in o)Or.call(o,n)&&(u[n]=o[n])}else
//primitive
u=o}n.$stateful=!0;var o,a,u,s=this,l=e.length>1,f=0,h=c(t,n),p=[],d={},v=!0,g=0;return this.$watch(h,i)},/**
	       * @ngdoc method
	       * @name $rootScope.Scope#$digest
	       * @kind function
	       *
	       * @description
	       * Processes all of the {@link ng.$rootScope.Scope#$watch watchers} of the current scope and
	       * its children. Because a {@link ng.$rootScope.Scope#$watch watcher}'s listener can change
	       * the model, the `$digest()` keeps calling the {@link ng.$rootScope.Scope#$watch watchers}
	       * until no more listeners are firing. This means that it is possible to get into an infinite
	       * loop. This function will throw `'Maximum iteration limit exceeded.'` if the number of
	       * iterations exceeds 10.
	       *
	       * Usually, you don't call `$digest()` directly in
	       * {@link ng.directive:ngController controllers} or in
	       * {@link ng.$compileProvider#directive directives}.
	       * Instead, you should call {@link ng.$rootScope.Scope#$apply $apply()} (typically from within
	       * a {@link ng.$compileProvider#directive directive}), which will force a `$digest()`.
	       *
	       * If you want to be notified whenever `$digest()` is called,
	       * you can register a `watchExpression` function with
	       * {@link ng.$rootScope.Scope#$watch $watch()} with no `listener`.
	       *
	       * In unit tests, you may need to call `$digest()` to simulate the scope life cycle.
	       *
	       * # Example
	       * ```js
	           var scope = ...;
	           scope.name = 'misko';
	           scope.counter = 0;
	
	           expect(scope.counter).toEqual(0);
	           scope.$watch('name', function(newValue, oldValue) {
	             scope.counter = scope.counter + 1;
	           });
	           expect(scope.counter).toEqual(0);
	
	           scope.$digest();
	           // the listener is always called during the first $digest loop after it was registered
	           expect(scope.counter).toEqual(1);
	
	           scope.$digest();
	           // but now it will not be called unless the value changes
	           expect(scope.counter).toEqual(1);
	
	           scope.name = 'adam';
	           scope.$digest();
	           expect(scope.counter).toEqual(2);
	       * ```
	       *
	       */
$digest:function(){var t,r,i,u,c,f,h,p,d,m,y,$,b=e,_=this,k=[];v("$digest"),
// Check for changes to browser url that happened in sync before the call to $digest
l.$$checkUrlChange(),this===C&&null!==s&&(
// If this is the root scope, and $applyAsync has scheduled a deferred $apply(), then
// cancel the scheduled $apply and flush the queue of expressions to be evaluated.
l.defer.cancel(s),x()),a=null;do{for(// "while dirty" loop
p=!1,m=_;A.length;){try{$=A.shift(),$.scope.$eval($.expression,$.locals)}catch(T){n(T)}a=null}t:do{// "traverse the scopes" loop
if(f=m.$$watchers)for(
// process our watches
h=f.length;h--;)try{
// Most common watches are on primitives, in which case we can short
// circuit it with === operator, only when === fails do we use .equals
if(t=f[h])if(c=t.get,(r=c(m))===(i=t.last)||(t.eq?V(r,i):"number"==typeof r&&"number"==typeof i&&isNaN(r)&&isNaN(i))){if(t===a){
// If the most recently dirty watcher is now clean, short circuit since the remaining watchers
// have already been tested.
p=!1;break t}}else p=!0,a=t,t.last=t.eq?U(r,null):r,u=t.fn,u(r,i===w?r:i,m),b<5&&(y=4-b,k[y]||(k[y]=[]),k[y].push({msg:S(t.exp)?"fn: "+(t.exp.name||t.exp.toString()):t.exp,newVal:r,oldVal:i}))}catch(T){n(T)}
// Insanity Warning: scope depth-first traversal
// yes, this code is a bit crazy, but it works and we have tests to prove it!
// this piece should be kept in sync with the traversal in $broadcast
if(!(d=m.$$watchersCount&&m.$$childHead||m!==_&&m.$$nextSibling))for(;m!==_&&!(d=m.$$nextSibling);)m=m.$parent}while(m=d);
// `break traverseScopesLoop;` takes us to here
if((p||A.length)&&!b--)throw g(),o("infdig","{0} $digest() iterations reached. Aborting!\nWatchers fired in the last 5 iterations: {1}",e,k)}while(p||A.length);for(g();E.length;)try{E.shift()()}catch(T){n(T)}},/**
	       * @ngdoc event
	       * @name $rootScope.Scope#$destroy
	       * @eventType broadcast on scope being destroyed
	       *
	       * @description
	       * Broadcasted when a scope and its children are being destroyed.
	       *
	       * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to
	       * clean up DOM bindings before an element is removed from the DOM.
	       */
/**
	       * @ngdoc method
	       * @name $rootScope.Scope#$destroy
	       * @kind function
	       *
	       * @description
	       * Removes the current scope (and all of its children) from the parent scope. Removal implies
	       * that calls to {@link ng.$rootScope.Scope#$digest $digest()} will no longer
	       * propagate to the current scope and its children. Removal also implies that the current
	       * scope is eligible for garbage collection.
	       *
	       * The `$destroy()` is usually used by directives such as
	       * {@link ng.directive:ngRepeat ngRepeat} for managing the
	       * unrolling of the loop.
	       *
	       * Just before a scope is destroyed, a `$destroy` event is broadcasted on this scope.
	       * Application code can register a `$destroy` event handler that will give it a chance to
	       * perform any necessary cleanup.
	       *
	       * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to
	       * clean up DOM bindings before an element is removed from the DOM.
	       */
$destroy:function(){
// We can't destroy a scope that has been already destroyed.
if(!this.$$destroyed){var t=this.$parent;this.$broadcast("$destroy"),this.$$destroyed=!0,this===C&&
//Remove handlers attached to window when $rootScope is removed
l.$$applicationDestroyed(),m(this,-this.$$watchersCount);for(var e in this.$$listenerCount)$(this,this.$$listenerCount[e],e);
// sever all the references to parent scopes (after this cleanup, the current scope should
// not be retained by any of our references and should be eligible for garbage collection)
t&&t.$$childHead==this&&(t.$$childHead=this.$$nextSibling),t&&t.$$childTail==this&&(t.$$childTail=this.$$prevSibling),this.$$prevSibling&&(this.$$prevSibling.$$nextSibling=this.$$nextSibling),this.$$nextSibling&&(this.$$nextSibling.$$prevSibling=this.$$prevSibling),
// Disable listeners, watchers and apply/digest methods
this.$destroy=this.$digest=this.$apply=this.$evalAsync=this.$applyAsync=d,this.$on=this.$watch=this.$watchGroup=function(){return d},this.$$listeners={},
// Disconnect the next sibling to prevent `cleanUpScope` destroying those too
this.$$nextSibling=null,h(this)}},/**
	       * @ngdoc method
	       * @name $rootScope.Scope#$eval
	       * @kind function
	       *
	       * @description
	       * Executes the `expression` on the current scope and returns the result. Any exceptions in
	       * the expression are propagated (uncaught). This is useful when evaluating Angular
	       * expressions.
	       *
	       * # Example
	       * ```js
	           var scope = ng.$rootScope.Scope();
	           scope.a = 1;
	           scope.b = 2;
	
	           expect(scope.$eval('a+b')).toEqual(3);
	           expect(scope.$eval(function(scope){ return scope.a + scope.b; })).toEqual(3);
	       * ```
	       *
	       * @param {(string|function())=} expression An angular expression to be executed.
	       *
	       *    - `string`: execute using the rules as defined in  {@link guide/expression expression}.
	       *    - `function(scope)`: execute the function with the current `scope` parameter.
	       *
	       * @param {(object)=} locals Local variables object, useful for overriding values in scope.
	       * @returns {*} The result of evaluating the expression.
	       */
$eval:function(t,e){return c(t)(this,e)},/**
	       * @ngdoc method
	       * @name $rootScope.Scope#$evalAsync
	       * @kind function
	       *
	       * @description
	       * Executes the expression on the current scope at a later point in time.
	       *
	       * The `$evalAsync` makes no guarantees as to when the `expression` will be executed, only
	       * that:
	       *
	       *   - it will execute after the function that scheduled the evaluation (preferably before DOM
	       *     rendering).
	       *   - at least one {@link ng.$rootScope.Scope#$digest $digest cycle} will be performed after
	       *     `expression` execution.
	       *
	       * Any exceptions from the execution of the expression are forwarded to the
	       * {@link ng.$exceptionHandler $exceptionHandler} service.
	       *
	       * __Note:__ if this function is called outside of a `$digest` cycle, a new `$digest` cycle
	       * will be scheduled. However, it is encouraged to always call code that changes the model
	       * from within an `$apply` call. That includes code evaluated via `$evalAsync`.
	       *
	       * @param {(string|function())=} expression An angular expression to be executed.
	       *
	       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
	       *    - `function(scope)`: execute the function with the current `scope` parameter.
	       *
	       * @param {(object)=} locals Local variables object, useful for overriding values in scope.
	       */
$evalAsync:function(t,e){
// if we are outside of an $digest loop and this is the first time we are scheduling async
// task also schedule async auto-flush
C.$$phase||A.length||l.defer(function(){A.length&&C.$digest()}),A.push({scope:this,expression:c(t),locals:e})},$$postDigest:function(t){E.push(t)},/**
	       * @ngdoc method
	       * @name $rootScope.Scope#$apply
	       * @kind function
	       *
	       * @description
	       * `$apply()` is used to execute an expression in angular from outside of the angular
	       * framework. (For example from browser DOM events, setTimeout, XHR or third party libraries).
	       * Because we are calling into the angular framework we need to perform proper scope life
	       * cycle of {@link ng.$exceptionHandler exception handling},
	       * {@link ng.$rootScope.Scope#$digest executing watches}.
	       *
	       * ## Life cycle
	       *
	       * # Pseudo-Code of `$apply()`
	       * ```js
	           function $apply(expr) {
	             try {
	               return $eval(expr);
	             } catch (e) {
	               $exceptionHandler(e);
	             } finally {
	               $root.$digest();
	             }
	           }
	       * ```
	       *
	       *
	       * Scope's `$apply()` method transitions through the following stages:
	       *
	       * 1. The {@link guide/expression expression} is executed using the
	       *    {@link ng.$rootScope.Scope#$eval $eval()} method.
	       * 2. Any exceptions from the execution of the expression are forwarded to the
	       *    {@link ng.$exceptionHandler $exceptionHandler} service.
	       * 3. The {@link ng.$rootScope.Scope#$watch watch} listeners are fired immediately after the
	       *    expression was executed using the {@link ng.$rootScope.Scope#$digest $digest()} method.
	       *
	       *
	       * @param {(string|function())=} exp An angular expression to be executed.
	       *
	       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
	       *    - `function(scope)`: execute the function with current `scope` parameter.
	       *
	       * @returns {*} The result of evaluating the expression.
	       */
$apply:function(t){try{v("$apply");try{return this.$eval(t)}finally{g()}}catch(e){n(e)}finally{try{C.$digest()}catch(e){throw n(e),e}}},/**
	       * @ngdoc method
	       * @name $rootScope.Scope#$applyAsync
	       * @kind function
	       *
	       * @description
	       * Schedule the invocation of $apply to occur at a later time. The actual time difference
	       * varies across browsers, but is typically around ~10 milliseconds.
	       *
	       * This can be used to queue up multiple expressions which need to be evaluated in the same
	       * digest.
	       *
	       * @param {(string|function())=} exp An angular expression to be executed.
	       *
	       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
	       *    - `function(scope)`: execute the function with current `scope` parameter.
	       */
$applyAsync:function(t){function e(){n.$eval(t)}var n=this;t&&k.push(e),t=c(t),_()},/**
	       * @ngdoc method
	       * @name $rootScope.Scope#$on
	       * @kind function
	       *
	       * @description
	       * Listens on events of a given type. See {@link ng.$rootScope.Scope#$emit $emit} for
	       * discussion of event life cycle.
	       *
	       * The event listener function format is: `function(event, args...)`. The `event` object
	       * passed into the listener has the following attributes:
	       *
	       *   - `targetScope` - `{Scope}`: the scope on which the event was `$emit`-ed or
	       *     `$broadcast`-ed.
	       *   - `currentScope` - `{Scope}`: the scope that is currently handling the event. Once the
	       *     event propagates through the scope hierarchy, this property is set to null.
	       *   - `name` - `{string}`: name of the event.
	       *   - `stopPropagation` - `{function=}`: calling `stopPropagation` function will cancel
	       *     further event propagation (available only for events that were `$emit`-ed).
	       *   - `preventDefault` - `{function}`: calling `preventDefault` sets `defaultPrevented` flag
	       *     to true.
	       *   - `defaultPrevented` - `{boolean}`: true if `preventDefault` was called.
	       *
	       * @param {string} name Event name to listen on.
	       * @param {function(event, ...args)} listener Function to call when the event is emitted.
	       * @returns {function()} Returns a deregistration function for this listener.
	       */
$on:function(t,e){var n=this.$$listeners[t];n||(this.$$listeners[t]=n=[]),n.push(e);var r=this;do r.$$listenerCount[t]||(r.$$listenerCount[t]=0),r.$$listenerCount[t]++;while(r=r.$parent);var i=this;return function(){var r=n.indexOf(e);r!==-1&&(n[r]=null,$(i,1,t))}},/**
	       * @ngdoc method
	       * @name $rootScope.Scope#$emit
	       * @kind function
	       *
	       * @description
	       * Dispatches an event `name` upwards through the scope hierarchy notifying the
	       * registered {@link ng.$rootScope.Scope#$on} listeners.
	       *
	       * The event life cycle starts at the scope on which `$emit` was called. All
	       * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get
	       * notified. Afterwards, the event traverses upwards toward the root scope and calls all
	       * registered listeners along the way. The event will stop propagating if one of the listeners
	       * cancels it.
	       *
	       * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed
	       * onto the {@link ng.$exceptionHandler $exceptionHandler} service.
	       *
	       * @param {string} name Event name to emit.
	       * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.
	       * @return {Object} Event object (see {@link ng.$rootScope.Scope#$on}).
	       */
$emit:function(t,e){var r,i,o,a=[],u=this,s=!1,c={name:t,targetScope:u,stopPropagation:function(){s=!0},preventDefault:function(){c.defaultPrevented=!0},defaultPrevented:!1},l=H([c],arguments,1);do{for(r=u.$$listeners[t]||a,c.currentScope=u,i=0,o=r.length;i<o;i++)
// if listeners were deregistered, defragment the array
if(r[i])try{
//allow all listeners attached to the current scope to run
r[i].apply(null,l)}catch(f){n(f)}else r.splice(i,1),i--,o--;
//if any listener on the current scope stops propagation, prevent bubbling
if(s)return c.currentScope=null,c;
//traverse upwards
u=u.$parent}while(u);return c.currentScope=null,c},/**
	       * @ngdoc method
	       * @name $rootScope.Scope#$broadcast
	       * @kind function
	       *
	       * @description
	       * Dispatches an event `name` downwards to all child scopes (and their children) notifying the
	       * registered {@link ng.$rootScope.Scope#$on} listeners.
	       *
	       * The event life cycle starts at the scope on which `$broadcast` was called. All
	       * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get
	       * notified. Afterwards, the event propagates to all direct and indirect scopes of the current
	       * scope and calls all registered listeners along the way. The event cannot be canceled.
	       *
	       * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed
	       * onto the {@link ng.$exceptionHandler $exceptionHandler} service.
	       *
	       * @param {string} name Event name to broadcast.
	       * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.
	       * @return {Object} Event object, see {@link ng.$rootScope.Scope#$on}
	       */
$broadcast:function(t,e){var r=this,i=r,o=r,a={name:t,targetScope:r,preventDefault:function(){a.defaultPrevented=!0},defaultPrevented:!1};if(!r.$$listenerCount[t])return a;
//down while you can, then up and next sibling or up and next sibling until back at root
for(var u,s,c,l=H([a],arguments,1);i=o;){for(a.currentScope=i,u=i.$$listeners[t]||[],s=0,c=u.length;s<c;s++)
// if listeners were deregistered, defragment the array
if(u[s])try{u[s].apply(null,l)}catch(f){n(f)}else u.splice(s,1),s--,c--;
// Insanity Warning: scope depth-first traversal
// yes, this code is a bit crazy, but it works and we have tests to prove it!
// this piece should be kept in sync with the traversal in $digest
// (though it differs due to having the extra check for $$listenerCount)
if(!(o=i.$$listenerCount[t]&&i.$$childHead||i!==r&&i.$$nextSibling))for(;i!==r&&!(o=i.$$nextSibling);)i=i.$parent}return a.currentScope=null,a}};var C=new p,A=C.$$asyncQueue=[],E=C.$$postDigestQueue=[],k=C.$$applyAsyncQueue=[];return C}]}/**
	 * @ngdoc service
	 * @name $rootElement
	 *
	 * @description
	 * The root element of Angular application. This is either the element where {@link
	 * ng.directive:ngApp ngApp} was declared or the element passed into
	 * {@link angular.bootstrap}. The element represents the root element of application. It is also the
	 * location where the application's {@link auto.$injector $injector} service gets
	 * published, and can be retrieved using `$rootElement.injector()`.
	 */
// the implementation is in angular.bootstrap
/**
	 * @description
	 * Private service to sanitize uris for links and images. Used by $compile and $sanitize.
	 */
function Cn(){var t=/^\s*(https?|ftp|mailto|tel|file):/,e=/^\s*((https?|ftp|file|blob):|data:image\/)/;/**
	   * @description
	   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
	   * urls during a[href] sanitization.
	   *
	   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
	   *
	   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into
	   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`
	   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
	   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
	   *
	   * @param {RegExp=} regexp New regexp to whitelist urls with.
	   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
	   *    chaining otherwise.
	   */
this.aHrefSanitizationWhitelist=function(e){return $(e)?(t=e,this):t},/**
	   * @description
	   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
	   * urls during img[src] sanitization.
	   *
	   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
	   *
	   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into
	   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`
	   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
	   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
	   *
	   * @param {RegExp=} regexp New regexp to whitelist urls with.
	   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
	   *    chaining otherwise.
	   */
this.imgSrcSanitizationWhitelist=function(t){return $(t)?(e=t,this):e},this.$get=function(){return function(n,r){var i,o=r?e:t;return i=Nn(n).href,""===i||i.match(o)?n:"unsafe:"+i}}}
// Helper functions follow.
function Sn(t){if("self"===t)return t;if(x(t)){
// Strings match exactly except for 2 wildcards - '*' and '**'.
// '*' matches any character except those from the set ':/.?&'.
// '**' matches any character (like .* in a RegExp).
// More than 2 *'s raises an error as it's ill defined.
if(t.indexOf("***")>-1)throw $o("iwcard","Illegal sequence *** in string matcher.  String: {0}",t);return t=Yr(t).replace("\\*\\*",".*").replace("\\*","[^:/.?&;]*"),new RegExp("^"+t+"$")}if(A(t))
// The only other type of matcher allowed is a Regexp.
// Match entire URL / disallow partial matches.
// Flags are reset (i.e. no global, ignoreCase or multiline)
return new RegExp("^"+t.source+"$");throw $o("imatcher",'Matchers may only be "self", string patterns or RegExp objects')}function An(t){var e=[];return $(t)&&i(t,function(t){e.push(Sn(t))}),e}/**
	 * @ngdoc service
	 * @name $sceDelegate
	 * @kind function
	 *
	 * @description
	 *
	 * `$sceDelegate` is a service that is used by the `$sce` service to provide {@link ng.$sce Strict
	 * Contextual Escaping (SCE)} services to AngularJS.
	 *
	 * Typically, you would configure or override the {@link ng.$sceDelegate $sceDelegate} instead of
	 * the `$sce` service to customize the way Strict Contextual Escaping works in AngularJS.  This is
	 * because, while the `$sce` provides numerous shorthand methods, etc., you really only need to
	 * override 3 core functions (`trustAs`, `getTrusted` and `valueOf`) to replace the way things
	 * work because `$sce` delegates to `$sceDelegate` for these operations.
	 *
	 * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} to configure this service.
	 *
	 * The default instance of `$sceDelegate` should work out of the box with little pain.  While you
	 * can override it completely to change the behavior of `$sce`, the common case would
	 * involve configuring the {@link ng.$sceDelegateProvider $sceDelegateProvider} instead by setting
	 * your own whitelists and blacklists for trusting URLs used for loading AngularJS resources such as
	 * templates.  Refer {@link ng.$sceDelegateProvider#resourceUrlWhitelist
	 * $sceDelegateProvider.resourceUrlWhitelist} and {@link
	 * ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}
	 */
/**
	 * @ngdoc provider
	 * @name $sceDelegateProvider
	 * @description
	 *
	 * The `$sceDelegateProvider` provider allows developers to configure the {@link ng.$sceDelegate
	 * $sceDelegate} service.  This allows one to get/set the whitelists and blacklists used to ensure
	 * that the URLs used for sourcing Angular templates are safe.  Refer {@link
	 * ng.$sceDelegateProvider#resourceUrlWhitelist $sceDelegateProvider.resourceUrlWhitelist} and
	 * {@link ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}
	 *
	 * For the general details about this service in Angular, read the main page for {@link ng.$sce
	 * Strict Contextual Escaping (SCE)}.
	 *
	 * **Example**:  Consider the following case. <a name="example"></a>
	 *
	 * - your app is hosted at url `http://myapp.example.com/`
	 * - but some of your templates are hosted on other domains you control such as
	 *   `http://srv01.assets.example.com/`,  `http://srv02.assets.example.com/`, etc.
	 * - and you have an open redirect at `http://myapp.example.com/clickThru?...`.
	 *
	 * Here is what a secure configuration for this scenario might look like:
	 *
	 * ```
	 *  angular.module('myApp', []).config(function($sceDelegateProvider) {
	 *    $sceDelegateProvider.resourceUrlWhitelist([
	 *      // Allow same origin resource loads.
	 *      'self',
	 *      // Allow loading from our assets domain.  Notice the difference between * and **.
	 *      'http://srv*.assets.example.com/**'
	 *    ]);
	 *
	 *    // The blacklist overrides the whitelist so the open redirect here is blocked.
	 *    $sceDelegateProvider.resourceUrlBlacklist([
	 *      'http://myapp.example.com/clickThru**'
	 *    ]);
	 *  });
	 * ```
	 */
function En(){this.SCE_CONTEXTS=bo;
// Resource URLs can also be trusted by policy.
var t=["self"],e=[];/**
	   * @ngdoc method
	   * @name $sceDelegateProvider#resourceUrlWhitelist
	   * @kind function
	   *
	   * @param {Array=} whitelist When provided, replaces the resourceUrlWhitelist with the value
	   *    provided.  This must be an array or null.  A snapshot of this array is used so further
	   *    changes to the array are ignored.
	   *
	   *    Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items
	   *    allowed in this array.
	   *
	   *    <div class="alert alert-warning">
	   *    **Note:** an empty whitelist array will block all URLs!
	   *    </div>
	   *
	   * @return {Array} the currently set whitelist array.
	   *
	   * The **default value** when no whitelist has been explicitly set is `['self']` allowing only
	   * same origin resource requests.
	   *
	   * @description
	   * Sets/Gets the whitelist of trusted resource URLs.
	   */
this.resourceUrlWhitelist=function(e){return arguments.length&&(t=An(e)),t},/**
	   * @ngdoc method
	   * @name $sceDelegateProvider#resourceUrlBlacklist
	   * @kind function
	   *
	   * @param {Array=} blacklist When provided, replaces the resourceUrlBlacklist with the value
	   *    provided.  This must be an array or null.  A snapshot of this array is used so further
	   *    changes to the array are ignored.
	   *
	   *    Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items
	   *    allowed in this array.
	   *
	   *    The typical usage for the blacklist is to **block
	   *    [open redirects](http://cwe.mitre.org/data/definitions/601.html)** served by your domain as
	   *    these would otherwise be trusted but actually return content from the redirected domain.
	   *
	   *    Finally, **the blacklist overrides the whitelist** and has the final say.
	   *
	   * @return {Array} the currently set blacklist array.
	   *
	   * The **default value** when no whitelist has been explicitly set is the empty array (i.e. there
	   * is no blacklist.)
	   *
	   * @description
	   * Sets/Gets the blacklist of trusted resource URLs.
	   */
this.resourceUrlBlacklist=function(t){return arguments.length&&(e=An(t)),e},this.$get=["$injector",function(n){function r(t,e){return"self"===t?Pn(e):!!t.exec(e.href)}function i(n){var i,o,a=Nn(n.toString()),u=!1;
// Ensure that at least one item from the whitelist allows this url.
for(i=0,o=t.length;i<o;i++)if(r(t[i],a)){u=!0;break}if(u)
// Ensure that no item from the blacklist blocked this url.
for(i=0,o=e.length;i<o;i++)if(r(e[i],a)){u=!1;break}return u}function o(t){var e=function(t){this.$$unwrapTrustedValue=function(){return t}};return t&&(e.prototype=new t),e.prototype.valueOf=function(){return this.$$unwrapTrustedValue()},e.prototype.toString=function(){return this.$$unwrapTrustedValue().toString()},e}/**
	     * @ngdoc method
	     * @name $sceDelegate#trustAs
	     *
	     * @description
	     * Returns an object that is trusted by angular for use in specified strict
	     * contextual escaping contexts (such as ng-bind-html, ng-include, any src
	     * attribute interpolation, any dom event binding attribute interpolation
	     * such as for onclick,  etc.) that uses the provided value.
	     * See {@link ng.$sce $sce} for enabling strict contextual escaping.
	     *
	     * @param {string} type The kind of context in which this value is safe for use.  e.g. url,
	     *   resourceUrl, html, js and css.
	     * @param {*} value The value that that should be considered trusted/safe.
	     * @returns {*} A value that can be used to stand in for the provided `value` in places
	     * where Angular expects a $sce.trustAs() return value.
	     */
function a(t,e){var n=f.hasOwnProperty(t)?f[t]:null;if(!n)throw $o("icontext","Attempted to trust a value in invalid context. Context: {0}; Value: {1}",t,e);if(null===e||y(e)||""===e)return e;
// All the current contexts in SCE_CONTEXTS happen to be strings.  In order to avoid trusting
// mutable objects, we ensure here that the value passed in is actually a string.
if("string"!=typeof e)throw $o("itype","Attempted to trust a non-string value in a content requiring a string: Context: {0}",t);return new n(e)}/**
	     * @ngdoc method
	     * @name $sceDelegate#valueOf
	     *
	     * @description
	     * If the passed parameter had been returned by a prior call to {@link ng.$sceDelegate#trustAs
	     * `$sceDelegate.trustAs`}, returns the value that had been passed to {@link
	     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.
	     *
	     * If the passed parameter is not a value that had been returned by {@link
	     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}, returns it as-is.
	     *
	     * @param {*} value The result of a prior {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}
	     *      call or anything else.
	     * @returns {*} The `value` that was originally provided to {@link ng.$sceDelegate#trustAs
	     *     `$sceDelegate.trustAs`} if `value` is the result of such a call.  Otherwise, returns
	     *     `value` unchanged.
	     */
function u(t){return t instanceof l?t.$$unwrapTrustedValue():t}/**
	     * @ngdoc method
	     * @name $sceDelegate#getTrusted
	     *
	     * @description
	     * Takes the result of a {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`} call and
	     * returns the originally supplied value if the queried context type is a supertype of the
	     * created type.  If this condition isn't satisfied, throws an exception.
	     *
	     * <div class="alert alert-danger">
	     * Disabling auto-escaping is extremely dangerous, it usually creates a Cross Site Scripting
	     * (XSS) vulnerability in your application.
	     * </div>
	     *
	     * @param {string} type The kind of context in which this value is to be used.
	     * @param {*} maybeTrusted The result of a prior {@link ng.$sceDelegate#trustAs
	     *     `$sceDelegate.trustAs`} call.
	     * @returns {*} The value the was originally provided to {@link ng.$sceDelegate#trustAs
	     *     `$sceDelegate.trustAs`} if valid in this context.  Otherwise, throws an exception.
	     */
function s(t,e){if(null===e||y(e)||""===e)return e;var n=f.hasOwnProperty(t)?f[t]:null;if(n&&e instanceof n)return e.$$unwrapTrustedValue();
// If we get here, then we may only take one of two actions.
// 1. sanitize the value for the requested type, or
// 2. throw an exception.
if(t===bo.RESOURCE_URL){if(i(e))return e;throw $o("insecurl","Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}",e.toString())}if(t===bo.HTML)return c(e);throw $o("unsafe","Attempting to use an unsafe value in a safe context.")}var c=function(t){throw $o("unsafe","Attempting to use an unsafe value in a safe context.")};n.has("$sanitize")&&(c=n.get("$sanitize"));var l=o(),f={};return f[bo.HTML]=o(l),f[bo.CSS]=o(l),f[bo.URL]=o(l),f[bo.JS]=o(l),f[bo.RESOURCE_URL]=o(f[bo.URL]),{trustAs:a,getTrusted:s,valueOf:u}}]}/**
	 * @ngdoc provider
	 * @name $sceProvider
	 * @description
	 *
	 * The $sceProvider provider allows developers to configure the {@link ng.$sce $sce} service.
	 * -   enable/disable Strict Contextual Escaping (SCE) in a module
	 * -   override the default implementation with a custom delegate
	 *
	 * Read more about {@link ng.$sce Strict Contextual Escaping (SCE)}.
	 */
/* jshint maxlen: false*/
/**
	 * @ngdoc service
	 * @name $sce
	 * @kind function
	 *
	 * @description
	 *
	 * `$sce` is a service that provides Strict Contextual Escaping services to AngularJS.
	 *
	 * # Strict Contextual Escaping
	 *
	 * Strict Contextual Escaping (SCE) is a mode in which AngularJS requires bindings in certain
	 * contexts to result in a value that is marked as safe to use for that context.  One example of
	 * such a context is binding arbitrary html controlled by the user via `ng-bind-html`.  We refer
	 * to these contexts as privileged or SCE contexts.
	 *
	 * As of version 1.2, Angular ships with SCE enabled by default.
	 *
	 * Note:  When enabled (the default), IE<11 in quirks mode is not supported.  In this mode, IE<11 allow
	 * one to execute arbitrary javascript by the use of the expression() syntax.  Refer
	 * <http://blogs.msdn.com/b/ie/archive/2008/10/16/ending-expressions.aspx> to learn more about them.
	 * You can ensure your document is in standards mode and not quirks mode by adding `<!doctype html>`
	 * to the top of your HTML document.
	 *
	 * SCE assists in writing code in way that (a) is secure by default and (b) makes auditing for
	 * security vulnerabilities such as XSS, clickjacking, etc. a lot easier.
	 *
	 * Here's an example of a binding in a privileged context:
	 *
	 * ```
	 * <input ng-model="userHtml" aria-label="User input">
	 * <div ng-bind-html="userHtml"></div>
	 * ```
	 *
	 * Notice that `ng-bind-html` is bound to `userHtml` controlled by the user.  With SCE
	 * disabled, this application allows the user to render arbitrary HTML into the DIV.
	 * In a more realistic example, one may be rendering user comments, blog articles, etc. via
	 * bindings.  (HTML is just one example of a context where rendering user controlled input creates
	 * security vulnerabilities.)
	 *
	 * For the case of HTML, you might use a library, either on the client side, or on the server side,
	 * to sanitize unsafe HTML before binding to the value and rendering it in the document.
	 *
	 * How would you ensure that every place that used these types of bindings was bound to a value that
	 * was sanitized by your library (or returned as safe for rendering by your server?)  How can you
	 * ensure that you didn't accidentally delete the line that sanitized the value, or renamed some
	 * properties/fields and forgot to update the binding to the sanitized value?
	 *
	 * To be secure by default, you want to ensure that any such bindings are disallowed unless you can
	 * determine that something explicitly says it's safe to use a value for binding in that
	 * context.  You can then audit your code (a simple grep would do) to ensure that this is only done
	 * for those values that you can easily tell are safe - because they were received from your server,
	 * sanitized by your library, etc.  You can organize your codebase to help with this - perhaps
	 * allowing only the files in a specific directory to do this.  Ensuring that the internal API
	 * exposed by that code doesn't markup arbitrary values as safe then becomes a more manageable task.
	 *
	 * In the case of AngularJS' SCE service, one uses {@link ng.$sce#trustAs $sce.trustAs}
	 * (and shorthand methods such as {@link ng.$sce#trustAsHtml $sce.trustAsHtml}, etc.) to
	 * obtain values that will be accepted by SCE / privileged contexts.
	 *
	 *
	 * ## How does it work?
	 *
	 * In privileged contexts, directives and code will bind to the result of {@link ng.$sce#getTrusted
	 * $sce.getTrusted(context, value)} rather than to the value directly.  Directives use {@link
	 * ng.$sce#parseAs $sce.parseAs} rather than `$parse` to watch attribute bindings, which performs the
	 * {@link ng.$sce#getTrusted $sce.getTrusted} behind the scenes on non-constant literals.
	 *
	 * As an example, {@link ng.directive:ngBindHtml ngBindHtml} uses {@link
	 * ng.$sce#parseAsHtml $sce.parseAsHtml(binding expression)}.  Here's the actual code (slightly
	 * simplified):
	 *
	 * ```
	 * var ngBindHtmlDirective = ['$sce', function($sce) {
	 *   return function(scope, element, attr) {
	 *     scope.$watch($sce.parseAsHtml(attr.ngBindHtml), function(value) {
	 *       element.html(value || '');
	 *     });
	 *   };
	 * }];
	 * ```
	 *
	 * ## Impact on loading templates
	 *
	 * This applies both to the {@link ng.directive:ngInclude `ng-include`} directive as well as
	 * `templateUrl`'s specified by {@link guide/directive directives}.
	 *
	 * By default, Angular only loads templates from the same domain and protocol as the application
	 * document.  This is done by calling {@link ng.$sce#getTrustedResourceUrl
	 * $sce.getTrustedResourceUrl} on the template URL.  To load templates from other domains and/or
	 * protocols, you may either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist
	 * them} or {@link ng.$sce#trustAsResourceUrl wrap it} into a trusted value.
	 *
	 * *Please note*:
	 * The browser's
	 * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)
	 * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)
	 * policy apply in addition to this and may further restrict whether the template is successfully
	 * loaded.  This means that without the right CORS policy, loading templates from a different domain
	 * won't work on all browsers.  Also, loading templates from `file://` URL does not work on some
	 * browsers.
	 *
	 * ## This feels like too much overhead
	 *
	 * It's important to remember that SCE only applies to interpolation expressions.
	 *
	 * If your expressions are constant literals, they're automatically trusted and you don't need to
	 * call `$sce.trustAs` on them (remember to include the `ngSanitize` module) (e.g.
	 * `<div ng-bind-html="'<b>implicitly trusted</b>'"></div>`) just works.
	 *
	 * Additionally, `a[href]` and `img[src]` automatically sanitize their URLs and do not pass them
	 * through {@link ng.$sce#getTrusted $sce.getTrusted}.  SCE doesn't play a role here.
	 *
	 * The included {@link ng.$sceDelegate $sceDelegate} comes with sane defaults to allow you to load
	 * templates in `ng-include` from your application's domain without having to even know about SCE.
	 * It blocks loading templates from other domains or loading templates over http from an https
	 * served document.  You can change these by setting your own custom {@link
	 * ng.$sceDelegateProvider#resourceUrlWhitelist whitelists} and {@link
	 * ng.$sceDelegateProvider#resourceUrlBlacklist blacklists} for matching such URLs.
	 *
	 * This significantly reduces the overhead.  It is far easier to pay the small overhead and have an
	 * application that's secure and can be audited to verify that with much more ease than bolting
	 * security onto an application later.
	 *
	 * <a name="contexts"></a>
	 * ## What trusted context types are supported?
	 *
	 * | Context             | Notes          |
	 * |---------------------|----------------|
	 * | `$sce.HTML`         | For HTML that's safe to source into the application.  The {@link ng.directive:ngBindHtml ngBindHtml} directive uses this context for bindings. If an unsafe value is encountered and the {@link ngSanitize $sanitize} module is present this will sanitize the value instead of throwing an error. |
	 * | `$sce.CSS`          | For CSS that's safe to source into the application.  Currently unused.  Feel free to use it in your own directives. |
	 * | `$sce.URL`          | For URLs that are safe to follow as links.  Currently unused (`<a href=` and `<img src=` sanitize their urls and don't constitute an SCE context. |
	 * | `$sce.RESOURCE_URL` | For URLs that are not only safe to follow as links, but whose contents are also safe to include in your application.  Examples include `ng-include`, `src` / `ngSrc` bindings for tags other than `IMG` (e.g. `IFRAME`, `OBJECT`, etc.)  <br><br>Note that `$sce.RESOURCE_URL` makes a stronger statement about the URL than `$sce.URL` does and therefore contexts requiring values trusted for `$sce.RESOURCE_URL` can be used anywhere that values trusted for `$sce.URL` are required. |
	 * | `$sce.JS`           | For JavaScript that is safe to execute in your application's context.  Currently unused.  Feel free to use it in your own directives. |
	 *
	 * ## Format of items in {@link ng.$sceDelegateProvider#resourceUrlWhitelist resourceUrlWhitelist}/{@link ng.$sceDelegateProvider#resourceUrlBlacklist Blacklist} <a name="resourceUrlPatternItem"></a>
	 *
	 *  Each element in these arrays must be one of the following:
	 *
	 *  - **'self'**
	 *    - The special **string**, `'self'`, can be used to match against all URLs of the **same
	 *      domain** as the application document using the **same protocol**.
	 *  - **String** (except the special value `'self'`)
	 *    - The string is matched against the full *normalized / absolute URL* of the resource
	 *      being tested (substring matches are not good enough.)
	 *    - There are exactly **two wildcard sequences** - `*` and `**`.  All other characters
	 *      match themselves.
	 *    - `*`: matches zero or more occurrences of any character other than one of the following 6
	 *      characters: '`:`', '`/`', '`.`', '`?`', '`&`' and '`;`'.  It's a useful wildcard for use
	 *      in a whitelist.
	 *    - `**`: matches zero or more occurrences of *any* character.  As such, it's not
	 *      appropriate for use in a scheme, domain, etc. as it would match too much.  (e.g.
	 *      http://**.example.com/ would match http://evil.com/?ignore=.example.com/ and that might
	 *      not have been the intention.)  Its usage at the very end of the path is ok.  (e.g.
	 *      http://foo.example.com/templates/**).
	 *  - **RegExp** (*see caveat below*)
	 *    - *Caveat*:  While regular expressions are powerful and offer great flexibility,  their syntax
	 *      (and all the inevitable escaping) makes them *harder to maintain*.  It's easy to
	 *      accidentally introduce a bug when one updates a complex expression (imho, all regexes should
	 *      have good test coverage).  For instance, the use of `.` in the regex is correct only in a
	 *      small number of cases.  A `.` character in the regex used when matching the scheme or a
	 *      subdomain could be matched against a `:` or literal `.` that was likely not intended.   It
	 *      is highly recommended to use the string patterns and only fall back to regular expressions
	 *      as a last resort.
	 *    - The regular expression must be an instance of RegExp (i.e. not a string.)  It is
	 *      matched against the **entire** *normalized / absolute URL* of the resource being tested
	 *      (even when the RegExp did not have the `^` and `$` codes.)  In addition, any flags
	 *      present on the RegExp (such as multiline, global, ignoreCase) are ignored.
	 *    - If you are generating your JavaScript from some other templating engine (not
	 *      recommended, e.g. in issue [#4006](https://github.com/angular/angular.js/issues/4006)),
	 *      remember to escape your regular expression (and be aware that you might need more than
	 *      one level of escaping depending on your templating engine and the way you interpolated
	 *      the value.)  Do make use of your platform's escaping mechanism as it might be good
	 *      enough before coding your own.  E.g. Ruby has
	 *      [Regexp.escape(str)](http://www.ruby-doc.org/core-2.0.0/Regexp.html#method-c-escape)
	 *      and Python has [re.escape](http://docs.python.org/library/re.html#re.escape).
	 *      Javascript lacks a similar built in function for escaping.  Take a look at Google
	 *      Closure library's [goog.string.regExpEscape(s)](
	 *      http://docs.closure-library.googlecode.com/git/closure_goog_string_string.js.source.html#line962).
	 *
	 * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} for an example.
	 *
	 * ## Show me an example using SCE.
	 *
	 * <example module="mySceApp" deps="angular-sanitize.js">
	 * <file name="index.html">
	 *   <div ng-controller="AppController as myCtrl">
	 *     <i ng-bind-html="myCtrl.explicitlyTrustedHtml" id="explicitlyTrustedHtml"></i><br><br>
	 *     <b>User comments</b><br>
	 *     By default, HTML that isn't explicitly trusted (e.g. Alice's comment) is sanitized when
	 *     $sanitize is available.  If $sanitize isn't available, this results in an error instead of an
	 *     exploit.
	 *     <div class="well">
	 *       <div ng-repeat="userComment in myCtrl.userComments">
	 *         <b>{{userComment.name}}</b>:
	 *         <span ng-bind-html="userComment.htmlComment" class="htmlComment"></span>
	 *         <br>
	 *       </div>
	 *     </div>
	 *   </div>
	 * </file>
	 *
	 * <file name="script.js">
	 *   angular.module('mySceApp', ['ngSanitize'])
	 *     .controller('AppController', ['$http', '$templateCache', '$sce',
	 *       function($http, $templateCache, $sce) {
	 *         var self = this;
	 *         $http.get("test_data.json", {cache: $templateCache}).success(function(userComments) {
	 *           self.userComments = userComments;
	 *         });
	 *         self.explicitlyTrustedHtml = $sce.trustAsHtml(
	 *             '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +
	 *             'sanitization.&quot;">Hover over this text.</span>');
	 *       }]);
	 * </file>
	 *
	 * <file name="test_data.json">
	 * [
	 *   { "name": "Alice",
	 *     "htmlComment":
	 *         "<span onmouseover='this.textContent=\"PWN3D!\"'>Is <i>anyone</i> reading this?</span>"
	 *   },
	 *   { "name": "Bob",
	 *     "htmlComment": "<i>Yes!</i>  Am I the only other one?"
	 *   }
	 * ]
	 * </file>
	 *
	 * <file name="protractor.js" type="protractor">
	 *   describe('SCE doc demo', function() {
	 *     it('should sanitize untrusted values', function() {
	 *       expect(element.all(by.css('.htmlComment')).first().getInnerHtml())
	 *           .toBe('<span>Is <i>anyone</i> reading this?</span>');
	 *     });
	 *
	 *     it('should NOT sanitize explicitly trusted values', function() {
	 *       expect(element(by.id('explicitlyTrustedHtml')).getInnerHtml()).toBe(
	 *           '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +
	 *           'sanitization.&quot;">Hover over this text.</span>');
	 *     });
	 *   });
	 * </file>
	 * </example>
	 *
	 *
	 *
	 * ## Can I disable SCE completely?
	 *
	 * Yes, you can.  However, this is strongly discouraged.  SCE gives you a lot of security benefits
	 * for little coding overhead.  It will be much harder to take an SCE disabled application and
	 * either secure it on your own or enable SCE at a later stage.  It might make sense to disable SCE
	 * for cases where you have a lot of existing code that was written before SCE was introduced and
	 * you're migrating them a module at a time.
	 *
	 * That said, here's how you can completely disable SCE:
	 *
	 * ```
	 * angular.module('myAppWithSceDisabledmyApp', []).config(function($sceProvider) {
	 *   // Completely disable SCE.  For demonstration purposes only!
	 *   // Do not use in new projects.
	 *   $sceProvider.enabled(false);
	 * });
	 * ```
	 *
	 */
/* jshint maxlen: 100 */
function kn(){var t=!0;/**
	   * @ngdoc method
	   * @name $sceProvider#enabled
	   * @kind function
	   *
	   * @param {boolean=} value If provided, then enables/disables SCE.
	   * @return {boolean} true if SCE is enabled, false otherwise.
	   *
	   * @description
	   * Enables/disables SCE and returns the current value.
	   */
this.enabled=function(e){return arguments.length&&(t=!!e),t},/* Design notes on the default implementation for SCE.
	   *
	   * The API contract for the SCE delegate
	   * -------------------------------------
	   * The SCE delegate object must provide the following 3 methods:
	   *
	   * - trustAs(contextEnum, value)
	   *     This method is used to tell the SCE service that the provided value is OK to use in the
	   *     contexts specified by contextEnum.  It must return an object that will be accepted by
	   *     getTrusted() for a compatible contextEnum and return this value.
	   *
	   * - valueOf(value)
	   *     For values that were not produced by trustAs(), return them as is.  For values that were
	   *     produced by trustAs(), return the corresponding input value to trustAs.  Basically, if
	   *     trustAs is wrapping the given values into some type, this operation unwraps it when given
	   *     such a value.
	   *
	   * - getTrusted(contextEnum, value)
	   *     This function should return the a value that is safe to use in the context specified by
	   *     contextEnum or throw and exception otherwise.
	   *
	   * NOTE: This contract deliberately does NOT state that values returned by trustAs() must be
	   * opaque or wrapped in some holder object.  That happens to be an implementation detail.  For
	   * instance, an implementation could maintain a registry of all trusted objects by context.  In
	   * such a case, trustAs() would return the same object that was passed in.  getTrusted() would
	   * return the same object passed in if it was found in the registry under a compatible context or
	   * throw an exception otherwise.  An implementation might only wrap values some of the time based
	   * on some criteria.  getTrusted() might return a value and not throw an exception for special
	   * constants or objects even if not wrapped.  All such implementations fulfill this contract.
	   *
	   *
	   * A note on the inheritance model for SCE contexts
	   * ------------------------------------------------
	   * I've used inheritance and made RESOURCE_URL wrapped types a subtype of URL wrapped types.  This
	   * is purely an implementation details.
	   *
	   * The contract is simply this:
	   *
	   *     getTrusted($sce.RESOURCE_URL, value) succeeding implies that getTrusted($sce.URL, value)
	   *     will also succeed.
	   *
	   * Inheritance happens to capture this in a natural way.  In some future, we
	   * may not use inheritance anymore.  That is OK because no code outside of
	   * sce.js and sceSpecs.js would need to be aware of this detail.
	   */
this.$get=["$parse","$sceDelegate",function(e,n){
// Prereq: Ensure that we're not running in IE<11 quirks mode.  In that mode, IE < 11 allow
// the "expression(javascript expression)" syntax which is insecure.
if(t&&Dr<8)throw $o("iequirks","Strict Contextual Escaping does not support Internet Explorer version < 11 in quirks mode.  You can fix this by adding the text <!doctype html> to the top of your HTML document.  See http://docs.angularjs.org/api/ng.$sce for more information.");var r=F(bo);/**
	     * @ngdoc method
	     * @name $sce#isEnabled
	     * @kind function
	     *
	     * @return {Boolean} true if SCE is enabled, false otherwise.  If you want to set the value, you
	     * have to do it at module config time on {@link ng.$sceProvider $sceProvider}.
	     *
	     * @description
	     * Returns a boolean indicating if SCE is enabled.
	     */
r.isEnabled=function(){return t},r.trustAs=n.trustAs,r.getTrusted=n.getTrusted,r.valueOf=n.valueOf,t||(r.trustAs=r.getTrusted=function(t,e){return e},r.valueOf=v),/**
	     * @ngdoc method
	     * @name $sce#parseAs
	     *
	     * @description
	     * Converts Angular {@link guide/expression expression} into a function.  This is like {@link
	     * ng.$parse $parse} and is identical when the expression is a literal constant.  Otherwise, it
	     * wraps the expression in a call to {@link ng.$sce#getTrusted $sce.getTrusted(*type*,
	     * *result*)}
	     *
	     * @param {string} type The kind of SCE context in which this result will be used.
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     */
r.parseAs=function(t,n){var i=e(n);return i.literal&&i.constant?i:e(n,function(e){return r.getTrusted(t,e)})};/**
	     * @ngdoc method
	     * @name $sce#trustAs
	     *
	     * @description
	     * Delegates to {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.  As such,
	     * returns an object that is trusted by angular for use in specified strict contextual
	     * escaping contexts (such as ng-bind-html, ng-include, any src attribute
	     * interpolation, any dom event binding attribute interpolation such as for onclick,  etc.)
	     * that uses the provided value.  See * {@link ng.$sce $sce} for enabling strict contextual
	     * escaping.
	     *
	     * @param {string} type The kind of context in which this value is safe for use.  e.g. url,
	     *   resourceUrl, html, js and css.
	     * @param {*} value The value that that should be considered trusted/safe.
	     * @returns {*} A value that can be used to stand in for the provided `value` in places
	     * where Angular expects a $sce.trustAs() return value.
	     */
/**
	     * @ngdoc method
	     * @name $sce#trustAsHtml
	     *
	     * @description
	     * Shorthand method.  `$sce.trustAsHtml(value)` →
	     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.HTML, value)`}
	     *
	     * @param {*} value The value to trustAs.
	     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedHtml
	     *     $sce.getTrustedHtml(value)} to obtain the original value.  (privileged directives
	     *     only accept expressions that are either literal constants or are the
	     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
	     */
/**
	     * @ngdoc method
	     * @name $sce#trustAsUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.trustAsUrl(value)` →
	     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.URL, value)`}
	     *
	     * @param {*} value The value to trustAs.
	     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedUrl
	     *     $sce.getTrustedUrl(value)} to obtain the original value.  (privileged directives
	     *     only accept expressions that are either literal constants or are the
	     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
	     */
/**
	     * @ngdoc method
	     * @name $sce#trustAsResourceUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.trustAsResourceUrl(value)` →
	     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.RESOURCE_URL, value)`}
	     *
	     * @param {*} value The value to trustAs.
	     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedResourceUrl
	     *     $sce.getTrustedResourceUrl(value)} to obtain the original value.  (privileged directives
	     *     only accept expressions that are either literal constants or are the return
	     *     value of {@link ng.$sce#trustAs $sce.trustAs}.)
	     */
/**
	     * @ngdoc method
	     * @name $sce#trustAsJs
	     *
	     * @description
	     * Shorthand method.  `$sce.trustAsJs(value)` →
	     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.JS, value)`}
	     *
	     * @param {*} value The value to trustAs.
	     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedJs
	     *     $sce.getTrustedJs(value)} to obtain the original value.  (privileged directives
	     *     only accept expressions that are either literal constants or are the
	     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
	     */
/**
	     * @ngdoc method
	     * @name $sce#getTrusted
	     *
	     * @description
	     * Delegates to {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted`}.  As such,
	     * takes the result of a {@link ng.$sce#trustAs `$sce.trustAs`}() call and returns the
	     * originally supplied value if the queried context type is a supertype of the created type.
	     * If this condition isn't satisfied, throws an exception.
	     *
	     * @param {string} type The kind of context in which this value is to be used.
	     * @param {*} maybeTrusted The result of a prior {@link ng.$sce#trustAs `$sce.trustAs`}
	     *                         call.
	     * @returns {*} The value the was originally provided to
	     *              {@link ng.$sce#trustAs `$sce.trustAs`} if valid in this context.
	     *              Otherwise, throws an exception.
	     */
/**
	     * @ngdoc method
	     * @name $sce#getTrustedHtml
	     *
	     * @description
	     * Shorthand method.  `$sce.getTrustedHtml(value)` →
	     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.HTML, value)`}
	     *
	     * @param {*} value The value to pass to `$sce.getTrusted`.
	     * @returns {*} The return value of `$sce.getTrusted($sce.HTML, value)`
	     */
/**
	     * @ngdoc method
	     * @name $sce#getTrustedCss
	     *
	     * @description
	     * Shorthand method.  `$sce.getTrustedCss(value)` →
	     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.CSS, value)`}
	     *
	     * @param {*} value The value to pass to `$sce.getTrusted`.
	     * @returns {*} The return value of `$sce.getTrusted($sce.CSS, value)`
	     */
/**
	     * @ngdoc method
	     * @name $sce#getTrustedUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.getTrustedUrl(value)` →
	     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.URL, value)`}
	     *
	     * @param {*} value The value to pass to `$sce.getTrusted`.
	     * @returns {*} The return value of `$sce.getTrusted($sce.URL, value)`
	     */
/**
	     * @ngdoc method
	     * @name $sce#getTrustedResourceUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.getTrustedResourceUrl(value)` →
	     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.RESOURCE_URL, value)`}
	     *
	     * @param {*} value The value to pass to `$sceDelegate.getTrusted`.
	     * @returns {*} The return value of `$sce.getTrusted($sce.RESOURCE_URL, value)`
	     */
/**
	     * @ngdoc method
	     * @name $sce#getTrustedJs
	     *
	     * @description
	     * Shorthand method.  `$sce.getTrustedJs(value)` →
	     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.JS, value)`}
	     *
	     * @param {*} value The value to pass to `$sce.getTrusted`.
	     * @returns {*} The return value of `$sce.getTrusted($sce.JS, value)`
	     */
/**
	     * @ngdoc method
	     * @name $sce#parseAsHtml
	     *
	     * @description
	     * Shorthand method.  `$sce.parseAsHtml(expression string)` →
	     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.HTML, value)`}
	     *
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     */
/**
	     * @ngdoc method
	     * @name $sce#parseAsCss
	     *
	     * @description
	     * Shorthand method.  `$sce.parseAsCss(value)` →
	     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.CSS, value)`}
	     *
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     */
/**
	     * @ngdoc method
	     * @name $sce#parseAsUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.parseAsUrl(value)` →
	     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.URL, value)`}
	     *
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     */
/**
	     * @ngdoc method
	     * @name $sce#parseAsResourceUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.parseAsResourceUrl(value)` →
	     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.RESOURCE_URL, value)`}
	     *
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     */
/**
	     * @ngdoc method
	     * @name $sce#parseAsJs
	     *
	     * @description
	     * Shorthand method.  `$sce.parseAsJs(value)` →
	     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.JS, value)`}
	     *
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     */
// Shorthand delegations.
var o=r.parseAs,a=r.getTrusted,u=r.trustAs;return i(bo,function(t,e){var n=Rr(e);r[xt("parse_as_"+n)]=function(e){return o(t,e)},r[xt("get_trusted_"+n)]=function(e){return a(t,e)},r[xt("trust_as_"+n)]=function(e){return u(t,e)}}),r}]}/**
	 * !!! This is an undocumented "private" service !!!
	 *
	 * @name $sniffer
	 * @requires $window
	 * @requires $document
	 *
	 * @property {boolean} history Does the browser support html5 history api ?
	 * @property {boolean} transitions Does the browser support CSS transition events ?
	 * @property {boolean} animations Does the browser support CSS animation events ?
	 *
	 * @description
	 * This is very simple implementation of testing browser's features.
	 */
function Tn(){this.$get=["$window","$document",function(t,e){var n,r,i={},
// Chrome Packaged Apps are not allowed to access `history.pushState`. They can be detected by
// the presence of `chrome.app.runtime` (see https://developer.chrome.com/apps/api_index)
o=t.chrome&&t.chrome.app&&t.chrome.app.runtime,a=!o&&t.history&&t.history.pushState,u=h((/android (\d+)/.exec(Rr((t.navigator||{}).userAgent))||[])[1]),s=/Boxee/i.test((t.navigator||{}).userAgent),c=e[0]||{},l=/^(Moz|webkit|ms)(?=[A-Z])/,f=c.body&&c.body.style,p=!1,d=!1;if(f){for(var v in f)if(r=l.exec(v)){n=r[0],n=n.substr(0,1).toUpperCase()+n.substr(1);break}n||(n="WebkitOpacity"in f&&"webkit"),p=!!("transition"in f||n+"Transition"in f),d=!!("animation"in f||n+"Animation"in f),!u||p&&d||(p=x(f.webkitTransition),d=x(f.webkitAnimation))}return{
// Android has history.pushState, but it does not update location correctly
// so let's not use the history API at all.
// http://code.google.com/p/android/issues/detail?id=17471
// https://github.com/angular/angular.js/issues/904
// older webkit browser (533.9) on Boxee box has exactly the same problem as Android has
// so let's not use the history API also
// We are purposefully using `!(android < 4)` to cover the case when `android` is undefined
// jshint -W018
history:!(!a||u<4||s),
// jshint +W018
hasEvent:function(t){
// IE9 implements 'input' event it's so fubared that we rather pretend that it doesn't have
// it. In particular the event is not fired when backspace or delete key are pressed or
// when cut operation is performed.
// IE10+ implements 'input' event but it erroneously fires under various situations,
// e.g. when placeholder changes, or a form is focused.
if("input"===t&&Dr<=11)return!1;if(y(i[t])){var e=c.createElement("div");i[t]="on"+t in e}return i[t]},csp:Kr(),vendorPrefix:n,transitions:p,animations:d,android:u}}]}/**
	 * @ngdoc provider
	 * @name $templateRequestProvider
	 * @description
	 * Used to configure the options passed to the {@link $http} service when making a template request.
	 *
	 * For example, it can be used for specifying the "Accept" header that is sent to the server, when
	 * requesting a template.
	 */
function On(){var t;/**
	   * @ngdoc method
	   * @name $templateRequestProvider#httpOptions
	   * @description
	   * The options to be passed to the {@link $http} service when making the request.
	   * You can use this to override options such as the "Accept" header for template requests.
	   *
	   * The {@link $templateRequest} will set the `cache` and the `transformResponse` properties of the
	   * options if not overridden here.
	   *
	   * @param {string=} value new value for the {@link $http} options.
	   * @returns {string|self} Returns the {@link $http} options when used as getter and self if used as setter.
	   */
this.httpOptions=function(e){return e?(t=e,this):t},/**
	   * @ngdoc service
	   * @name $templateRequest
	   *
	   * @description
	   * The `$templateRequest` service runs security checks then downloads the provided template using
	   * `$http` and, upon success, stores the contents inside of `$templateCache`. If the HTTP request
	   * fails or the response data of the HTTP request is empty, a `$compile` error will be thrown (the
	   * exception can be thwarted by setting the 2nd parameter of the function to true). Note that the
	   * contents of `$templateCache` are trusted, so the call to `$sce.getTrustedUrl(tpl)` is omitted
	   * when `tpl` is of type string and `$templateCache` has the matching entry.
	   *
	   * If you want to pass custom options to the `$http` service, such as setting the Accept header you
	   * can configure this via {@link $templateRequestProvider#httpOptions}.
	   *
	   * @param {string|TrustedResourceUrl} tpl The HTTP request template URL
	   * @param {boolean=} ignoreRequestError Whether or not to ignore the exception when the request fails or the template is empty
	   *
	   * @return {Promise} a promise for the HTTP response data of the given URL.
	   *
	   * @property {number} totalPendingRequests total amount of pending template requests being downloaded.
	   */
this.$get=["$templateCache","$http","$q","$sce",function(e,n,r,i){function o(a,u){function s(t){if(!u)throw wo("tpload","Failed to load template: {0} (HTTP status: {1} {2})",a,t.status,t.statusText);return r.reject(t)}o.totalPendingRequests++,
// We consider the template cache holds only trusted templates, so
// there's no need to go through whitelisting again for keys that already
// are included in there. This also makes Angular accept any script
// directive, no matter its name. However, we still need to unwrap trusted
// types.
x(a)&&e.get(a)||(a=i.getTrustedResourceUrl(a));var c=n.defaults&&n.defaults.transformResponse;return Gr(c)?c=c.filter(function(t){return t!==Ae}):c===Ae&&(c=null),n.get(a,l({cache:e,transformResponse:c},t))["finally"](function(){o.totalPendingRequests--}).then(function(t){return e.put(a,t.data),t.data},s)}return o.totalPendingRequests=0,o}]}function Rn(){this.$get=["$rootScope","$browser","$location",function(t,e,n){/**
	     * @name $testability
	     *
	     * @description
	     * The private $$testability service provides a collection of methods for use when debugging
	     * or by automated test and debugging tools.
	     */
var r={};/**
	     * @name $$testability#findBindings
	     *
	     * @description
	     * Returns an array of elements that are bound (via ng-bind or {{}})
	     * to expressions matching the input.
	     *
	     * @param {Element} element The element root to search from.
	     * @param {string} expression The binding expression to match.
	     * @param {boolean} opt_exactMatch If true, only returns exact matches
	     *     for the expression. Filters and whitespace are ignored.
	     */
/**
	     * @name $$testability#findModels
	     *
	     * @description
	     * Returns an array of elements that are two-way found via ng-model to
	     * expressions matching the input.
	     *
	     * @param {Element} element The element root to search from.
	     * @param {string} expression The model expression to match.
	     * @param {boolean} opt_exactMatch If true, only returns exact matches
	     *     for the expression.
	     */
/**
	     * @name $$testability#getLocation
	     *
	     * @description
	     * Shortcut for getting the location in a browser agnostic way. Returns
	     *     the path, search, and hash. (e.g. /path?a=b#hash)
	     */
/**
	     * @name $$testability#setLocation
	     *
	     * @description
	     * Shortcut for navigating to a location without doing a full page reload.
	     *
	     * @param {string} url The location url (path, search and hash,
	     *     e.g. /path?a=b#hash) to go to.
	     */
/**
	     * @name $$testability#whenStable
	     *
	     * @description
	     * Calls the callback when $timeout and $http requests are completed.
	     *
	     * @param {function} callback
	     */
return r.findBindings=function(t,e,n){var r=t.getElementsByClassName("ng-binding"),o=[];return i(r,function(t){var r=Wr.element(t).data("$binding");r&&i(r,function(r){if(n){var i=new RegExp("(^|\\s)"+Yr(e)+"(\\s|\\||$)");i.test(r)&&o.push(t)}else r.indexOf(e)!=-1&&o.push(t)})}),o},r.findModels=function(t,e,n){for(var r=["ng-","data-ng-","ng\\:"],i=0;i<r.length;++i){var o=n?"=":"*=",a="["+r[i]+"model"+o+'"'+e+'"]',u=t.querySelectorAll(a);if(u.length)return u}},r.getLocation=function(){return n.url()},r.setLocation=function(e){e!==n.url()&&(n.url(e),t.$digest())},r.whenStable=function(t){e.notifyWhenNoOutstandingRequests(t)},r}]}function jn(){this.$get=["$rootScope","$browser","$q","$$q","$exceptionHandler",function(t,e,n,r,i){/**
	      * @ngdoc service
	      * @name $timeout
	      *
	      * @description
	      * Angular's wrapper for `window.setTimeout`. The `fn` function is wrapped into a try/catch
	      * block and delegates any exceptions to
	      * {@link ng.$exceptionHandler $exceptionHandler} service.
	      *
	      * The return value of calling `$timeout` is a promise, which will be resolved when
	      * the delay has passed and the timeout function, if provided, is executed.
	      *
	      * To cancel a timeout request, call `$timeout.cancel(promise)`.
	      *
	      * In tests you can use {@link ngMock.$timeout `$timeout.flush()`} to
	      * synchronously flush the queue of deferred functions.
	      *
	      * If you only want a promise that will be resolved after some specified delay
	      * then you can call `$timeout` without the `fn` function.
	      *
	      * @param {function()=} fn A function, whose execution should be delayed.
	      * @param {number=} [delay=0] Delay in milliseconds.
	      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
	      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
	      * @param {...*=} Pass additional parameters to the executed function.
	      * @returns {Promise} Promise that will be resolved when the timeout is reached. The promise
	      *   will be resolved with the return value of the `fn` function.
	      *
	      */
function o(o,u,s){S(o)||(s=u,u=o,o=d);var c,l=B(arguments,3),f=$(s)&&!s,h=(f?r:n).defer(),p=h.promise;return c=e.defer(function(){try{h.resolve(o.apply(null,l))}catch(e){h.reject(e),i(e)}finally{delete a[p.$$timeoutId]}f||t.$apply()},u),p.$$timeoutId=c,a[c]=h,p}var a={};/**
	      * @ngdoc method
	      * @name $timeout#cancel
	      *
	      * @description
	      * Cancels a task associated with the `promise`. As a result of this, the promise will be
	      * resolved with a rejection.
	      *
	      * @param {Promise=} promise Promise returned by the `$timeout` function.
	      * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully
	      *   canceled.
	      */
return o.cancel=function(t){return!!(t&&t.$$timeoutId in a)&&(a[t.$$timeoutId].reject("canceled"),delete a[t.$$timeoutId],e.defer.cancel(t.$$timeoutId))},o}]}/**
	 *
	 * Implementation Notes for non-IE browsers
	 * ----------------------------------------
	 * Assigning a URL to the href property of an anchor DOM node, even one attached to the DOM,
	 * results both in the normalizing and parsing of the URL.  Normalizing means that a relative
	 * URL will be resolved into an absolute URL in the context of the application document.
	 * Parsing means that the anchor node's host, hostname, protocol, port, pathname and related
	 * properties are all populated to reflect the normalized URL.  This approach has wide
	 * compatibility - Safari 1+, Mozilla 1+, Opera 7+,e etc.  See
	 * http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
	 *
	 * Implementation Notes for IE
	 * ---------------------------
	 * IE <= 10 normalizes the URL when assigned to the anchor node similar to the other
	 * browsers.  However, the parsed components will not be set if the URL assigned did not specify
	 * them.  (e.g. if you assign a.href = "foo", then a.protocol, a.host, etc. will be empty.)  We
	 * work around that by performing the parsing in a 2nd step by taking a previously normalized
	 * URL (e.g. by assigning to a.href) and assigning it a.href again.  This correctly populates the
	 * properties such as protocol, hostname, port, etc.
	 *
	 * References:
	 *   http://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement
	 *   http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
	 *   http://url.spec.whatwg.org/#urlutils
	 *   https://github.com/angular/angular.js/pull/2902
	 *   http://james.padolsey.com/javascript/parsing-urls-with-the-dom/
	 *
	 * @kind function
	 * @param {string} url The URL to be parsed.
	 * @description Normalizes and parses a URL.
	 * @returns {object} Returns the normalized URL as a dictionary.
	 *
	 *   | member name   | Description    |
	 *   |---------------|----------------|
	 *   | href          | A normalized version of the provided URL if it was not an absolute URL |
	 *   | protocol      | The protocol including the trailing colon                              |
	 *   | host          | The host and port (if the port is non-default) of the normalizedUrl    |
	 *   | search        | The search params, minus the question mark                             |
	 *   | hash          | The hash string, minus the hash symbol
	 *   | hostname      | The hostname
	 *   | port          | The port, without ":"
	 *   | pathname      | The pathname, beginning with "/"
	 *
	 */
function Nn(t){var e=t;
// urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
// Normalize before parse.  Refer Implementation Notes on why this is
// done in two steps on IE.
return Dr&&(xo.setAttribute("href",e),e=xo.href),xo.setAttribute("href",e),{href:xo.href,protocol:xo.protocol?xo.protocol.replace(/:$/,""):"",host:xo.host,search:xo.search?xo.search.replace(/^\?/,""):"",hash:xo.hash?xo.hash.replace(/^#/,""):"",hostname:xo.hostname,port:xo.port,pathname:"/"===xo.pathname.charAt(0)?xo.pathname:"/"+xo.pathname}}/**
	 * Parse a request URL and determine whether this is a same-origin request as the application document.
	 *
	 * @param {string|object} requestUrl The url of the request as a string that will be resolved
	 * or a parsed URL object.
	 * @returns {boolean} Whether the request is for the same origin as the application document.
	 */
function Pn(t){var e=x(t)?Nn(t):t;return e.protocol===_o.protocol&&e.host===_o.host}/**
	 * @ngdoc service
	 * @name $window
	 *
	 * @description
	 * A reference to the browser's `window` object. While `window`
	 * is globally available in JavaScript, it causes testability problems, because
	 * it is a global variable. In angular we always refer to it through the
	 * `$window` service, so it may be overridden, removed or mocked for testing.
	 *
	 * Expressions, like the one defined for the `ngClick` directive in the example
	 * below, are evaluated with respect to the current scope.  Therefore, there is
	 * no risk of inadvertently coding in a dependency on a global value in such an
	 * expression.
	 *
	 * @example
	   <example module="windowExample">
	     <file name="index.html">
	       <script>
	         angular.module('windowExample', [])
	           .controller('ExampleController', ['$scope', '$window', function($scope, $window) {
	             $scope.greeting = 'Hello, World!';
	             $scope.doGreeting = function(greeting) {
	               $window.alert(greeting);
	             };
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <input type="text" ng-model="greeting" aria-label="greeting" />
	         <button ng-click="doGreeting(greeting)">ALERT</button>
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	      it('should display the greeting in the input box', function() {
	       element(by.model('greeting')).sendKeys('Hello, E2E Tests');
	       // If we click the button it will block the test runner
	       // element(':button').click();
	      });
	     </file>
	   </example>
	 */
function Dn(){this.$get=g(e)}/**
	 * @name $$cookieReader
	 * @requires $document
	 *
	 * @description
	 * This is a private service for reading cookies used by $http and ngCookies
	 *
	 * @return {Object} a key/value map of the current cookies
	 */
function Mn(t){function e(t){try{return decodeURIComponent(t)}catch(e){return t}}var n=t[0]||{},r={},i="";return function(){var t,o,a,u,s,c=n.cookie||"";if(c!==i)for(i=c,t=i.split("; "),r={},a=0;a<t.length;a++)o=t[a],u=o.indexOf("="),u>0&&(//ignore nameless cookies
s=e(o.substring(0,u)),
// the first value that is seen for a cookie is the most
// specific one.  values for the same cookie name that
// follow are for less specific paths.
y(r[s])&&(r[s]=e(o.substring(u+1))));return r}}function In(){this.$get=Mn}function Ln(t){/**
	   * @ngdoc method
	   * @name $filterProvider#register
	   * @param {string|Object} name Name of the filter function, or an object map of filters where
	   *    the keys are the filter names and the values are the filter factories.
	   *
	   *    <div class="alert alert-warning">
	   *    **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.
	   *    Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace
	   *    your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores
	   *    (`myapp_subsection_filterx`).
	   *    </div>
	    * @param {Function} factory If the first argument was a string, a factory function for the filter to be registered.
	   * @returns {Object} Registered filter instance, or if a map of filters was provided then a map
	   *    of the registered filter instances.
	   */
function e(r,o){if(b(r)){var a={};return i(r,function(t,n){a[n]=e(n,t)}),a}return t.factory(r+n,o)}var n="Filter";this.register=e,this.$get=["$injector",function(t){return function(e){return t.get(e+n)}}],
////////////////////////////////////////
/* global
	    currencyFilter: false,
	    dateFilter: false,
	    filterFilter: false,
	    jsonFilter: false,
	    limitToFilter: false,
	    lowercaseFilter: false,
	    numberFilter: false,
	    orderByFilter: false,
	    uppercaseFilter: false,
	  */
e("currency",Hn),e("date",ir),e("filter",qn),e("json",or),e("limitTo",ar),e("lowercase",Oo),e("number",Bn),e("orderBy",ur),e("uppercase",Ro)}/**
	 * @ngdoc filter
	 * @name filter
	 * @kind function
	 *
	 * @description
	 * Selects a subset of items from `array` and returns it as a new array.
	 *
	 * @param {Array} array The source array.
	 * @param {string|Object|function()} expression The predicate to be used for selecting items from
	 *   `array`.
	 *
	 *   Can be one of:
	 *
	 *   - `string`: The string is used for matching against the contents of the `array`. All strings or
	 *     objects with string properties in `array` that match this string will be returned. This also
	 *     applies to nested object properties.
	 *     The predicate can be negated by prefixing the string with `!`.
	 *
	 *   - `Object`: A pattern object can be used to filter specific properties on objects contained
	 *     by `array`. For example `{name:"M", phone:"1"}` predicate will return an array of items
	 *     which have property `name` containing "M" and property `phone` containing "1". A special
	 *     property name `$` can be used (as in `{$:"text"}`) to accept a match against any
	 *     property of the object or its nested object properties. That's equivalent to the simple
	 *     substring match with a `string` as described above. The predicate can be negated by prefixing
	 *     the string with `!`.
	 *     For example `{name: "!M"}` predicate will return an array of items which have property `name`
	 *     not containing "M".
	 *
	 *     Note that a named property will match properties on the same level only, while the special
	 *     `$` property will match properties on the same level or deeper. E.g. an array item like
	 *     `{name: {first: 'John', last: 'Doe'}}` will **not** be matched by `{name: 'John'}`, but
	 *     **will** be matched by `{$: 'John'}`.
	 *
	 *   - `function(value, index, array)`: A predicate function can be used to write arbitrary filters.
	 *     The function is called for each element of the array, with the element, its index, and
	 *     the entire array itself as arguments.
	 *
	 *     The final result is an array of those elements that the predicate returned true for.
	 *
	 * @param {function(actual, expected)|true|undefined} comparator Comparator which is used in
	 *     determining if the expected value (from the filter expression) and actual value (from
	 *     the object in the array) should be considered a match.
	 *
	 *   Can be one of:
	 *
	 *   - `function(actual, expected)`:
	 *     The function will be given the object value and the predicate value to compare and
	 *     should return true if both values should be considered equal.
	 *
	 *   - `true`: A shorthand for `function(actual, expected) { return angular.equals(actual, expected)}`.
	 *     This is essentially strict comparison of expected and actual.
	 *
	 *   - `false|undefined`: A short hand for a function which will look for a substring match in case
	 *     insensitive way.
	 *
	 *     Primitive values are converted to strings. Objects are not compared against primitives,
	 *     unless they have a custom `toString` method (e.g. `Date` objects).
	 *
	 * @example
	   <example>
	     <file name="index.html">
	       <div ng-init="friends = [{name:'John', phone:'555-1276'},
	                                {name:'Mary', phone:'800-BIG-MARY'},
	                                {name:'Mike', phone:'555-4321'},
	                                {name:'Adam', phone:'555-5678'},
	                                {name:'Julie', phone:'555-8765'},
	                                {name:'Juliette', phone:'555-5678'}]"></div>
	
	       <label>Search: <input ng-model="searchText"></label>
	       <table id="searchTextResults">
	         <tr><th>Name</th><th>Phone</th></tr>
	         <tr ng-repeat="friend in friends | filter:searchText">
	           <td>{{friend.name}}</td>
	           <td>{{friend.phone}}</td>
	         </tr>
	       </table>
	       <hr>
	       <label>Any: <input ng-model="search.$"></label> <br>
	       <label>Name only <input ng-model="search.name"></label><br>
	       <label>Phone only <input ng-model="search.phone"></label><br>
	       <label>Equality <input type="checkbox" ng-model="strict"></label><br>
	       <table id="searchObjResults">
	         <tr><th>Name</th><th>Phone</th></tr>
	         <tr ng-repeat="friendObj in friends | filter:search:strict">
	           <td>{{friendObj.name}}</td>
	           <td>{{friendObj.phone}}</td>
	         </tr>
	       </table>
	     </file>
	     <file name="protractor.js" type="protractor">
	       var expectFriendNames = function(expectedNames, key) {
	         element.all(by.repeater(key + ' in friends').column(key + '.name')).then(function(arr) {
	           arr.forEach(function(wd, i) {
	             expect(wd.getText()).toMatch(expectedNames[i]);
	           });
	         });
	       };
	
	       it('should search across all fields when filtering with a string', function() {
	         var searchText = element(by.model('searchText'));
	         searchText.clear();
	         searchText.sendKeys('m');
	         expectFriendNames(['Mary', 'Mike', 'Adam'], 'friend');
	
	         searchText.clear();
	         searchText.sendKeys('76');
	         expectFriendNames(['John', 'Julie'], 'friend');
	       });
	
	       it('should search in specific fields when filtering with a predicate object', function() {
	         var searchAny = element(by.model('search.$'));
	         searchAny.clear();
	         searchAny.sendKeys('i');
	         expectFriendNames(['Mary', 'Mike', 'Julie', 'Juliette'], 'friendObj');
	       });
	       it('should use a equal comparison when comparator is true', function() {
	         var searchName = element(by.model('search.name'));
	         var strict = element(by.model('strict'));
	         searchName.clear();
	         searchName.sendKeys('Julie');
	         strict.click();
	         expectFriendNames(['Julie'], 'friendObj');
	       });
	     </file>
	   </example>
	 */
function qn(){return function(t,e,i){if(!r(t)){if(null==t)return t;throw n("filter")("notarray","Expected array but received: {0}",t)}var o,a,u=Vn(e);switch(u){case"function":o=e;break;case"boolean":case"null":case"number":case"string":a=!0;
//jshint -W086
case"object":
//jshint +W086
o=Un(e,i,a);break;default:return t}return Array.prototype.filter.call(t,o)}}
// Helper functions for `filterFilter`
function Un(t,e,n){var r,i=b(t)&&"$"in t;return e===!0?e=V:S(e)||(e=function(t,e){return!y(t)&&(null===t||null===e?t===e:!(b(e)||b(t)&&!m(t))&&(t=Rr(""+t),e=Rr(""+e),t.indexOf(e)!==-1))}),r=function(r){return i&&!b(r)?Fn(r,t.$,e,!1):Fn(r,t,e,n)}}function Fn(t,e,n,r,i){var o=Vn(t),a=Vn(e);if("string"===a&&"!"===e.charAt(0))return!Fn(t,e.substring(1),n,r);if(Gr(t))
// In case `actual` is an array, consider it a match
// if ANY of it's items matches `expected`
return t.some(function(t){return Fn(t,e,n,r)});switch(o){case"object":var u;if(r){for(u in t)if("$"!==u.charAt(0)&&Fn(t[u],e,n,!0))return!0;return!i&&Fn(t,e,n,!1)}if("object"===a){for(u in e){var s=e[u];if(!S(s)&&!y(s)){var c="$"===u,l=c?t:t[u];if(!Fn(l,s,n,c,c))return!1}}return!0}return n(t,e);case"function":return!1;default:return n(t,e)}}
// Used for easily differentiating between `null` and actual `object`
function Vn(t){return null===t?"null":typeof t}function Hn(t){var e=t.NUMBER_FORMATS;return function(t,n,r){
// if null or undefined pass it through
return y(n)&&(n=e.CURRENCY_SYM),y(r)&&(r=e.PATTERNS[1].maxFrac),null==t?t:Gn(t,e.PATTERNS[1],e.GROUP_SEP,e.DECIMAL_SEP,r).replace(/\u00A4/g,n)}}function Bn(t){var e=t.NUMBER_FORMATS;return function(t,n){
// if null or undefined pass it through
return null==t?t:Gn(t,e.PATTERNS[0],e.GROUP_SEP,e.DECIMAL_SEP,n)}}/**
	 * Parse a number (as a string) into three components that can be used
	 * for formatting the number.
	 *
	 * (Significant bits of this parse algorithm came from https://github.com/MikeMcl/big.js/)
	 *
	 * @param  {string} numStr The number to parse
	 * @return {object} An object describing this number, containing the following keys:
	 *  - d : an array of digits containing leading zeros as necessary
	 *  - i : the number of the digits in `d` that are to the left of the decimal point
	 *  - e : the exponent for numbers that would need more than `MAX_DIGITS` digits in `d`
	 *
	 */
function Wn(t){var e,n,r,i,o,a=0;
// Count the number of leading zeros.
for(
// Decimal point?
(n=t.indexOf(So))>-1&&(t=t.replace(So,"")),
// Exponential form?
(r=t.search(/e/i))>0?(
// Work out the exponent.
n<0&&(n=r),n+=+t.slice(r+1),t=t.substring(0,r)):n<0&&(
// There was no decimal point or exponent so it is an integer.
n=t.length),r=0;t.charAt(r)==Ao;r++);if(r==(o=t.length))
// The digits are all zero.
e=[0],n=1;else{for(
// Count the number of trailing zeros
o--;t.charAt(o)==Ao;)o--;
// Convert string to array of digits without leading/trailing zeros.
for(
// Trailing zeros are insignificant so ignore them
n-=r,e=[],i=0;r<=o;r++,i++)e[i]=+t.charAt(r)}
// If the number overflows the maximum allowed digits then use an exponent.
return n>Co&&(e=e.splice(0,Co-1),a=n-1,n=1),{d:e,e:a,i:n}}/**
	 * Round the parsed number to the specified number of decimal places
	 * This function changed the parsedNumber in-place
	 */
function zn(t,e,n,r){var i=t.d,o=i.length-t.i;
// determine fractionSize if it is not specified; `+fractionSize` converts it to a number
e=y(e)?Math.min(Math.max(n,o),r):+e;
// The index of the digit to where rounding is to occur
var a=e+t.i,u=i[a];if(a>0){
// Drop fractional digits beyond `roundAt`
i.splice(Math.max(t.i,a));
// Set non-fractional digits beyond `roundAt` to 0
for(var s=a;s<i.length;s++)i[s]=0}else{
// We rounded to zero so reset the parsedNumber
o=Math.max(0,o),t.i=1,i.length=Math.max(1,a=e+1),i[0]=0;for(var c=1;c<a;c++)i[c]=0}if(u>=5)if(a-1<0){for(var l=0;l>a;l--)i.unshift(0),t.i++;i.unshift(1),t.i++}else i[a-1]++;
// Pad out with zeros to get the required fraction length
for(;o<Math.max(0,e);o++)i.push(0);
// Do any carrying, e.g. a digit was rounded up to 10
var f=i.reduceRight(function(t,e,n,r){return e+=t,r[n]=e%10,Math.floor(e/10)},0);f&&(i.unshift(f),t.i++)}/**
	 * Format a number into a string
	 * @param  {number} number       The number to format
	 * @param  {{
	 *           minFrac, // the minimum number of digits required in the fraction part of the number
	 *           maxFrac, // the maximum number of digits required in the fraction part of the number
	 *           gSize,   // number of digits in each group of separated digits
	 *           lgSize,  // number of digits in the last group of digits before the decimal separator
	 *           negPre,  // the string to go in front of a negative number (e.g. `-` or `(`))
	 *           posPre,  // the string to go in front of a positive number
	 *           negSuf,  // the string to go after a negative number (e.g. `)`)
	 *           posSuf   // the string to go after a positive number
	 *         }} pattern
	 * @param  {string} groupSep     The string to separate groups of number (e.g. `,`)
	 * @param  {string} decimalSep   The string to act as the decimal separator (e.g. `.`)
	 * @param  {[type]} fractionSize The size of the fractional part of the number
	 * @return {string}              The number formatted as a string
	 */
function Gn(t,e,n,r,i){if(!x(t)&&!_(t)||isNaN(t))return"";var o,a=!isFinite(t),u=!1,s=Math.abs(t)+"",c="";if(a)c="∞";else{o=Wn(s),zn(o,i,e.minFrac,e.maxFrac);var l=o.d,f=o.i,h=o.e,p=[];
// pad zeros for small numbers
for(u=l.reduce(function(t,e){return t&&!e},!0);f<0;)l.unshift(0),f++;
// extract decimals digits
f>0?p=l.splice(f):(p=l,l=[0]);
// format the integer digits with grouping separators
var d=[];for(l.length>=e.lgSize&&d.unshift(l.splice(-e.lgSize).join(""));l.length>e.gSize;)d.unshift(l.splice(-e.gSize).join(""));l.length&&d.unshift(l.join("")),c=d.join(n),
// append the decimal digits
p.length&&(c+=r+p.join("")),h&&(c+="e+"+h)}return t<0&&!u?e.negPre+c+e.negSuf:e.posPre+c+e.posSuf}function Xn(t,e,n,r){var i="";for((t<0||r&&t<=0)&&(r?t=-t+1:(t=-t,i="-")),t=""+t;t.length<e;)t=Ao+t;return n&&(t=t.substr(t.length-e)),i+t}function Jn(t,e,n,r,i){return n=n||0,function(o){var a=o["get"+t]();return(n>0||a>-n)&&(a+=n),0===a&&n==-12&&(a=12),Xn(a,e,r,i)}}function Yn(t,e,n){return function(r,i){var o=r["get"+t](),a=(n?"STANDALONE":"")+(e?"SHORT":""),u=jr(a+t);return i[u][o]}}function Kn(t,e,n){var r=-1*n,i=r>=0?"+":"";return i+=Xn(Math[r>0?"floor":"ceil"](r/60),2)+Xn(Math.abs(r%60),2)}function Zn(t){
// 0 = index of January
var e=new Date(t,0,1).getDay();
// 4 = index of Thursday (+1 to account for 1st = 5)
// 11 = index of *next* Thursday (+1 account for 1st = 12)
return new Date(t,0,(e<=4?5:12)-e)}function Qn(t){
// 4 = index of Thursday
return new Date(t.getFullYear(),t.getMonth(),t.getDate()+(4-t.getDay()))}function tr(t){return function(e){var n=Zn(e.getFullYear()),r=Qn(e),i=+r-+n,o=1+Math.round(i/6048e5);// 6.048e8 ms per week
return Xn(o,t)}}function er(t,e){return t.getHours()<12?e.AMPMS[0]:e.AMPMS[1]}function nr(t,e){return t.getFullYear()<=0?e.ERAS[0]:e.ERAS[1]}function rr(t,e){return t.getFullYear()<=0?e.ERANAMES[0]:e.ERANAMES[1]}function ir(t){
// 1        2       3         4          5          6          7          8  9     10      11
function e(t){var e;if(e=t.match(n)){var r=new Date(0),i=0,o=0,a=e[8]?r.setUTCFullYear:r.setFullYear,u=e[8]?r.setUTCHours:r.setHours;e[9]&&(i=h(e[9]+e[10]),o=h(e[9]+e[11])),a.call(r,h(e[1]),h(e[2])-1,h(e[3]));var s=h(e[4]||0)-i,c=h(e[5]||0)-o,l=h(e[6]||0),f=Math.round(1e3*parseFloat("0."+(e[7]||0)));return u.call(r,s,c,l,f),r}return t}var n=/^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;return function(n,r,o){var a,u,s="",c=[];if(r=r||"mediumDate",r=t.DATETIME_FORMATS[r]||r,x(n)&&(n=To.test(n)?h(n):e(n)),_(n)&&(n=new Date(n)),!C(n)||!isFinite(n.getTime()))return n;for(;r;)u=ko.exec(r),u?(c=H(c,u,1),r=c.pop()):(c.push(r),r=null);var l=n.getTimezoneOffset();return o&&(l=J(o,l),n=K(n,o,!0)),i(c,function(e){a=Eo[e],s+=a?a(n,t.DATETIME_FORMATS,l):"''"===e?"'":e.replace(/(^'|'$)/g,"").replace(/''/g,"'")}),s}}/**
	 * @ngdoc filter
	 * @name json
	 * @kind function
	 *
	 * @description
	 *   Allows you to convert a JavaScript object into JSON string.
	 *
	 *   This filter is mostly useful for debugging. When using the double curly {{value}} notation
	 *   the binding is automatically converted to JSON.
	 *
	 * @param {*} object Any JavaScript object (including arrays and primitive types) to filter.
	 * @param {number=} spacing The number of spaces to use per indentation, defaults to 2.
	 * @returns {string} JSON string.
	 *
	 *
	 * @example
	   <example>
	     <file name="index.html">
	       <pre id="default-spacing">{{ {'name':'value'} | json }}</pre>
	       <pre id="custom-spacing">{{ {'name':'value'} | json:4 }}</pre>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should jsonify filtered objects', function() {
	         expect(element(by.id('default-spacing')).getText()).toMatch(/\{\n  "name": ?"value"\n}/);
	         expect(element(by.id('custom-spacing')).getText()).toMatch(/\{\n    "name": ?"value"\n}/);
	       });
	     </file>
	   </example>
	 *
	 */
function or(){return function(t,e){return y(e)&&(e=2),G(t,e)}}/**
	 * @ngdoc filter
	 * @name limitTo
	 * @kind function
	 *
	 * @description
	 * Creates a new array or string containing only a specified number of elements. The elements
	 * are taken from either the beginning or the end of the source array, string or number, as specified by
	 * the value and sign (positive or negative) of `limit`. If a number is used as input, it is
	 * converted to a string.
	 *
	 * @param {Array|string|number} input Source array, string or number to be limited.
	 * @param {string|number} limit The length of the returned array or string. If the `limit` number
	 *     is positive, `limit` number of items from the beginning of the source array/string are copied.
	 *     If the number is negative, `limit` number  of items from the end of the source array/string
	 *     are copied. The `limit` will be trimmed if it exceeds `array.length`. If `limit` is undefined,
	 *     the input will be returned unchanged.
	 * @param {(string|number)=} begin Index at which to begin limitation. As a negative index, `begin`
	 *     indicates an offset from the end of `input`. Defaults to `0`.
	 * @returns {Array|string} A new sub-array or substring of length `limit` or less if input array
	 *     had less than `limit` elements.
	 *
	 * @example
	   <example module="limitToExample">
	     <file name="index.html">
	       <script>
	         angular.module('limitToExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.numbers = [1,2,3,4,5,6,7,8,9];
	             $scope.letters = "abcdefghi";
	             $scope.longNumber = 2345432342;
	             $scope.numLimit = 3;
	             $scope.letterLimit = 3;
	             $scope.longNumberLimit = 3;
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <label>
	            Limit {{numbers}} to:
	            <input type="number" step="1" ng-model="numLimit">
	         </label>
	         <p>Output numbers: {{ numbers | limitTo:numLimit }}</p>
	         <label>
	            Limit {{letters}} to:
	            <input type="number" step="1" ng-model="letterLimit">
	         </label>
	         <p>Output letters: {{ letters | limitTo:letterLimit }}</p>
	         <label>
	            Limit {{longNumber}} to:
	            <input type="number" step="1" ng-model="longNumberLimit">
	         </label>
	         <p>Output long number: {{ longNumber | limitTo:longNumberLimit }}</p>
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       var numLimitInput = element(by.model('numLimit'));
	       var letterLimitInput = element(by.model('letterLimit'));
	       var longNumberLimitInput = element(by.model('longNumberLimit'));
	       var limitedNumbers = element(by.binding('numbers | limitTo:numLimit'));
	       var limitedLetters = element(by.binding('letters | limitTo:letterLimit'));
	       var limitedLongNumber = element(by.binding('longNumber | limitTo:longNumberLimit'));
	
	       it('should limit the number array to first three items', function() {
	         expect(numLimitInput.getAttribute('value')).toBe('3');
	         expect(letterLimitInput.getAttribute('value')).toBe('3');
	         expect(longNumberLimitInput.getAttribute('value')).toBe('3');
	         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3]');
	         expect(limitedLetters.getText()).toEqual('Output letters: abc');
	         expect(limitedLongNumber.getText()).toEqual('Output long number: 234');
	       });
	
	       // There is a bug in safari and protractor that doesn't like the minus key
	       // it('should update the output when -3 is entered', function() {
	       //   numLimitInput.clear();
	       //   numLimitInput.sendKeys('-3');
	       //   letterLimitInput.clear();
	       //   letterLimitInput.sendKeys('-3');
	       //   longNumberLimitInput.clear();
	       //   longNumberLimitInput.sendKeys('-3');
	       //   expect(limitedNumbers.getText()).toEqual('Output numbers: [7,8,9]');
	       //   expect(limitedLetters.getText()).toEqual('Output letters: ghi');
	       //   expect(limitedLongNumber.getText()).toEqual('Output long number: 342');
	       // });
	
	       it('should not exceed the maximum size of input array', function() {
	         numLimitInput.clear();
	         numLimitInput.sendKeys('100');
	         letterLimitInput.clear();
	         letterLimitInput.sendKeys('100');
	         longNumberLimitInput.clear();
	         longNumberLimitInput.sendKeys('100');
	         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3,4,5,6,7,8,9]');
	         expect(limitedLetters.getText()).toEqual('Output letters: abcdefghi');
	         expect(limitedLongNumber.getText()).toEqual('Output long number: 2345432342');
	       });
	     </file>
	   </example>
	*/
function ar(){return function(t,e,n){return e=Math.abs(Number(e))===1/0?Number(e):h(e),isNaN(e)?t:(_(t)&&(t=t.toString()),Gr(t)||x(t)?(n=!n||isNaN(n)?0:h(n),n=n<0?Math.max(0,t.length+n):n,e>=0?t.slice(n,n+e):0===n?t.slice(e,t.length):t.slice(Math.max(0,n+e),n)):t)}}function ur(t){function e(e,n){return n=n?-1:1,e.map(function(e){var r=1,i=v;if(S(e))i=e;else if(x(e)&&("+"!=e.charAt(0)&&"-"!=e.charAt(0)||(r="-"==e.charAt(0)?-1:1,e=e.substring(1)),""!==e&&(i=t(e),i.constant))){var o=i();i=function(t){return t[o]}}return{get:i,descending:r*n}})}function i(t){switch(typeof t){case"number":/* falls through */
case"boolean":/* falls through */
case"string":return!0;default:return!1}}function o(t,e){
// If `valueOf` is a valid function use that
// If `valueOf` is a valid function use that
// If `toString` is a valid function and not the one from `Object.prototype` use that
return"function"==typeof t.valueOf&&(t=t.valueOf(),i(t))?t:m(t)&&(t=t.toString(),i(t))?t:e}function a(t,e){var n=typeof t;return null===t?(n="string",t="null"):"string"===n?t=t.toLowerCase():"object"===n&&(t=o(t,e)),{value:t,type:n}}function u(t,e){var n=0;return t.type===e.type?t.value!==e.value&&(n=t.value<e.value?-1:1):n=t.type<e.type?-1:1,n}return function(t,i,o){function s(t,e){return{value:t,predicateValues:l.map(function(n){return a(n.get(t),e)})}}function c(t,e){for(var n=0,r=0,i=l.length;r<i&&!(n=u(t.predicateValues[r],e.predicateValues[r])*l[r].descending);++r);return n}if(null==t)return t;if(!r(t))throw n("orderBy")("notarray","Expected array but received: {0}",t);Gr(i)||(i=[i]),0===i.length&&(i=["+"]);var l=e(i,o);
// Add a predicate at the end that evaluates to the element index. This makes the
// sort stable as it works as a tie-breaker when all the input predicates cannot
// distinguish between two elements.
l.push({get:function(){return{}},descending:o?-1:1});
// The next three lines are a version of a Swartzian Transform idiom from Perl
// (sometimes called the Decorate-Sort-Undecorate idiom)
// See https://en.wikipedia.org/wiki/Schwartzian_transform
var f=Array.prototype.map.call(t,s);return f.sort(c),t=f.map(function(t){return t.value})}}function sr(t){return S(t)&&(t={link:t}),t.restrict=t.restrict||"AC",g(t)}function cr(t,e){t.$name=e}function lr(t,e,n,r,o){var a=this,u=[];
// init state
a.$error={},a.$$success={},a.$pending=void 0,a.$name=o(e.name||e.ngForm||"")(n),a.$dirty=!1,a.$pristine=!0,a.$valid=!0,a.$invalid=!1,a.$submitted=!1,a.$$parentForm=Po,/**
	   * @ngdoc method
	   * @name form.FormController#$rollbackViewValue
	   *
	   * @description
	   * Rollback all form controls pending updates to the `$modelValue`.
	   *
	   * Updates may be pending by a debounced event or because the input is waiting for a some future
	   * event defined in `ng-model-options`. This method is typically needed by the reset button of
	   * a form that uses `ng-model-options` to pend updates.
	   */
a.$rollbackViewValue=function(){i(u,function(t){t.$rollbackViewValue()})},/**
	   * @ngdoc method
	   * @name form.FormController#$commitViewValue
	   *
	   * @description
	   * Commit all form controls pending updates to the `$modelValue`.
	   *
	   * Updates may be pending by a debounced event or because the input is waiting for a some future
	   * event defined in `ng-model-options`. This method is rarely needed as `NgModelController`
	   * usually handles calling this in response to input events.
	   */
a.$commitViewValue=function(){i(u,function(t){t.$commitViewValue()})},/**
	   * @ngdoc method
	   * @name form.FormController#$addControl
	   * @param {object} control control object, either a {@link form.FormController} or an
	   * {@link ngModel.NgModelController}
	   *
	   * @description
	   * Register a control with the form. Input elements using ngModelController do this automatically
	   * when they are linked.
	   *
	   * Note that the current state of the control will not be reflected on the new parent form. This
	   * is not an issue with normal use, as freshly compiled and linked controls are in a `$pristine`
	   * state.
	   *
	   * However, if the method is used programmatically, for example by adding dynamically created controls,
	   * or controls that have been previously removed without destroying their corresponding DOM element,
	   * it's the developers responsibility to make sure the current state propagates to the parent form.
	   *
	   * For example, if an input control is added that is already `$dirty` and has `$error` properties,
	   * calling `$setDirty()` and `$validate()` afterwards will propagate the state to the parent form.
	   */
a.$addControl=function(t){
// Breaking change - before, inputs whose name was "hasOwnProperty" were quietly ignored
// and not added to the scope.  Now we throw an error.
pt(t.$name,"input"),u.push(t),t.$name&&(a[t.$name]=t),t.$$parentForm=a},
// Private API: rename a form control
a.$$renameControl=function(t,e){var n=t.$name;a[n]===t&&delete a[n],a[e]=t,t.$name=e},/**
	   * @ngdoc method
	   * @name form.FormController#$removeControl
	   * @param {object} control control object, either a {@link form.FormController} or an
	   * {@link ngModel.NgModelController}
	   *
	   * @description
	   * Deregister a control from the form.
	   *
	   * Input elements using ngModelController do this automatically when they are destroyed.
	   *
	   * Note that only the removed control's validation state (`$errors`etc.) will be removed from the
	   * form. `$dirty`, `$submitted` states will not be changed, because the expected behavior can be
	   * different from case to case. For example, removing the only `$dirty` control from a form may or
	   * may not mean that the form is still `$dirty`.
	   */
a.$removeControl=function(t){t.$name&&a[t.$name]===t&&delete a[t.$name],i(a.$pending,function(e,n){a.$setValidity(n,null,t)}),i(a.$error,function(e,n){a.$setValidity(n,null,t)}),i(a.$$success,function(e,n){a.$setValidity(n,null,t)}),q(u,t),t.$$parentForm=Po},/**
	   * @ngdoc method
	   * @name form.FormController#$setValidity
	   *
	   * @description
	   * Sets the validity of a form control.
	   *
	   * This method will also propagate to parent forms.
	   */
Sr({ctrl:this,$element:t,set:function(t,e,n){var r=t[e];if(r){var i=r.indexOf(n);i===-1&&r.push(n)}else t[e]=[n]},unset:function(t,e,n){var r=t[e];r&&(q(r,n),0===r.length&&delete t[e])},$animate:r}),/**
	   * @ngdoc method
	   * @name form.FormController#$setDirty
	   *
	   * @description
	   * Sets the form to a dirty state.
	   *
	   * This method can be called to add the 'ng-dirty' class and set the form to a dirty
	   * state (ng-dirty class). This method will also propagate to parent forms.
	   */
a.$setDirty=function(){r.removeClass(t,ya),r.addClass(t,$a),a.$dirty=!0,a.$pristine=!1,a.$$parentForm.$setDirty()},/**
	   * @ngdoc method
	   * @name form.FormController#$setPristine
	   *
	   * @description
	   * Sets the form to its pristine state.
	   *
	   * This method can be called to remove the 'ng-dirty' class and set the form to its pristine
	   * state (ng-pristine class). This method will also propagate to all the controls contained
	   * in this form.
	   *
	   * Setting a form back to a pristine state is often useful when we want to 'reuse' a form after
	   * saving or resetting it.
	   */
a.$setPristine=function(){r.setClass(t,ya,$a+" "+Do),a.$dirty=!1,a.$pristine=!0,a.$submitted=!1,i(u,function(t){t.$setPristine()})},/**
	   * @ngdoc method
	   * @name form.FormController#$setUntouched
	   *
	   * @description
	   * Sets the form to its untouched state.
	   *
	   * This method can be called to remove the 'ng-touched' class and set the form controls to their
	   * untouched state (ng-untouched class).
	   *
	   * Setting a form controls back to their untouched state is often useful when setting the form
	   * back to its pristine state.
	   */
a.$setUntouched=function(){i(u,function(t){t.$setUntouched()})},/**
	   * @ngdoc method
	   * @name form.FormController#$setSubmitted
	   *
	   * @description
	   * Sets the form to its submitted state.
	   */
a.$setSubmitted=function(){r.addClass(t,Do),a.$submitted=!0,a.$$parentForm.$setSubmitted()}}function fr(t){t.$formatters.push(function(e){return t.$isEmpty(e)?e:e.toString()})}function hr(t,e,n,r,i,o){pr(t,e,n,r,i,o),fr(r)}function pr(t,e,n,r,i,o){var a=Rr(e[0].type);
// In composition mode, users are still inputing intermediate text buffer,
// hold the listener until composition is done.
// More about composition events: https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent
if(!i.android){var u=!1;e.on("compositionstart",function(){u=!0}),e.on("compositionend",function(){u=!1,c()})}var s,c=function(t){if(s&&(o.defer.cancel(s),s=null),!u){var i=e.val(),c=t&&t.type;
// By default we will trim the value
// If the attribute ng-trim exists we will avoid trimming
// If input type is 'password', the value is never trimmed
"password"===a||n.ngTrim&&"false"===n.ngTrim||(i=Jr(i)),
// If a control is suffering from bad input (due to native validators), browsers discard its
// value, so it may be necessary to revalidate (by calling $setViewValue again) even if the
// control's value is the same empty value twice in a row.
(r.$viewValue!==i||""===i&&r.$$hasNativeValidators)&&r.$setViewValue(i,c)}};
// if the browser does support "input" event, we are fine - except on IE9 which doesn't fire the
// input event on backspace, delete or cut
if(i.hasEvent("input"))e.on("input",c);else{var l=function(t,e,n){s||(s=o.defer(function(){s=null,e&&e.value===n||c(t)}))};e.on("keydown",function(t){var e=t.keyCode;
// ignore
//    command            modifiers                   arrows
91===e||15<e&&e<19||37<=e&&e<=40||l(t,this,this.value)}),
// if user modifies input value using context menu in IE, we need "paste" and "cut" events to catch it
i.hasEvent("paste")&&e.on("paste cut",l)}
// if user paste into input using mouse on older browser
// or form autocomplete on newer browser, we need "change" event to catch it
e.on("change",c),
// Some native input types (date-family) have the ability to change validity without
// firing any input/change events.
// For these event types, when native validators are present and the browser supports the type,
// check for validity changes on various DOM events.
Jo[a]&&r.$$hasNativeValidators&&a===n.type&&e.on(Xo,function(t){if(!s){var e=this[Tr],n=e.badInput,r=e.typeMismatch;s=o.defer(function(){s=null,e.badInput===n&&e.typeMismatch===r||c(t)})}}),r.$render=function(){
// Workaround for Firefox validation #12102.
var t=r.$isEmpty(r.$viewValue)?"":r.$viewValue;e.val()!==t&&e.val(t)}}function dr(t,e){if(C(t))return t;if(x(t)){Wo.lastIndex=0;var n=Wo.exec(t);if(n){var r=+n[1],i=+n[2],o=0,a=0,u=0,s=0,c=Zn(r),l=7*(i-1);return e&&(o=e.getHours(),a=e.getMinutes(),u=e.getSeconds(),s=e.getMilliseconds()),new Date(r,0,c.getDate()+l,o,a,u,s)}}return NaN}function vr(t,e){return function(n,r){var o,a;if(C(n))return n;if(x(n)){if(
// When a date is JSON'ified to wraps itself inside of an extra
// set of double quotes. This makes the date parsing code unable
// to match the date string and parse it as a date.
'"'==n.charAt(0)&&'"'==n.charAt(n.length-1)&&(n=n.substring(1,n.length-1)),qo.test(n))return new Date(n);if(t.lastIndex=0,o=t.exec(n))return o.shift(),a=r?{yyyy:r.getFullYear(),MM:r.getMonth()+1,dd:r.getDate(),HH:r.getHours(),mm:r.getMinutes(),ss:r.getSeconds(),sss:r.getMilliseconds()/1e3}:{yyyy:1970,MM:1,dd:1,HH:0,mm:0,ss:0,sss:0},i(o,function(t,n){n<e.length&&(a[e[n]]=+t)}),new Date(a.yyyy,a.MM-1,a.dd,a.HH,a.mm,a.ss||0,1e3*a.sss||0)}return NaN}}function gr(t,e,n,r){return function(i,o,a,u,s,c,l){function f(t){
// Invalid Date: getTime() returns NaN
return t&&!(t.getTime&&t.getTime()!==t.getTime())}function h(t){return $(t)&&!C(t)?n(t)||void 0:t}mr(i,o,a,u),pr(i,o,a,u,s,c);var p,d=u&&u.$options&&u.$options.timezone;if(u.$$parserName=t,u.$parsers.push(function(t){if(u.$isEmpty(t))return null;if(e.test(t)){
// Note: We cannot read ctrl.$modelValue, as there might be a different
// parser/formatter in the processing chain so that the model
// contains some different data format!
var r=n(t,p);return d&&(r=K(r,d)),r}}),u.$formatters.push(function(t){if(t&&!C(t))throw Sa("datefmt","Expected `{0}` to be a date",t);return f(t)?(p=t,p&&d&&(p=K(p,d,!0)),l("date")(t,r,d)):(p=null,"")}),$(a.min)||a.ngMin){var v;u.$validators.min=function(t){return!f(t)||y(v)||n(t)>=v},a.$observe("min",function(t){v=h(t),u.$validate()})}if($(a.max)||a.ngMax){var g;u.$validators.max=function(t){return!f(t)||y(g)||n(t)<=g},a.$observe("max",function(t){g=h(t),u.$validate()})}}}function mr(t,e,n,r){var i=e[0],o=r.$$hasNativeValidators=b(i.validity);o&&r.$parsers.push(function(t){var n=e.prop(Tr)||{};return n.badInput||n.typeMismatch?void 0:t})}function yr(t,e,n,r,i,o){if(mr(t,e,n,r),pr(t,e,n,r,i,o),r.$$parserName="number",r.$parsers.push(function(t){return r.$isEmpty(t)?null:Vo.test(t)?parseFloat(t):void 0}),r.$formatters.push(function(t){if(!r.$isEmpty(t)){if(!_(t))throw Sa("numfmt","Expected `{0}` to be a number",t);t=t.toString()}return t}),$(n.min)||n.ngMin){var a;r.$validators.min=function(t){return r.$isEmpty(t)||y(a)||t>=a},n.$observe("min",function(t){$(t)&&!_(t)&&(t=parseFloat(t,10)),a=_(t)&&!isNaN(t)?t:void 0,
// TODO(matsko): implement validateLater to reduce number of validations
r.$validate()})}if($(n.max)||n.ngMax){var u;r.$validators.max=function(t){return r.$isEmpty(t)||y(u)||t<=u},n.$observe("max",function(t){$(t)&&!_(t)&&(t=parseFloat(t,10)),u=_(t)&&!isNaN(t)?t:void 0,
// TODO(matsko): implement validateLater to reduce number of validations
r.$validate()})}}function $r(t,e,n,r,i,o){
// Note: no badInputChecker here by purpose as `url` is only a validation
// in browsers, i.e. we can always read out input.value even if it is not valid!
pr(t,e,n,r,i,o),fr(r),r.$$parserName="url",r.$validators.url=function(t,e){var n=t||e;return r.$isEmpty(n)||Uo.test(n)}}function br(t,e,n,r,i,o){
// Note: no badInputChecker here by purpose as `url` is only a validation
// in browsers, i.e. we can always read out input.value even if it is not valid!
pr(t,e,n,r,i,o),fr(r),r.$$parserName="email",r.$validators.email=function(t,e){var n=t||e;return r.$isEmpty(n)||Fo.test(n)}}function wr(t,e,n,r){
// make the name unique, if not defined
y(n.name)&&e.attr("name",u());var i=function(t){e[0].checked&&r.$setViewValue(n.value,t&&t.type)};e.on("click",i),r.$render=function(){var t=n.value;e[0].checked=t==r.$viewValue},n.$observe("value",r.$render)}function xr(t,e,n,r,i){var o;if($(r)){if(o=t(r),!o.constant)throw Sa("constexpr","Expected constant expression for `{0}`, but saw `{1}`.",n,r);return o(e)}return i}function _r(t,e,n,r,i,o,a,u){var s=xr(u,t,"ngTrueValue",n.ngTrueValue,!0),c=xr(u,t,"ngFalseValue",n.ngFalseValue,!1),l=function(t){r.$setViewValue(e[0].checked,t&&t.type)};e.on("click",l),r.$render=function(){e[0].checked=r.$viewValue},
// Override the standard `$isEmpty` because the $viewValue of an empty checkbox is always set to `false`
// This is because of the parser below, which compares the `$modelValue` with `trueValue` to convert
// it to a boolean.
r.$isEmpty=function(t){return t===!1},r.$formatters.push(function(t){return V(t,s)}),r.$parsers.push(function(t){return t?s:c})}function Cr(t,e){return t="ngClass"+t,["$animate",function(n){function r(t,e){var n=[];t:for(var r=0;r<t.length;r++){for(var i=t[r],o=0;o<e.length;o++)if(i==e[o])continue t;n.push(i)}return n}function o(t){var e=[];return Gr(t)?(i(t,function(t){e=e.concat(o(t))}),e):x(t)?t.split(" "):b(t)?(i(t,function(t,n){t&&(e=e.concat(n.split(" ")))}),e):t}return{restrict:"AC",link:function(a,u,s){function c(t){var e=f(t,1);s.$addClass(e)}function l(t){var e=f(t,-1);s.$removeClass(e)}function f(t,e){
// Use createMap() to prevent class assumptions involving property
// names in Object.prototype
var n=u.data("$classCounts")||gt(),r=[];return i(t,function(t){(e>0||n[t])&&(n[t]=(n[t]||0)+e,n[t]===+(e>0)&&r.push(t))}),u.data("$classCounts",n),r.join(" ")}function h(t,e){var i=r(e,t),o=r(t,e);i=f(i,1),o=f(o,-1),i&&i.length&&n.addClass(u,i),o&&o.length&&n.removeClass(u,o)}function p(t){if(e===!0||a.$index%2===e){var n=o(t||[]);if(d){if(!V(t,d)){var r=o(d);h(r,n)}}else c(n)}d=Gr(t)?t.map(function(t){return F(t)}):F(t)}var d;a.$watch(s[t],p,!0),s.$observe("class",function(e){p(a.$eval(s[t]))}),"ngClass"!==t&&a.$watch("$index",function(n,r){
// jshint bitwise: false
var i=1&n;if(i!==(1&r)){var u=o(a.$eval(s[t]));i===e?c(u):l(u)}})}}}]}
// helper methods
function Sr(t){function e(t,e,u){y(e)?n("$pending",t,u):r("$pending",t,u),j(e)?e?(l(a.$error,t,u),c(a.$$success,t,u)):(c(a.$error,t,u),l(a.$$success,t,u)):(l(a.$error,t,u),l(a.$$success,t,u)),a.$pending?(i(xa,!0),a.$valid=a.$invalid=void 0,o("",null)):(i(xa,!1),a.$valid=Ar(a.$error),a.$invalid=!a.$valid,o("",a.$valid));
// re-read the state as the set/unset methods could have
// combined state in ctrl.$error[validationError] (used for forms),
// where setting/unsetting only increments/decrements the value,
// and does not replace it.
var s;s=a.$pending&&a.$pending[t]?void 0:!a.$error[t]&&(!!a.$$success[t]||null),o(t,s),a.$$parentForm.$setValidity(t,s,a)}function n(t,e,n){a[t]||(a[t]={}),c(a[t],e,n)}function r(t,e,n){a[t]&&l(a[t],e,n),Ar(a[t])&&(a[t]=void 0)}function i(t,e){e&&!s[t]?(f.addClass(u,t),s[t]=!0):!e&&s[t]&&(f.removeClass(u,t),s[t]=!1)}function o(t,e){t=t?"-"+ct(t,"-"):"",i(ga+t,e===!0),i(ma+t,e===!1)}var a=t.ctrl,u=t.$element,s={},c=t.set,l=t.unset,f=t.$animate;s[ma]=!(s[ga]=u.hasClass(ga)),a.$setValidity=e}function Ar(t){if(t)for(var e in t)if(t.hasOwnProperty(e))return!1;return!0}function Er(t){
// Workaround for https://code.google.com/p/chromium/issues/detail?id=381459
// Adding an <option selected="selected"> element to a <select required="required"> should
// automatically select the new element
t[0].hasAttribute("selected")&&(t[0].selected=!0)}/* We need to tell jshint what variables are being exported */
/* global angular: true,
	  msie: true,
	  jqLite: true,
	  jQuery: true,
	  slice: true,
	  splice: true,
	  push: true,
	  toString: true,
	  ngMinErr: true,
	  angularModule: true,
	  uid: true,
	  REGEX_STRING_REGEXP: true,
	  VALIDITY_STATE_PROPERTY: true,
	
	  lowercase: true,
	  uppercase: true,
	  manualLowercase: true,
	  manualUppercase: true,
	  nodeName_: true,
	  isArrayLike: true,
	  forEach: true,
	  forEachSorted: true,
	  reverseParams: true,
	  nextUid: true,
	  setHashKey: true,
	  extend: true,
	  toInt: true,
	  inherit: true,
	  merge: true,
	  noop: true,
	  identity: true,
	  valueFn: true,
	  isUndefined: true,
	  isDefined: true,
	  isObject: true,
	  isBlankObject: true,
	  isString: true,
	  isNumber: true,
	  isDate: true,
	  isArray: true,
	  isFunction: true,
	  isRegExp: true,
	  isWindow: true,
	  isScope: true,
	  isFile: true,
	  isFormData: true,
	  isBlob: true,
	  isBoolean: true,
	  isPromiseLike: true,
	  trim: true,
	  escapeForRegexp: true,
	  isElement: true,
	  makeMap: true,
	  includes: true,
	  arrayRemove: true,
	  copy: true,
	  shallowCopy: true,
	  equals: true,
	  csp: true,
	  jq: true,
	  concat: true,
	  sliceArgs: true,
	  bind: true,
	  toJsonReplacer: true,
	  toJson: true,
	  fromJson: true,
	  convertTimezoneToLocal: true,
	  timezoneToOffset: true,
	  startingTag: true,
	  tryDecodeURIComponent: true,
	  parseKeyValue: true,
	  toKeyValue: true,
	  encodeUriSegment: true,
	  encodeUriQuery: true,
	  angularInit: true,
	  bootstrap: true,
	  getTestability: true,
	  snake_case: true,
	  bindJQuery: true,
	  assertArg: true,
	  assertArgFn: true,
	  assertNotHasOwnProperty: true,
	  getter: true,
	  getBlockNodes: true,
	  hasOwnProperty: true,
	  createMap: true,
	
	  NODE_TYPE_ELEMENT: true,
	  NODE_TYPE_ATTRIBUTE: true,
	  NODE_TYPE_TEXT: true,
	  NODE_TYPE_COMMENT: true,
	  NODE_TYPE_DOCUMENT: true,
	  NODE_TYPE_DOCUMENT_FRAGMENT: true,
	*/
////////////////////////////////////
/**
	 * @ngdoc module
	 * @name ng
	 * @module ng
	 * @installation
	 * @description
	 *
	 * # ng (core module)
	 * The ng module is loaded by default when an AngularJS application is started. The module itself
	 * contains the essential components for an AngularJS application to function. The table below
	 * lists a high level breakdown of each of the services/factories, filters, directives and testing
	 * components available within this core module.
	 *
	 * <div doc-module-components="ng"></div>
	 */
var kr=/^\/(.+)\/([a-z]*)$/,Tr="validity",Or=Object.prototype.hasOwnProperty,Rr=function(t){return x(t)?t.toLowerCase():t},jr=function(t){return x(t)?t.toUpperCase():t},Nr=function(t){/* jshint bitwise: false */
return x(t)?t.replace(/[A-Z]/g,function(t){return String.fromCharCode(32|t.charCodeAt(0))}):t},Pr=function(t){/* jshint bitwise: false */
return x(t)?t.replace(/[a-z]/g,function(t){return String.fromCharCode(t.charCodeAt(0)&-33)}):t};
// String#toLowerCase and String#toUpperCase don't produce correct results in browsers with Turkish
// locale, for this reason we need to detect this case and redefine lowercase/uppercase methods
// with correct but slower alternatives. See https://github.com/angular/angular.js/issues/11387
"i"!=="I".toLowerCase()&&(Rr=Nr,jr=Pr);var Dr,// holds major version number for IE, or NaN if UA is not IE.
Mr,// delay binding since jQuery could be loaded after us.
Ir,Lr,// delay binding
qr=[].slice,Ur=[].splice,Fr=[].push,Vr=Object.prototype.toString,Hr=Object.getPrototypeOf,Br=n("ng"),/** @name angular */
Wr=e.angular||(e.angular={}),zr=0;/**
	 * documentMode is an IE-only property
	 * http://msdn.microsoft.com/en-us/library/ie/cc196988(v=vs.85).aspx
	 */
Dr=e.document.documentMode,d.$inject=[],v.$inject=[];/**
	 * @ngdoc function
	 * @name angular.isArray
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is an `Array`.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is an `Array`.
	 */
var Gr=Array.isArray,Xr=/^\[object (?:Uint8|Uint8Clamped|Uint16|Uint32|Int8|Int16|Int32|Float32|Float64)Array\]$/,Jr=function(t){return x(t)?t.trim():t},Yr=function(t){return t.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g,"\\$1").replace(/\x08/g,"\\x08")},Kr=function(){function t(){try{/* jshint +W031, +W054 */
/* jshint -W031, -W054 */
return new Function(""),!1}catch(t){return!0}}if(!$(Kr.rules)){var n=e.document.querySelector("[ng-csp]")||e.document.querySelector("[data-ng-csp]");if(n){var r=n.getAttribute("ng-csp")||n.getAttribute("data-ng-csp");Kr.rules={noUnsafeEval:!r||r.indexOf("no-unsafe-eval")!==-1,noInlineStyle:!r||r.indexOf("no-inline-style")!==-1}}else Kr.rules={noUnsafeEval:t(),noInlineStyle:!1}}return Kr.rules},Zr=function(){if($(Zr.name_))return Zr.name_;var t,n,r,i,o=ti.length;for(n=0;n<o;++n)if(r=ti[n],t=e.document.querySelector("["+r.replace(":","\\:")+"jq]")){i=t.getAttribute(r+"jq");break}return Zr.name_=i},Qr=/:/g,ti=["ng-","data-ng-","ng:","x-ng-"],ei=/[A-Z]/g,ni=!1,ri=1,ii=2,oi=3,ai=8,ui=9,si=11,ci={full:"1.5.5",// all of these placeholder strings will be replaced by grunt's
major:1,// package task
minor:5,dot:5,codeName:"material-conspiration"};/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 *     Any commits to this file should be reviewed with security in mind.  *
	 *   Changes to this file can potentially create security vulnerabilities. *
	 *          An approval from 2 Core members with history of modifying      *
	 *                         this file is required.                          *
	 *                                                                         *
	 *  Does the change somehow allow for arbitrary javascript to be executed? *
	 *    Or allows for someone to change the prototype of built-in objects?   *
	 *     Or gives undesired access to variables likes document or window?    *
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* global JQLitePrototype: true,
	  addEventListenerFn: true,
	  removeEventListenerFn: true,
	  BOOLEAN_ATTR: true,
	  ALIASED_ATTR: true,
	*/
//////////////////////////////////
//JQLite
//////////////////////////////////
/**
	 * @ngdoc function
	 * @name angular.element
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Wraps a raw DOM element or HTML string as a [jQuery](http://jquery.com) element.
	 *
	 * If jQuery is available, `angular.element` is an alias for the
	 * [jQuery](http://api.jquery.com/jQuery/) function. If jQuery is not available, `angular.element`
	 * delegates to Angular's built-in subset of jQuery, called "jQuery lite" or **jqLite**.
	 *
	 * jqLite is a tiny, API-compatible subset of jQuery that allows
	 * Angular to manipulate the DOM in a cross-browser compatible way. jqLite implements only the most
	 * commonly needed functionality with the goal of having a very small footprint.
	 *
	 * To use `jQuery`, simply ensure it is loaded before the `angular.js` file. You can also use the
	 * {@link ngJq `ngJq`} directive to specify that jqlite should be used over jQuery, or to use a
	 * specific version of jQuery if multiple versions exist on the page.
	 *
	 * <div class="alert alert-info">**Note:** All element references in Angular are always wrapped with jQuery or
	 * jqLite (such as the element argument in a directive's compile / link function). They are never raw DOM references.</div>
	 *
	 * <div class="alert alert-warning">**Note:** Keep in mind that this function will not find elements
	 * by tag name / CSS selector. For lookups by tag name, try instead `angular.element(document).find(...)`
	 * or `$document.find()`, or use the standard DOM APIs, e.g. `document.querySelectorAll()`.</div>
	 *
	 * ## Angular's jqLite
	 * jqLite provides only the following jQuery methods:
	 *
	 * - [`addClass()`](http://api.jquery.com/addClass/)
	 * - [`after()`](http://api.jquery.com/after/)
	 * - [`append()`](http://api.jquery.com/append/)
	 * - [`attr()`](http://api.jquery.com/attr/) - Does not support functions as parameters
	 * - [`bind()`](http://api.jquery.com/bind/) - Does not support namespaces, selectors or eventData
	 * - [`children()`](http://api.jquery.com/children/) - Does not support selectors
	 * - [`clone()`](http://api.jquery.com/clone/)
	 * - [`contents()`](http://api.jquery.com/contents/)
	 * - [`css()`](http://api.jquery.com/css/) - Only retrieves inline-styles, does not call `getComputedStyle()`.
	 *   As a setter, does not convert numbers to strings or append 'px', and also does not have automatic property prefixing.
	 * - [`data()`](http://api.jquery.com/data/)
	 * - [`detach()`](http://api.jquery.com/detach/)
	 * - [`empty()`](http://api.jquery.com/empty/)
	 * - [`eq()`](http://api.jquery.com/eq/)
	 * - [`find()`](http://api.jquery.com/find/) - Limited to lookups by tag name
	 * - [`hasClass()`](http://api.jquery.com/hasClass/)
	 * - [`html()`](http://api.jquery.com/html/)
	 * - [`next()`](http://api.jquery.com/next/) - Does not support selectors
	 * - [`on()`](http://api.jquery.com/on/) - Does not support namespaces, selectors or eventData
	 * - [`off()`](http://api.jquery.com/off/) - Does not support namespaces, selectors or event object as parameter
	 * - [`one()`](http://api.jquery.com/one/) - Does not support namespaces or selectors
	 * - [`parent()`](http://api.jquery.com/parent/) - Does not support selectors
	 * - [`prepend()`](http://api.jquery.com/prepend/)
	 * - [`prop()`](http://api.jquery.com/prop/)
	 * - [`ready()`](http://api.jquery.com/ready/)
	 * - [`remove()`](http://api.jquery.com/remove/)
	 * - [`removeAttr()`](http://api.jquery.com/removeAttr/)
	 * - [`removeClass()`](http://api.jquery.com/removeClass/)
	 * - [`removeData()`](http://api.jquery.com/removeData/)
	 * - [`replaceWith()`](http://api.jquery.com/replaceWith/)
	 * - [`text()`](http://api.jquery.com/text/)
	 * - [`toggleClass()`](http://api.jquery.com/toggleClass/)
	 * - [`triggerHandler()`](http://api.jquery.com/triggerHandler/) - Passes a dummy event object to handlers.
	 * - [`unbind()`](http://api.jquery.com/unbind/) - Does not support namespaces or event object as parameter
	 * - [`val()`](http://api.jquery.com/val/)
	 * - [`wrap()`](http://api.jquery.com/wrap/)
	 *
	 * ## jQuery/jqLite Extras
	 * Angular also provides the following additional methods and events to both jQuery and jqLite:
	 *
	 * ### Events
	 * - `$destroy` - AngularJS intercepts all jqLite/jQuery's DOM destruction apis and fires this event
	 *    on all DOM nodes being removed.  This can be used to clean up any 3rd party bindings to the DOM
	 *    element before it is removed.
	 *
	 * ### Methods
	 * - `controller(name)` - retrieves the controller of the current element or its parent. By default
	 *   retrieves controller associated with the `ngController` directive. If `name` is provided as
	 *   camelCase directive name, then the controller for this directive will be retrieved (e.g.
	 *   `'ngModel'`).
	 * - `injector()` - retrieves the injector of the current element or its parent.
	 * - `scope()` - retrieves the {@link ng.$rootScope.Scope scope} of the current
	 *   element or its parent. Requires {@link guide/production#disabling-debug-data Debug Data} to
	 *   be enabled.
	 * - `isolateScope()` - retrieves an isolate {@link ng.$rootScope.Scope scope} if one is attached directly to the
	 *   current element. This getter should be used only on elements that contain a directive which starts a new isolate
	 *   scope. Calling `scope()` on this element always returns the original non-isolate scope.
	 *   Requires {@link guide/production#disabling-debug-data Debug Data} to be enabled.
	 * - `inheritedData()` - same as `data()`, but walks up the DOM until a value is found or the top
	 *   parent element is reached.
	 *
	 * @knownIssue You cannot spy on `angular.element` if you are using Jasmine version 1.x. See
	 * https://github.com/angular/angular.js/issues/14251 for more information.
	 *
	 * @param {string|DOMElement} element HTML string or DOMElement to be wrapped into jQuery.
	 * @returns {Object} jQuery object.
	 */
Ot.expando="ng339";var li=Ot.cache={},fi=1,hi=function(t,e,n){t.addEventListener(e,n,!1)},pi=function(t,e,n){t.removeEventListener(e,n,!1)};/*
	 * !!! This is an undocumented "private" function !!!
	 */
Ot._data=function(t){
//jQuery always returns an object on cache miss
return this.cache[t[this.expando]]||{}};var di=/([\:\-\_]+(.))/g,vi=/^moz([A-Z])/,gi={mouseleave:"mouseout",mouseenter:"mouseover"},mi=n("jqLite"),yi=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,$i=/<|&#?\w+;/,bi=/<([\w:-]+)/,wi=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,xi={option:[1,'<select multiple="multiple">',"</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};xi.optgroup=xi.option,xi.tbody=xi.tfoot=xi.colgroup=xi.caption=xi.thead,xi.th=xi.td;
// IE9-11 has no method "contains" in SVG element and in Node.prototype. Bug #10259.
var _i=e.Node.prototype.contains||function(t){
// jshint bitwise: false
return!!(16&this.compareDocumentPosition(t))},Ci=Ot.prototype={ready:function(t){function n(){r||(r=!0,t())}var r=!1;
// check if document is already loaded
"complete"===e.document.readyState?e.setTimeout(n):(this.on("DOMContentLoaded",n),// works for modern browsers and IE9
// we can not use jqLite since we are not done loading and jQuery could be loaded later.
// jshint -W064
Ot(e).on("load",n))},toString:function(){var t=[];return i(this,function(e){t.push(""+e)}),"["+t.join(", ")+"]"},eq:function(t){return Mr(t>=0?this[t]:this[this.length+t])},length:0,push:Fr,sort:[].sort,splice:[].splice},Si={};i("multiple,selected,checked,disabled,readOnly,required,open".split(","),function(t){Si[Rr(t)]=t});var Ai={};i("input,select,option,textarea,button,form,details".split(","),function(t){Ai[t]=!0});var Ei={ngMinlength:"minlength",ngMaxlength:"maxlength",ngMin:"min",ngMax:"max",ngPattern:"pattern"};i({data:Mt,removeData:Pt,hasData:St,cleanData:At},function(t,e){Ot[e]=t}),i({data:Mt,inheritedData:Vt,scope:function(t){
// Can't use jqLiteData here directly so we stay compatible with jQuery!
return Mr.data(t,"$scope")||Vt(t.parentNode||t,["$isolateScope","$scope"])},isolateScope:function(t){
// Can't use jqLiteData here directly so we stay compatible with jQuery!
return Mr.data(t,"$isolateScope")||Mr.data(t,"$isolateScopeNoTemplate")},controller:Ft,injector:function(t){return Vt(t,"$injector")},removeAttr:function(t,e){t.removeAttribute(e)},hasClass:It,css:function(t,e,n){return e=xt(e),$(n)?void(t.style[e]=n):t.style[e]},attr:function(t,e,n){var r=t.nodeType;if(r!==oi&&r!==ii&&r!==ai){var i=Rr(e);if(Si[i]){if(!$(n))return t[e]||(t.attributes.getNamedItem(e)||d).specified?i:void 0;n?(t[e]=!0,t.setAttribute(e,i)):(t[e]=!1,t.removeAttribute(i))}else if($(n))t.setAttribute(e,n);else if(t.getAttribute){
// the extra argument "2" is to get the right thing for a.href in IE, see jQuery code
// some elements (e.g. Document) don't have get attribute, so return undefined
var o=t.getAttribute(e,2);
// normalize non-existing attributes to undefined (as jQuery)
return null===o?void 0:o}}},prop:function(t,e,n){return $(n)?void(t[e]=n):t[e]},text:function(){function t(t,e){if(y(e)){var n=t.nodeType;return n===ri||n===oi?t.textContent:""}t.textContent=e}return t.$dv="",t}(),val:function(t,e){if(y(e)){if(t.multiple&&"select"===L(t)){var n=[];return i(t.options,function(t){t.selected&&n.push(t.value||t.text)}),0===n.length?null:n}return t.value}t.value=e},html:function(t,e){return y(e)?t.innerHTML:(jt(t,!0),void(t.innerHTML=e))},empty:Ht},function(t,e){/**
	   * Properties: writes return selection, reads return first value
	   */
Ot.prototype[e]=function(e,n){var r,i,o=this.length;
// jqLiteHasClass has only two arguments, but is a getter-only fn, so we need to special-case it
// in a way that survives minification.
// jqLiteEmpty takes no arguments but is a setter.
if(t!==Ht&&y(2==t.length&&t!==It&&t!==Ft?e:n)){if(b(e)){
// we are a write, but the object properties are the key/values
for(r=0;r<o;r++)if(t===Mt)
// data() takes the whole object in jQuery
t(this[r],e);else for(i in e)t(this[r],i,e[i]);
// return self for chaining
return this}for(var a=t.$dv,u=y(a)?Math.min(o,1):o,s=0;s<u;s++){var c=t(this[s],e,n);a=a?a+c:c}return a}
// we are a write, so apply to all children
for(r=0;r<o;r++)t(this[r],e,n);
// return self for chaining
return this}}),
//////////////////////////////////////////
// Functions iterating traversal.
// These functions chain results into a single
// selector.
//////////////////////////////////////////
i({removeData:Pt,on:function(t,e,n,r){if($(r))throw mi("onargs","jqLite#on() does not support the `selector` or `eventData` parameters");
// Do not add event handlers to non-elements because they will not be cleaned up.
if(Ct(t)){var i=Dt(t,!0),o=i.events,a=i.handle;a||(a=i.handle=Xt(t,o));for(
// http://jsperf.com/string-indexof-vs-split
var u=e.indexOf(" ")>=0?e.split(" "):[e],s=u.length,c=function(e,r,i){var u=o[e];u||(u=o[e]=[],u.specialHandlerWrapper=r,"$destroy"===e||i||hi(t,e,a)),u.push(n)};s--;)e=u[s],gi[e]?(c(gi[e],Yt),c(e,void 0,!0)):c(e)}},off:Nt,one:function(t,e,n){t=Mr(t),
//add the listener twice so that when it is called
//you can remove the original function and still be
//able to call element.off(ev, fn) normally
t.on(e,function r(){t.off(e,n),t.off(e,r)}),t.on(e,n)},replaceWith:function(t,e){var n,r=t.parentNode;jt(t),i(new Ot(e),function(e){n?r.insertBefore(e,n.nextSibling):r.replaceChild(e,t),n=e})},children:function(t){var e=[];return i(t.childNodes,function(t){t.nodeType===ri&&e.push(t)}),e},contents:function(t){return t.contentDocument||t.childNodes||[]},append:function(t,e){var n=t.nodeType;if(n===ri||n===si){e=new Ot(e);for(var r=0,i=e.length;r<i;r++){var o=e[r];t.appendChild(o)}}},prepend:function(t,e){if(t.nodeType===ri){var n=t.firstChild;i(new Ot(e),function(e){t.insertBefore(e,n)})}},wrap:function(t,e){Tt(t,Mr(e).eq(0).clone()[0])},remove:Bt,detach:function(t){Bt(t,!0)},after:function(t,e){var n=t,r=t.parentNode;e=new Ot(e);for(var i=0,o=e.length;i<o;i++){var a=e[i];r.insertBefore(a,n.nextSibling),n=a}},addClass:qt,removeClass:Lt,toggleClass:function(t,e,n){e&&i(e.split(" "),function(e){var r=n;y(r)&&(r=!It(t,e)),(r?qt:Lt)(t,e)})},parent:function(t){var e=t.parentNode;return e&&e.nodeType!==si?e:null},next:function(t){return t.nextElementSibling},find:function(t,e){return t.getElementsByTagName?t.getElementsByTagName(e):[]},clone:Rt,triggerHandler:function(t,e,n){var r,o,a,u=e.type||e,s=Dt(t),c=s&&s.events,f=c&&c[u];f&&(
// Create a dummy event to pass to the handlers
r={preventDefault:function(){this.defaultPrevented=!0},isDefaultPrevented:function(){return this.defaultPrevented===!0},stopImmediatePropagation:function(){this.immediatePropagationStopped=!0},isImmediatePropagationStopped:function(){return this.immediatePropagationStopped===!0},stopPropagation:d,type:u,target:t},
// If a custom event was provided then extend our dummy event with it
e.type&&(r=l(r,e)),
// Copy event handlers in case event handlers array is modified during execution.
o=F(f),a=n?[r].concat(n):[r],i(o,function(e){r.isImmediatePropagationStopped()||e.apply(t,a)}))}},function(t,e){/**
	   * chaining functions
	   */
Ot.prototype[e]=function(e,n,r){for(var i,o=0,a=this.length;o<a;o++)y(i)?(i=t(this[o],e,n,r),$(i)&&(
// any function which returns a value needs to be wrapped
i=Mr(i))):Ut(i,t(this[o],e,n,r));return $(i)?i:this},
// bind legacy bind/unbind to on/off
Ot.prototype.bind=Ot.prototype.on,Ot.prototype.unbind=Ot.prototype.off}),Qt.prototype={/**
	   * Store key value pair
	   * @param key key to store can be any type
	   * @param value value to store can be any type
	   */
put:function(t,e){this[Zt(t,this.nextUid)]=e},/**
	   * @param key
	   * @returns {Object} the value for the key
	   */
get:function(t){return this[Zt(t,this.nextUid)]},/**
	   * Remove the key/value pair
	   * @param key
	   */
remove:function(t){var e=this[t=Zt(t,this.nextUid)];return delete this[t],e}};var ki=[function(){this.$get=[function(){return Qt}]}],Ti=/^([^\(]+?)=>/,Oi=/^[^\(]*\(\s*([^\)]*)\)/m,Ri=/,/,ji=/^\s*(_?)(\S+?)\1\s*$/,Ni=/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm,Pi=n("$injector");re.$$annotate=ne;var Di=n("$animate"),Mi=1,Ii="ng-animate",Li=function(){this.$get=d},qi=function(){var t=new Qt,e=[];this.$get=["$$AnimateRunner","$rootScope",function(n,r){function o(t,e,n){var r=!1;return e&&(e=x(e)?e.split(" "):Gr(e)?e:[],i(e,function(e){e&&(r=!0,t[e]=n)})),r}function a(){i(e,function(e){var n=t.get(e);if(n){var r=ue(e.attr("class")),o="",a="";i(n,function(t,e){var n=!!r[e];t!==n&&(t?o+=(o.length?" ":"")+e:a+=(a.length?" ":"")+e)}),i(e,function(t){o&&qt(t,o),a&&Lt(t,a)}),t.remove(e)}}),e.length=0}function u(n,i,u){var s=t.get(n)||{},c=o(s,i,!0),l=o(s,u,!1);(c||l)&&(t.put(n,s),e.push(n),1===e.length&&r.$$postDigest(a))}return{enabled:d,on:d,off:d,pin:d,push:function(t,e,r,i){i&&i(),r=r||{},r.from&&t.css(r.from),r.to&&t.css(r.to),(r.addClass||r.removeClass)&&u(t,r.addClass,r.removeClass);var o=new n;// jshint ignore:line
// since there are no animations to run the runner needs to be
// notified that the animation call is complete.
return o.complete(),o}}}]},Ui=["$provide",function(t){var e=this;this.$$registeredAnimations=Object.create(null),/**
	   * @ngdoc method
	   * @name $animateProvider#register
	   *
	   * @description
	   * Registers a new injectable animation factory function. The factory function produces the
	   * animation object which contains callback functions for each event that is expected to be
	   * animated.
	   *
	   *   * `eventFn`: `function(element, ... , doneFunction, options)`
	   *   The element to animate, the `doneFunction` and the options fed into the animation. Depending
	   *   on the type of animation additional arguments will be injected into the animation function. The
	   *   list below explains the function signatures for the different animation methods:
	   *
	   *   - setClass: function(element, addedClasses, removedClasses, doneFunction, options)
	   *   - addClass: function(element, addedClasses, doneFunction, options)
	   *   - removeClass: function(element, removedClasses, doneFunction, options)
	   *   - enter, leave, move: function(element, doneFunction, options)
	   *   - animate: function(element, fromStyles, toStyles, doneFunction, options)
	   *
	   *   Make sure to trigger the `doneFunction` once the animation is fully complete.
	   *
	   * ```js
	   *   return {
	   *     //enter, leave, move signature
	   *     eventFn : function(element, done, options) {
	   *       //code to run the animation
	   *       //once complete, then run done()
	   *       return function endFunction(wasCancelled) {
	   *         //code to cancel the animation
	   *       }
	   *     }
	   *   }
	   * ```
	   *
	   * @param {string} name The name of the animation (this is what the class-based CSS value will be compared to).
	   * @param {Function} factory The factory function that will be executed to return the animation
	   *                           object.
	   */
this.register=function(n,r){if(n&&"."!==n.charAt(0))throw Di("notcsel","Expecting class selector starting with '.' got '{0}'.",n);var i=n+"-animation";e.$$registeredAnimations[n.substr(1)]=i,t.factory(i,r)},/**
	   * @ngdoc method
	   * @name $animateProvider#classNameFilter
	   *
	   * @description
	   * Sets and/or returns the CSS class regular expression that is checked when performing
	   * an animation. Upon bootstrap the classNameFilter value is not set at all and will
	   * therefore enable $animate to attempt to perform an animation on any element that is triggered.
	   * When setting the `classNameFilter` value, animations will only be performed on elements
	   * that successfully match the filter expression. This in turn can boost performance
	   * for low-powered devices as well as applications containing a lot of structural operations.
	   * @param {RegExp=} expression The className expression which will be checked against all animations
	   * @return {RegExp} The current CSS className expression value. If null then there is no expression value
	   */
this.classNameFilter=function(t){if(1===arguments.length&&(this.$$classNameFilter=t instanceof RegExp?t:null,this.$$classNameFilter)){var e=new RegExp("(\\s+|\\/)"+Ii+"(\\s+|\\/)");if(e.test(this.$$classNameFilter.toString()))throw Di("nongcls",'$animateProvider.classNameFilter(regex) prohibits accepting a regex value which matches/contains the "{0}" CSS class.',Ii)}return this.$$classNameFilter},this.$get=["$$animateQueue",function(t){function e(t,e,n){
// if for some reason the previous element was removed
// from the dom sometime before this code runs then let's
// just stick to using the parent element as the anchor
if(n){var r=ae(n);!r||r.parentNode||r.previousElementSibling||(n=null)}n?n.after(t):e.prepend(t)}/**
	     * @ngdoc service
	     * @name $animate
	     * @description The $animate service exposes a series of DOM utility methods that provide support
	     * for animation hooks. The default behavior is the application of DOM operations, however,
	     * when an animation is detected (and animations are enabled), $animate will do the heavy lifting
	     * to ensure that animation runs with the triggered DOM operation.
	     *
	     * By default $animate doesn't trigger any animations. This is because the `ngAnimate` module isn't
	     * included and only when it is active then the animation hooks that `$animate` triggers will be
	     * functional. Once active then all structural `ng-` directives will trigger animations as they perform
	     * their DOM-related operations (enter, leave and move). Other directives such as `ngClass`,
	     * `ngShow`, `ngHide` and `ngMessages` also provide support for animations.
	     *
	     * It is recommended that the`$animate` service is always used when executing DOM-related procedures within directives.
	     *
	     * To learn more about enabling animation support, click here to visit the
	     * {@link ngAnimate ngAnimate module page}.
	     */
return{
// we don't call it directly since non-existant arguments may
// be interpreted as null within the sub enabled function
/**
	       *
	       * @ngdoc method
	       * @name $animate#on
	       * @kind function
	       * @description Sets up an event listener to fire whenever the animation event (enter, leave, move, etc...)
	       *    has fired on the given element or among any of its children. Once the listener is fired, the provided callback
	       *    is fired with the following params:
	       *
	       * ```js
	       * $animate.on('enter', container,
	       *    function callback(element, phase) {
	       *      // cool we detected an enter animation within the container
	       *    }
	       * );
	       * ```
	       *
	       * @param {string} event the animation event that will be captured (e.g. enter, leave, move, addClass, removeClass, etc...)
	       * @param {DOMElement} container the container element that will capture each of the animation events that are fired on itself
	       *     as well as among its children
	       * @param {Function} callback the callback function that will be fired when the listener is triggered
	       *
	       * The arguments present in the callback function are:
	       * * `element` - The captured DOM element that the animation was fired on.
	       * * `phase` - The phase of the animation. The two possible phases are **start** (when the animation starts) and **close** (when it ends).
	       */
on:t.on,/**
	       *
	       * @ngdoc method
	       * @name $animate#off
	       * @kind function
	       * @description Deregisters an event listener based on the event which has been associated with the provided element. This method
	       * can be used in three different ways depending on the arguments:
	       *
	       * ```js
	       * // remove all the animation event listeners listening for `enter`
	       * $animate.off('enter');
	       *
	       * // remove listeners for all animation events from the container element
	       * $animate.off(container);
	       *
	       * // remove all the animation event listeners listening for `enter` on the given element and its children
	       * $animate.off('enter', container);
	       *
	       * // remove the event listener function provided by `callback` that is set
	       * // to listen for `enter` on the given `container` as well as its children
	       * $animate.off('enter', container, callback);
	       * ```
	       *
	       * @param {string|DOMElement} event|container the animation event (e.g. enter, leave, move,
	       * addClass, removeClass, etc...), or the container element. If it is the element, all other
	       * arguments are ignored.
	       * @param {DOMElement=} container the container element the event listener was placed on
	       * @param {Function=} callback the callback function that was registered as the listener
	       */
off:t.off,/**
	       * @ngdoc method
	       * @name $animate#pin
	       * @kind function
	       * @description Associates the provided element with a host parent element to allow the element to be animated even if it exists
	       *    outside of the DOM structure of the Angular application. By doing so, any animation triggered via `$animate` can be issued on the
	       *    element despite being outside the realm of the application or within another application. Say for example if the application
	       *    was bootstrapped on an element that is somewhere inside of the `<body>` tag, but we wanted to allow for an element to be situated
	       *    as a direct child of `document.body`, then this can be achieved by pinning the element via `$animate.pin(element)`. Keep in mind
	       *    that calling `$animate.pin(element, parentElement)` will not actually insert into the DOM anywhere; it will just create the association.
	       *
	       *    Note that this feature is only active when the `ngAnimate` module is used.
	       *
	       * @param {DOMElement} element the external element that will be pinned
	       * @param {DOMElement} parentElement the host parent element that will be associated with the external element
	       */
pin:t.pin,/**
	       *
	       * @ngdoc method
	       * @name $animate#enabled
	       * @kind function
	       * @description Used to get and set whether animations are enabled or not on the entire application or on an element and its children. This
	       * function can be called in four ways:
	       *
	       * ```js
	       * // returns true or false
	       * $animate.enabled();
	       *
	       * // changes the enabled state for all animations
	       * $animate.enabled(false);
	       * $animate.enabled(true);
	       *
	       * // returns true or false if animations are enabled for an element
	       * $animate.enabled(element);
	       *
	       * // changes the enabled state for an element and its children
	       * $animate.enabled(element, true);
	       * $animate.enabled(element, false);
	       * ```
	       *
	       * @param {DOMElement=} element the element that will be considered for checking/setting the enabled state
	       * @param {boolean=} enabled whether or not the animations will be enabled for the element
	       *
	       * @return {boolean} whether or not animations are enabled
	       */
enabled:t.enabled,/**
	       * @ngdoc method
	       * @name $animate#cancel
	       * @kind function
	       * @description Cancels the provided animation.
	       *
	       * @param {Promise} animationPromise The animation promise that is returned when an animation is started.
	       */
cancel:function(t){t.end&&t.end()},/**
	       *
	       * @ngdoc method
	       * @name $animate#enter
	       * @kind function
	       * @description Inserts the element into the DOM either after the `after` element (if provided) or
	       *   as the first child within the `parent` element and then triggers an animation.
	       *   A promise is returned that will be resolved during the next digest once the animation
	       *   has completed.
	       *
	       * @param {DOMElement} element the element which will be inserted into the DOM
	       * @param {DOMElement} parent the parent element which will append the element as
	       *   a child (so long as the after element is not present)
	       * @param {DOMElement=} after the sibling element after which the element will be appended
	       * @param {object=} options an optional collection of options/styles that will be applied to the element
	       *
	       * @return {Promise} the animation callback promise
	       */
enter:function(n,r,i,o){return r=r&&Mr(r),i=i&&Mr(i),r=r||i.parent(),e(n,r,i),t.push(n,"enter",se(o))},/**
	       *
	       * @ngdoc method
	       * @name $animate#move
	       * @kind function
	       * @description Inserts (moves) the element into its new position in the DOM either after
	       *   the `after` element (if provided) or as the first child within the `parent` element
	       *   and then triggers an animation. A promise is returned that will be resolved
	       *   during the next digest once the animation has completed.
	       *
	       * @param {DOMElement} element the element which will be moved into the new DOM position
	       * @param {DOMElement} parent the parent element which will append the element as
	       *   a child (so long as the after element is not present)
	       * @param {DOMElement=} after the sibling element after which the element will be appended
	       * @param {object=} options an optional collection of options/styles that will be applied to the element
	       *
	       * @return {Promise} the animation callback promise
	       */
move:function(n,r,i,o){return r=r&&Mr(r),i=i&&Mr(i),r=r||i.parent(),e(n,r,i),t.push(n,"move",se(o))},/**
	       * @ngdoc method
	       * @name $animate#leave
	       * @kind function
	       * @description Triggers an animation and then removes the element from the DOM.
	       * When the function is called a promise is returned that will be resolved during the next
	       * digest once the animation has completed.
	       *
	       * @param {DOMElement} element the element which will be removed from the DOM
	       * @param {object=} options an optional collection of options/styles that will be applied to the element
	       *
	       * @return {Promise} the animation callback promise
	       */
leave:function(e,n){return t.push(e,"leave",se(n),function(){e.remove()})},/**
	       * @ngdoc method
	       * @name $animate#addClass
	       * @kind function
	       *
	       * @description Triggers an addClass animation surrounding the addition of the provided CSS class(es). Upon
	       *   execution, the addClass operation will only be handled after the next digest and it will not trigger an
	       *   animation if element already contains the CSS class or if the class is removed at a later step.
	       *   Note that class-based animations are treated differently compared to structural animations
	       *   (like enter, move and leave) since the CSS classes may be added/removed at different points
	       *   depending if CSS or JavaScript animations are used.
	       *
	       * @param {DOMElement} element the element which the CSS classes will be applied to
	       * @param {string} className the CSS class(es) that will be added (multiple classes are separated via spaces)
	       * @param {object=} options an optional collection of options/styles that will be applied to the element
	       *
	       * @return {Promise} the animation callback promise
	       */
addClass:function(e,n,r){return r=se(r),r.addClass=oe(r.addclass,n),t.push(e,"addClass",r)},/**
	       * @ngdoc method
	       * @name $animate#removeClass
	       * @kind function
	       *
	       * @description Triggers a removeClass animation surrounding the removal of the provided CSS class(es). Upon
	       *   execution, the removeClass operation will only be handled after the next digest and it will not trigger an
	       *   animation if element does not contain the CSS class or if the class is added at a later step.
	       *   Note that class-based animations are treated differently compared to structural animations
	       *   (like enter, move and leave) since the CSS classes may be added/removed at different points
	       *   depending if CSS or JavaScript animations are used.
	       *
	       * @param {DOMElement} element the element which the CSS classes will be applied to
	       * @param {string} className the CSS class(es) that will be removed (multiple classes are separated via spaces)
	       * @param {object=} options an optional collection of options/styles that will be applied to the element
	       *
	       * @return {Promise} the animation callback promise
	       */
removeClass:function(e,n,r){return r=se(r),r.removeClass=oe(r.removeClass,n),t.push(e,"removeClass",r)},/**
	       * @ngdoc method
	       * @name $animate#setClass
	       * @kind function
	       *
	       * @description Performs both the addition and removal of a CSS classes on an element and (during the process)
	       *    triggers an animation surrounding the class addition/removal. Much like `$animate.addClass` and
	       *    `$animate.removeClass`, `setClass` will only evaluate the classes being added/removed once a digest has
	       *    passed. Note that class-based animations are treated differently compared to structural animations
	       *    (like enter, move and leave) since the CSS classes may be added/removed at different points
	       *    depending if CSS or JavaScript animations are used.
	       *
	       * @param {DOMElement} element the element which the CSS classes will be applied to
	       * @param {string} add the CSS class(es) that will be added (multiple classes are separated via spaces)
	       * @param {string} remove the CSS class(es) that will be removed (multiple classes are separated via spaces)
	       * @param {object=} options an optional collection of options/styles that will be applied to the element
	       *
	       * @return {Promise} the animation callback promise
	       */
setClass:function(e,n,r,i){return i=se(i),i.addClass=oe(i.addClass,n),i.removeClass=oe(i.removeClass,r),t.push(e,"setClass",i)},/**
	       * @ngdoc method
	       * @name $animate#animate
	       * @kind function
	       *
	       * @description Performs an inline animation on the element which applies the provided to and from CSS styles to the element.
	       * If any detected CSS transition, keyframe or JavaScript matches the provided className value, then the animation will take
	       * on the provided styles. For example, if a transition animation is set for the given classNamem, then the provided `from` and
	       * `to` styles will be applied alongside the given transition. If the CSS style provided in `from` does not have a corresponding
	       * style in `to`, the style in `from` is applied immediately, and no animation is run.
	       * If a JavaScript animation is detected then the provided styles will be given in as function parameters into the `animate`
	       * method (or as part of the `options` parameter):
	       *
	       * ```js
	       * ngModule.animation('.my-inline-animation', function() {
	       *   return {
	       *     animate : function(element, from, to, done, options) {
	       *       //animation
	       *       done();
	       *     }
	       *   }
	       * });
	       * ```
	       *
	       * @param {DOMElement} element the element which the CSS styles will be applied to
	       * @param {object} from the from (starting) CSS styles that will be applied to the element and across the animation.
	       * @param {object} to the to (destination) CSS styles that will be applied to the element and across the animation.
	       * @param {string=} className an optional CSS class that will be applied to the element for the duration of the animation. If
	       *    this value is left as empty then a CSS class of `ng-inline-animate` will be applied to the element.
	       *    (Note that if no animation is detected then this value will not be applied to the element.)
	       * @param {object=} options an optional collection of options/styles that will be applied to the element
	       *
	       * @return {Promise} the animation callback promise
	       */
animate:function(e,n,r,i,o){return o=se(o),o.from=o.from?l(o.from,n):n,o.to=o.to?l(o.to,r):r,i=i||"ng-inline-animate",o.tempClasses=oe(o.tempClasses,i),t.push(e,"animate",o)}}}]}],Fi=function(){this.$get=["$$rAF",function(t){function e(e){n.push(e),n.length>1||t(function(){for(var t=0;t<n.length;t++)n[t]();n=[]})}var n=[];return function(){var t=!1;return e(function(){t=!0}),function(n){t?n():e(n)}}}]},Vi=function(){this.$get=["$q","$sniffer","$$animateAsyncRun","$document","$timeout",function(t,e,n,r,o){function a(t){this.setHost(t);var e=n(),i=function(t){o(t,0,!1)};this._doneCallbacks=[],this._tick=function(t){var n=r[0];
// the document may not be ready or attached
// to the module for some internal tests
n&&n.hidden?i(t):e(t)},this._state=0}var u=0,s=1,c=2;return a.chain=function(t,e){function n(){return r===t.length?void e(!0):void t[r](function(t){return t===!1?void e(!1):(r++,void n())})}var r=0;n()},a.all=function(t,e){function n(n){o=o&&n,++r===t.length&&e(o)}var r=0,o=!0;i(t,function(t){t.done(n)})},a.prototype={setHost:function(t){this.host=t||{}},done:function(t){this._state===c?t():this._doneCallbacks.push(t)},progress:d,getPromise:function(){if(!this.promise){var e=this;this.promise=t(function(t,n){e.done(function(e){e===!1?n():t()})})}return this.promise},then:function(t,e){return this.getPromise().then(t,e)},"catch":function(t){return this.getPromise()["catch"](t)},"finally":function(t){return this.getPromise()["finally"](t)},pause:function(){this.host.pause&&this.host.pause()},resume:function(){this.host.resume&&this.host.resume()},end:function(){this.host.end&&this.host.end(),this._resolve(!0)},cancel:function(){this.host.cancel&&this.host.cancel(),this._resolve(!1)},complete:function(t){var e=this;e._state===u&&(e._state=s,e._tick(function(){e._resolve(t)}))},_resolve:function(t){this._state!==c&&(i(this._doneCallbacks,function(e){e(t)}),this._doneCallbacks.length=0,this._state=c)}},a}]},Hi=function(){this.$get=["$$rAF","$q","$$AnimateRunner",function(t,e,n){return function(e,r){function i(){return t(function(){o(),u||s.complete(),u=!0}),s}function o(){a.addClass&&(e.addClass(a.addClass),a.addClass=null),a.removeClass&&(e.removeClass(a.removeClass),a.removeClass=null),a.to&&(e.css(a.to),a.to=null)}
// all of the animation functions should create
// a copy of the options data, however, if a
// parent service has already created a copy then
// we should stick to using that
var a=r||{};a.$$prepared||(a=U(a)),
// there is no point in applying the styles since
// there is no animation that goes on at all in
// this version of $animateCss.
a.cleanupStyles&&(a.from=a.to=null),a.from&&(e.css(a.from),a.from=null);/* jshint newcap: false */
var u,s=new n;return{start:i,end:i}}}]},Bi=n("$compile"),Wi=new pe;/**
	 * @ngdoc provider
	 * @name $compileProvider
	 *
	 * @description
	 */
de.$inject=["$provide","$$sanitizeUriProvider"],ve.prototype.isFirstChange=function(){return this.previousValue===Wi};var zi=/^((?:x|data)[\:\-_])/i,Gi=n("$controller"),Xi=/^(\S+)(\s+as\s+([\w$]+))?$/,Ji=function(){this.$get=["$document",function(t){return function(e){
//the line below will force the browser to perform a repaint so
//that all the animated elements within the animation frame will
//be properly updated and drawn on screen. This is required to
//ensure that the preparation animation is properly flushed so that
//the active state picks up from there. DO NOT REMOVE THIS LINE.
//DO NOT OPTIMIZE THIS LINE. THE MINIFIER WILL REMOVE IT OTHERWISE WHICH
//WILL RESULT IN AN UNPREDICTABLE BUG THAT IS VERY HARD TO TRACK DOWN AND
//WILL TAKE YEARS AWAY FROM YOUR LIFE.
return e?!e.nodeType&&e instanceof Mr&&(e=e[0]):e=t[0].body,e.offsetWidth+1}}]},Yi="application/json",Ki={"Content-Type":Yi+";charset=utf-8"},Zi=/^\[|^\{(?!\{)/,Qi={"[":/]$/,"{":/}$/},to=/^\)\]\}',?\n/,eo=n("$http"),no=function(t){return function(){throw eo("legacy","The method `{0}` on the promise returned from `$http` has been disabled.",t)}},ro=Wr.$interpolateMinErr=n("$interpolate");ro.throwNoconcat=function(t){throw ro("noconcat","Error while interpolating: {0}\nStrict Contextual Escaping disallows interpolations that concatenate multiple expressions when a trusted value is required.  See http://docs.angularjs.org/api/ng.$sce",t)},ro.interr=function(t,e){return ro("interr","Can't interpolate: {0}\n{1}",t,e.toString())};/**
	 * @ngdoc service
	 * @name $locale
	 *
	 * @description
	 * $locale service provides localization rules for various Angular components. As of right now the
	 * only public api is:
	 *
	 * * `id` – `{string}` – locale id formatted as `languageId-countryId` (e.g. `en-us`)
	 */
var io=/^([^\?#]*)(\?([^#]*))?(#(.*))?$/,oo={http:80,https:443,ftp:21},ao=n("$location"),uo={/**
	   * Are we in html5 mode?
	   * @private
	   */
$$html5:!1,/**
	   * Has any change been replacing?
	   * @private
	   */
$$replace:!1,/**
	   * @ngdoc method
	   * @name $location#absUrl
	   *
	   * @description
	   * This method is getter only.
	   *
	   * Return full url representation with all segments encoded according to rules specified in
	   * [RFC 3986](http://www.ietf.org/rfc/rfc3986.txt).
	   *
	   *
	   * ```js
	   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var absUrl = $location.absUrl();
	   * // => "http://example.com/#/some/path?foo=bar&baz=xoxo"
	   * ```
	   *
	   * @return {string} full url
	   */
absUrl:Je("$$absUrl"),/**
	   * @ngdoc method
	   * @name $location#url
	   *
	   * @description
	   * This method is getter / setter.
	   *
	   * Return url (e.g. `/path?a=b#hash`) when called without any parameter.
	   *
	   * Change path, search and hash, when called with parameter and return `$location`.
	   *
	   *
	   * ```js
	   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var url = $location.url();
	   * // => "/some/path?foo=bar&baz=xoxo"
	   * ```
	   *
	   * @param {string=} url New url without base prefix (e.g. `/path?a=b#hash`)
	   * @return {string} url
	   */
url:function(t){if(y(t))return this.$$url;var e=io.exec(t);return(e[1]||""===t)&&this.path(decodeURIComponent(e[1])),(e[2]||e[1]||""===t)&&this.search(e[3]||""),this.hash(e[5]||""),this},/**
	   * @ngdoc method
	   * @name $location#protocol
	   *
	   * @description
	   * This method is getter only.
	   *
	   * Return protocol of current url.
	   *
	   *
	   * ```js
	   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var protocol = $location.protocol();
	   * // => "http"
	   * ```
	   *
	   * @return {string} protocol of current url
	   */
protocol:Je("$$protocol"),/**
	   * @ngdoc method
	   * @name $location#host
	   *
	   * @description
	   * This method is getter only.
	   *
	   * Return host of current url.
	   *
	   * Note: compared to the non-angular version `location.host` which returns `hostname:port`, this returns the `hostname` portion only.
	   *
	   *
	   * ```js
	   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var host = $location.host();
	   * // => "example.com"
	   *
	   * // given url http://user:password@example.com:8080/#/some/path?foo=bar&baz=xoxo
	   * host = $location.host();
	   * // => "example.com"
	   * host = location.host;
	   * // => "example.com:8080"
	   * ```
	   *
	   * @return {string} host of current url.
	   */
host:Je("$$host"),/**
	   * @ngdoc method
	   * @name $location#port
	   *
	   * @description
	   * This method is getter only.
	   *
	   * Return port of current url.
	   *
	   *
	   * ```js
	   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var port = $location.port();
	   * // => 80
	   * ```
	   *
	   * @return {Number} port
	   */
port:Je("$$port"),/**
	   * @ngdoc method
	   * @name $location#path
	   *
	   * @description
	   * This method is getter / setter.
	   *
	   * Return path of current url when called without any parameter.
	   *
	   * Change path when called with parameter and return `$location`.
	   *
	   * Note: Path should always begin with forward slash (/), this method will add the forward slash
	   * if it is missing.
	   *
	   *
	   * ```js
	   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var path = $location.path();
	   * // => "/some/path"
	   * ```
	   *
	   * @param {(string|number)=} path New path
	   * @return {string} path
	   */
path:Ye("$$path",function(t){return t=null!==t?t.toString():"","/"==t.charAt(0)?t:"/"+t}),/**
	   * @ngdoc method
	   * @name $location#search
	   *
	   * @description
	   * This method is getter / setter.
	   *
	   * Return search part (as object) of current url when called without any parameter.
	   *
	   * Change search part when called with parameter and return `$location`.
	   *
	   *
	   * ```js
	   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var searchObject = $location.search();
	   * // => {foo: 'bar', baz: 'xoxo'}
	   *
	   * // set foo to 'yipee'
	   * $location.search('foo', 'yipee');
	   * // $location.search() => {foo: 'yipee', baz: 'xoxo'}
	   * ```
	   *
	   * @param {string|Object.<string>|Object.<Array.<string>>} search New search params - string or
	   * hash object.
	   *
	   * When called with a single argument the method acts as a setter, setting the `search` component
	   * of `$location` to the specified value.
	   *
	   * If the argument is a hash object containing an array of values, these values will be encoded
	   * as duplicate search parameters in the url.
	   *
	   * @param {(string|Number|Array<string>|boolean)=} paramValue If `search` is a string or number, then `paramValue`
	   * will override only a single search property.
	   *
	   * If `paramValue` is an array, it will override the property of the `search` component of
	   * `$location` specified via the first argument.
	   *
	   * If `paramValue` is `null`, the property specified via the first argument will be deleted.
	   *
	   * If `paramValue` is `true`, the property specified via the first argument will be added with no
	   * value nor trailing equal sign.
	   *
	   * @return {Object} If called with no arguments returns the parsed `search` object. If called with
	   * one or more arguments returns `$location` object itself.
	   */
search:function(t,e){switch(arguments.length){case 0:return this.$$search;case 1:if(x(t)||_(t))t=t.toString(),this.$$search=tt(t);else{if(!b(t))throw ao("isrcharg","The first argument of the `$location#search()` call must be a string or an object.");t=U(t,{}),
// remove object undefined or null properties
i(t,function(e,n){null==e&&delete t[n]}),this.$$search=t}break;default:y(e)||null===e?delete this.$$search[t]:this.$$search[t]=e}return this.$$compose(),this},/**
	   * @ngdoc method
	   * @name $location#hash
	   *
	   * @description
	   * This method is getter / setter.
	   *
	   * Returns the hash fragment when called without any parameters.
	   *
	   * Changes the hash fragment when called with a parameter and returns `$location`.
	   *
	   *
	   * ```js
	   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo#hashValue
	   * var hash = $location.hash();
	   * // => "hashValue"
	   * ```
	   *
	   * @param {(string|number)=} hash New hash fragment
	   * @return {string} hash
	   */
hash:Ye("$$hash",function(t){return null!==t?t.toString():""}),/**
	   * @ngdoc method
	   * @name $location#replace
	   *
	   * @description
	   * If called, all changes to $location during the current `$digest` will replace the current history
	   * record, instead of adding a new one.
	   */
replace:function(){return this.$$replace=!0,this}};i([Xe,Ge,ze],function(t){t.prototype=Object.create(uo),/**
	   * @ngdoc method
	   * @name $location#state
	   *
	   * @description
	   * This method is getter / setter.
	   *
	   * Return the history state object when called without any parameter.
	   *
	   * Change the history state object when called with one parameter and return `$location`.
	   * The state object is later passed to `pushState` or `replaceState`.
	   *
	   * NOTE: This method is supported only in HTML5 mode and only in browsers supporting
	   * the HTML5 History API (i.e. methods `pushState` and `replaceState`). If you need to support
	   * older browsers (like IE9 or Android < 4.0), don't use this method.
	   *
	   * @param {object=} state State object for pushState or replaceState
	   * @return {object} state
	   */
t.prototype.state=function(e){if(!arguments.length)return this.$$state;if(t!==ze||!this.$$html5)throw ao("nostate","History API state support is available only in HTML5 mode and only in browsers supporting HTML5 History API");
// The user might modify `stateObject` after invoking `$location.state(stateObject)`
// but we're changing the $$state reference to $browser.state() during the $digest
// so the modification window is narrow.
return this.$$state=y(e)?null:e,this}});/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 *     Any commits to this file should be reviewed with security in mind.  *
	 *   Changes to this file can potentially create security vulnerabilities. *
	 *          An approval from 2 Core members with history of modifying      *
	 *                         this file is required.                          *
	 *                                                                         *
	 *  Does the change somehow allow for arbitrary javascript to be executed? *
	 *    Or allows for someone to change the prototype of built-in objects?   *
	 *     Or gives undesired access to variables likes document or window?    *
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
var so=n("$parse"),co=Function.prototype.call,lo=Function.prototype.apply,fo=Function.prototype.bind,ho=gt();i("+ - * / % === !== == != < > <= >= && || ! = |".split(" "),function(t){ho[t]=!0});var po={n:"\n",f:"\f",r:"\r",t:"\t",v:"\x0B","'":"'",'"':'"'},vo=function(t){this.options=t};vo.prototype={constructor:vo,lex:function(t){for(this.text=t,this.index=0,this.tokens=[];this.index<this.text.length;){var e=this.text.charAt(this.index);if('"'===e||"'"===e)this.readString(e);else if(this.isNumber(e)||"."===e&&this.isNumber(this.peek()))this.readNumber();else if(this.isIdentifierStart(this.peekMultichar()))this.readIdent();else if(this.is(e,"(){}[].,;:?"))this.tokens.push({index:this.index,text:e}),this.index++;else if(this.isWhitespace(e))this.index++;else{var n=e+this.peek(),r=n+this.peek(2),i=ho[e],o=ho[n],a=ho[r];if(i||o||a){var u=a?r:o?n:e;this.tokens.push({index:this.index,text:u,operator:!0}),this.index+=u.length}else this.throwError("Unexpected next character ",this.index,this.index+1)}}return this.tokens},is:function(t,e){return e.indexOf(t)!==-1},peek:function(t){var e=t||1;return this.index+e<this.text.length&&this.text.charAt(this.index+e)},isNumber:function(t){return"0"<=t&&t<="9"&&"string"==typeof t},isWhitespace:function(t){
// IE treats non-breaking space as \u00A0
return" "===t||"\r"===t||"\t"===t||"\n"===t||"\x0B"===t||" "===t},isIdentifierStart:function(t){return this.options.isIdentifierStart?this.options.isIdentifierStart(t,this.codePointAt(t)):this.isValidIdentifierStart(t)},isValidIdentifierStart:function(t){return"a"<=t&&t<="z"||"A"<=t&&t<="Z"||"_"===t||"$"===t},isIdentifierContinue:function(t){return this.options.isIdentifierContinue?this.options.isIdentifierContinue(t,this.codePointAt(t)):this.isValidIdentifierContinue(t)},isValidIdentifierContinue:function(t,e){return this.isValidIdentifierStart(t,e)||this.isNumber(t)},codePointAt:function(t){return 1===t.length?t.charCodeAt(0):(t.charCodeAt(0)<<10)+t.charCodeAt(1)-56613888},peekMultichar:function(){var t=this.text.charAt(this.index),e=this.peek();if(!e)return t;var n=t.charCodeAt(0),r=e.charCodeAt(0);return n>=55296&&n<=56319&&r>=56320&&r<=57343?t+e:t},isExpOperator:function(t){return"-"===t||"+"===t||this.isNumber(t)},throwError:function(t,e,n){n=n||this.index;var r=$(e)?"s "+e+"-"+this.index+" ["+this.text.substring(e,n)+"]":" "+n;throw so("lexerr","Lexer Error: {0} at column{1} in expression [{2}].",t,r,this.text)},readNumber:function(){for(var t="",e=this.index;this.index<this.text.length;){var n=Rr(this.text.charAt(this.index));if("."==n||this.isNumber(n))t+=n;else{var r=this.peek();if("e"==n&&this.isExpOperator(r))t+=n;else if(this.isExpOperator(n)&&r&&this.isNumber(r)&&"e"==t.charAt(t.length-1))t+=n;else{if(!this.isExpOperator(n)||r&&this.isNumber(r)||"e"!=t.charAt(t.length-1))break;this.throwError("Invalid exponent")}}this.index++}this.tokens.push({index:e,text:t,constant:!0,value:Number(t)})},readIdent:function(){var t=this.index;for(this.index+=this.peekMultichar().length;this.index<this.text.length;){var e=this.peekMultichar();if(!this.isIdentifierContinue(e))break;this.index+=e.length}this.tokens.push({index:t,text:this.text.slice(t,this.index),identifier:!0})},readString:function(t){var e=this.index;this.index++;for(var n="",r=t,i=!1;this.index<this.text.length;){var o=this.text.charAt(this.index);if(r+=o,i){if("u"===o){var a=this.text.substring(this.index+1,this.index+5);a.match(/[\da-f]{4}/i)||this.throwError("Invalid unicode escape [\\u"+a+"]"),this.index+=4,n+=String.fromCharCode(parseInt(a,16))}else{var u=po[o];n+=u||o}i=!1}else if("\\"===o)i=!0;else{if(o===t)return this.index++,void this.tokens.push({index:e,text:r,constant:!0,value:n});n+=o}this.index++}this.throwError("Unterminated quote",e)}};var go=function(t,e){this.lexer=t,this.options=e};go.Program="Program",go.ExpressionStatement="ExpressionStatement",go.AssignmentExpression="AssignmentExpression",go.ConditionalExpression="ConditionalExpression",go.LogicalExpression="LogicalExpression",go.BinaryExpression="BinaryExpression",go.UnaryExpression="UnaryExpression",go.CallExpression="CallExpression",go.MemberExpression="MemberExpression",go.Identifier="Identifier",go.Literal="Literal",go.ArrayExpression="ArrayExpression",go.Property="Property",go.ObjectExpression="ObjectExpression",go.ThisExpression="ThisExpression",go.LocalsExpression="LocalsExpression",
// Internal use only
go.NGValueParameter="NGValueParameter",go.prototype={ast:function(t){this.text=t,this.tokens=this.lexer.lex(t);var e=this.program();return 0!==this.tokens.length&&this.throwError("is an unexpected token",this.tokens[0]),e},program:function(){for(var t=[];;)if(this.tokens.length>0&&!this.peek("}",")",";","]")&&t.push(this.expressionStatement()),!this.expect(";"))return{type:go.Program,body:t}},expressionStatement:function(){return{type:go.ExpressionStatement,expression:this.filterChain()}},filterChain:function(){for(var t,e=this.expression();t=this.expect("|");)e=this.filter(e);return e},expression:function(){return this.assignment()},assignment:function(){var t=this.ternary();return this.expect("=")&&(t={type:go.AssignmentExpression,left:t,right:this.assignment(),operator:"="}),t},ternary:function(){var t,e,n=this.logicalOR();return this.expect("?")&&(t=this.expression(),this.consume(":"))?(e=this.expression(),{type:go.ConditionalExpression,test:n,alternate:t,consequent:e}):n},logicalOR:function(){for(var t=this.logicalAND();this.expect("||");)t={type:go.LogicalExpression,operator:"||",left:t,right:this.logicalAND()};return t},logicalAND:function(){for(var t=this.equality();this.expect("&&");)t={type:go.LogicalExpression,operator:"&&",left:t,right:this.equality()};return t},equality:function(){for(var t,e=this.relational();t=this.expect("==","!=","===","!==");)e={type:go.BinaryExpression,operator:t.text,left:e,right:this.relational()};return e},relational:function(){for(var t,e=this.additive();t=this.expect("<",">","<=",">=");)e={type:go.BinaryExpression,operator:t.text,left:e,right:this.additive()};return e},additive:function(){for(var t,e=this.multiplicative();t=this.expect("+","-");)e={type:go.BinaryExpression,operator:t.text,left:e,right:this.multiplicative()};return e},multiplicative:function(){for(var t,e=this.unary();t=this.expect("*","/","%");)e={type:go.BinaryExpression,operator:t.text,left:e,right:this.unary()};return e},unary:function(){var t;return(t=this.expect("+","-","!"))?{type:go.UnaryExpression,operator:t.text,prefix:!0,argument:this.unary()}:this.primary()},primary:function(){var t;this.expect("(")?(t=this.filterChain(),this.consume(")")):this.expect("[")?t=this.arrayDeclaration():this.expect("{")?t=this.object():this.selfReferential.hasOwnProperty(this.peek().text)?t=U(this.selfReferential[this.consume().text]):this.options.literals.hasOwnProperty(this.peek().text)?t={type:go.Literal,value:this.options.literals[this.consume().text]}:this.peek().identifier?t=this.identifier():this.peek().constant?t=this.constant():this.throwError("not a primary expression",this.peek());for(var e;e=this.expect("(","[",".");)"("===e.text?(t={type:go.CallExpression,callee:t,arguments:this.parseArguments()},this.consume(")")):"["===e.text?(t={type:go.MemberExpression,object:t,property:this.expression(),computed:!0},this.consume("]")):"."===e.text?t={type:go.MemberExpression,object:t,property:this.identifier(),computed:!1}:this.throwError("IMPOSSIBLE");return t},filter:function(t){for(var e=[t],n={type:go.CallExpression,callee:this.identifier(),arguments:e,filter:!0};this.expect(":");)e.push(this.expression());return n},parseArguments:function(){var t=[];if(")"!==this.peekToken().text)do t.push(this.expression());while(this.expect(","));return t},identifier:function(){var t=this.consume();return t.identifier||this.throwError("is not a valid identifier",t),{type:go.Identifier,name:t.text}},constant:function(){
// TODO check that it is a constant
return{type:go.Literal,value:this.consume().value}},arrayDeclaration:function(){var t=[];if("]"!==this.peekToken().text)do{if(this.peek("]"))
// Support trailing commas per ES5.1.
break;t.push(this.expression())}while(this.expect(","));return this.consume("]"),{type:go.ArrayExpression,elements:t}},object:function(){var t,e=[];if("}"!==this.peekToken().text)do{if(this.peek("}"))
// Support trailing commas per ES5.1.
break;t={type:go.Property,kind:"init"},this.peek().constant?t.key=this.constant():this.peek().identifier?t.key=this.identifier():this.throwError("invalid key",this.peek()),this.consume(":"),t.value=this.expression(),e.push(t)}while(this.expect(","));return this.consume("}"),{type:go.ObjectExpression,properties:e}},throwError:function(t,e){throw so("syntax","Syntax Error: Token '{0}' {1} at column {2} of the expression [{3}] starting at [{4}].",e.text,t,e.index+1,this.text,this.text.substring(e.index))},consume:function(t){if(0===this.tokens.length)throw so("ueoe","Unexpected end of expression: {0}",this.text);var e=this.expect(t);return e||this.throwError("is unexpected, expecting ["+t+"]",this.peek()),e},peekToken:function(){if(0===this.tokens.length)throw so("ueoe","Unexpected end of expression: {0}",this.text);return this.tokens[0]},peek:function(t,e,n,r){return this.peekAhead(0,t,e,n,r)},peekAhead:function(t,e,n,r,i){if(this.tokens.length>t){var o=this.tokens[t],a=o.text;if(a===e||a===n||a===r||a===i||!e&&!n&&!r&&!i)return o}return!1},expect:function(t,e,n,r){var i=this.peek(t,e,n,r);return!!i&&(this.tokens.shift(),i)},selfReferential:{"this":{type:go.ThisExpression},$locals:{type:go.LocalsExpression}}},dn.prototype={compile:function(t,e){var n=this,r=this.astBuilder.ast(t);this.state={nextId:0,filters:{},expensiveChecks:e,fn:{vars:[],body:[],own:{}},assign:{vars:[],body:[],own:{}},inputs:[]},sn(r,n.$filter);var o,a="";if(this.stage="assign",o=fn(r)){this.state.computing="assign";var u=this.nextId();this.recurse(o,u),this.return_(u),a="fn.assign="+this.generateFunction("assign","s,v,l")}var s=cn(r.body);n.stage="inputs",i(s,function(t,e){var r="fn"+e;n.state[r]={vars:[],body:[],own:{}},n.state.computing=r;var i=n.nextId();n.recurse(t,i),n.return_(i),n.state.inputs.push(r),t.watchId=e}),this.state.computing="fn",this.stage="main",this.recurse(r);var c=
// The build and minification steps remove the string "use strict" from the code, but this is done using a regex.
// This is a workaround for this until we do a better job at only removing the prefix only when we should.
'"'+this.USE+" "+this.STRICT+'";\n'+this.filterPrefix()+"var fn="+this.generateFunction("fn","s,l,a,i")+a+this.watchFns()+"return fn;",l=new Function("$filter","ensureSafeMemberName","ensureSafeObject","ensureSafeFunction","getStringValue","ensureSafeAssignContext","ifDefined","plus","text",c)(this.$filter,Qe,en,nn,tn,rn,on,an,t);/* jshint +W054 */
return this.state=this.stage=void 0,l.literal=hn(r),l.constant=pn(r),l},USE:"use",STRICT:"strict",watchFns:function(){var t=[],e=this.state.inputs,n=this;return i(e,function(e){t.push("var "+e+"="+n.generateFunction(e,"s"))}),e.length&&t.push("fn.inputs=["+e.join(",")+"];"),t.join("")},generateFunction:function(t,e){return"function("+e+"){"+this.varsPrefix(t)+this.body(t)+"};"},filterPrefix:function(){var t=[],e=this;return i(this.state.filters,function(n,r){t.push(n+"=$filter("+e.escape(r)+")")}),t.length?"var "+t.join(",")+";":""},varsPrefix:function(t){return this.state[t].vars.length?"var "+this.state[t].vars.join(",")+";":""},body:function(t){return this.state[t].body.join("")},recurse:function(t,e,n,r,o,a){var u,s,c,l,f=this;if(r=r||d,!a&&$(t.watchId))return e=e||this.nextId(),void this.if_("i",this.lazyAssign(e,this.computedMember("i",t.watchId)),this.lazyRecurse(t,e,n,r,o,!0));switch(t.type){case go.Program:i(t.body,function(e,n){f.recurse(e.expression,void 0,void 0,function(t){s=t}),n!==t.body.length-1?f.current().body.push(s,";"):f.return_(s)});break;case go.Literal:l=this.escape(t.value),this.assign(e,l),r(l);break;case go.UnaryExpression:this.recurse(t.argument,void 0,void 0,function(t){s=t}),l=t.operator+"("+this.ifDefined(s,0)+")",this.assign(e,l),r(l);break;case go.BinaryExpression:this.recurse(t.left,void 0,void 0,function(t){u=t}),this.recurse(t.right,void 0,void 0,function(t){s=t}),l="+"===t.operator?this.plus(u,s):"-"===t.operator?this.ifDefined(u,0)+t.operator+this.ifDefined(s,0):"("+u+")"+t.operator+"("+s+")",this.assign(e,l),r(l);break;case go.LogicalExpression:e=e||this.nextId(),f.recurse(t.left,e),f.if_("&&"===t.operator?e:f.not(e),f.lazyRecurse(t.right,e)),r(e);break;case go.ConditionalExpression:e=e||this.nextId(),f.recurse(t.test,e),f.if_(e,f.lazyRecurse(t.alternate,e),f.lazyRecurse(t.consequent,e)),r(e);break;case go.Identifier:e=e||this.nextId(),n&&(n.context="inputs"===f.stage?"s":this.assign(this.nextId(),this.getHasOwnProperty("l",t.name)+"?l:s"),n.computed=!1,n.name=t.name),Qe(t.name),f.if_("inputs"===f.stage||f.not(f.getHasOwnProperty("l",t.name)),function(){f.if_("inputs"===f.stage||"s",function(){o&&1!==o&&f.if_(f.not(f.nonComputedMember("s",t.name)),f.lazyAssign(f.nonComputedMember("s",t.name),"{}")),f.assign(e,f.nonComputedMember("s",t.name))})},e&&f.lazyAssign(e,f.nonComputedMember("l",t.name))),(f.state.expensiveChecks||gn(t.name))&&f.addEnsureSafeObject(e),r(e);break;case go.MemberExpression:u=n&&(n.context=this.nextId())||this.nextId(),e=e||this.nextId(),f.recurse(t.object,u,void 0,function(){f.if_(f.notNull(u),function(){o&&1!==o&&f.addEnsureSafeAssignContext(u),t.computed?(s=f.nextId(),f.recurse(t.property,s),f.getStringValue(s),f.addEnsureSafeMemberName(s),o&&1!==o&&f.if_(f.not(f.computedMember(u,s)),f.lazyAssign(f.computedMember(u,s),"{}")),l=f.ensureSafeObject(f.computedMember(u,s)),f.assign(e,l),n&&(n.computed=!0,n.name=s)):(Qe(t.property.name),o&&1!==o&&f.if_(f.not(f.nonComputedMember(u,t.property.name)),f.lazyAssign(f.nonComputedMember(u,t.property.name),"{}")),l=f.nonComputedMember(u,t.property.name),(f.state.expensiveChecks||gn(t.property.name))&&(l=f.ensureSafeObject(l)),f.assign(e,l),n&&(n.computed=!1,n.name=t.property.name))},function(){f.assign(e,"undefined")}),r(e)},!!o);break;case go.CallExpression:e=e||this.nextId(),t.filter?(s=f.filter(t.callee.name),c=[],i(t.arguments,function(t){var e=f.nextId();f.recurse(t,e),c.push(e)}),l=s+"("+c.join(",")+")",f.assign(e,l),r(e)):(s=f.nextId(),u={},c=[],f.recurse(t.callee,s,u,function(){f.if_(f.notNull(s),function(){f.addEnsureSafeFunction(s),i(t.arguments,function(t){f.recurse(t,f.nextId(),void 0,function(t){c.push(f.ensureSafeObject(t))})}),u.name?(f.state.expensiveChecks||f.addEnsureSafeObject(u.context),l=f.member(u.context,u.name,u.computed)+"("+c.join(",")+")"):l=s+"("+c.join(",")+")",l=f.ensureSafeObject(l),f.assign(e,l)},function(){f.assign(e,"undefined")}),r(e)}));break;case go.AssignmentExpression:if(s=this.nextId(),u={},!ln(t.left))throw so("lval","Trying to assign a value to a non l-value");this.recurse(t.left,void 0,u,function(){f.if_(f.notNull(u.context),function(){f.recurse(t.right,s),f.addEnsureSafeObject(f.member(u.context,u.name,u.computed)),f.addEnsureSafeAssignContext(u.context),l=f.member(u.context,u.name,u.computed)+t.operator+s,f.assign(e,l),r(e||l)})},1);break;case go.ArrayExpression:c=[],i(t.elements,function(t){f.recurse(t,f.nextId(),void 0,function(t){c.push(t)})}),l="["+c.join(",")+"]",this.assign(e,l),r(l);break;case go.ObjectExpression:c=[],i(t.properties,function(t){f.recurse(t.value,f.nextId(),void 0,function(e){c.push(f.escape(t.key.type===go.Identifier?t.key.name:""+t.key.value)+":"+e)})}),l="{"+c.join(",")+"}",this.assign(e,l),r(l);break;case go.ThisExpression:this.assign(e,"s"),r("s");break;case go.LocalsExpression:this.assign(e,"l"),r("l");break;case go.NGValueParameter:this.assign(e,"v"),r("v")}},getHasOwnProperty:function(t,e){var n=t+"."+e,r=this.current().own;return r.hasOwnProperty(n)||(r[n]=this.nextId(!1,t+"&&("+this.escape(e)+" in "+t+")")),r[n]},assign:function(t,e){if(t)return this.current().body.push(t,"=",e,";"),t},filter:function(t){return this.state.filters.hasOwnProperty(t)||(this.state.filters[t]=this.nextId(!0)),this.state.filters[t]},ifDefined:function(t,e){return"ifDefined("+t+","+this.escape(e)+")"},plus:function(t,e){return"plus("+t+","+e+")"},return_:function(t){this.current().body.push("return ",t,";")},if_:function(t,e,n){if(t===!0)e();else{var r=this.current().body;r.push("if(",t,"){"),e(),r.push("}"),n&&(r.push("else{"),n(),r.push("}"))}},not:function(t){return"!("+t+")"},notNull:function(t){return t+"!=null"},nonComputedMember:function(t,e){var n=/[$_a-zA-Z][$_a-zA-Z0-9]*/,r=/[^$_a-zA-Z0-9]/g;return n.test(e)?t+"."+e:t+'["'+e.replace(r,this.stringEscapeFn)+'"]'},computedMember:function(t,e){return t+"["+e+"]"},member:function(t,e,n){return n?this.computedMember(t,e):this.nonComputedMember(t,e)},addEnsureSafeObject:function(t){this.current().body.push(this.ensureSafeObject(t),";")},addEnsureSafeMemberName:function(t){this.current().body.push(this.ensureSafeMemberName(t),";")},addEnsureSafeFunction:function(t){this.current().body.push(this.ensureSafeFunction(t),";")},addEnsureSafeAssignContext:function(t){this.current().body.push(this.ensureSafeAssignContext(t),";")},ensureSafeObject:function(t){return"ensureSafeObject("+t+",text)"},ensureSafeMemberName:function(t){return"ensureSafeMemberName("+t+",text)"},ensureSafeFunction:function(t){return"ensureSafeFunction("+t+",text)"},getStringValue:function(t){this.assign(t,"getStringValue("+t+")")},ensureSafeAssignContext:function(t){return"ensureSafeAssignContext("+t+",text)"},lazyRecurse:function(t,e,n,r,i,o){var a=this;return function(){a.recurse(t,e,n,r,i,o)}},lazyAssign:function(t,e){var n=this;return function(){n.assign(t,e)}},stringEscapeRegex:/[^ a-zA-Z0-9]/g,stringEscapeFn:function(t){return"\\u"+("0000"+t.charCodeAt(0).toString(16)).slice(-4)},escape:function(t){if(x(t))return"'"+t.replace(this.stringEscapeRegex,this.stringEscapeFn)+"'";if(_(t))return t.toString();if(t===!0)return"true";if(t===!1)return"false";if(null===t)return"null";if("undefined"==typeof t)return"undefined";throw so("esc","IMPOSSIBLE")},nextId:function(t,e){var n="v"+this.state.nextId++;return t||this.current().vars.push(n+(e?"="+e:"")),n},current:function(){return this.state[this.state.computing]}},vn.prototype={compile:function(t,e){var n=this,r=this.astBuilder.ast(t);this.expression=t,this.expensiveChecks=e,sn(r,n.$filter);var o,a;(o=fn(r))&&(a=this.recurse(o));var u,s=cn(r.body);s&&(u=[],i(s,function(t,e){var r=n.recurse(t);t.input=r,u.push(r),t.watchId=e}));var c=[];i(r.body,function(t){c.push(n.recurse(t.expression))});var l=0===r.body.length?d:1===r.body.length?c[0]:function(t,e){var n;return i(c,function(r){n=r(t,e)}),n};return a&&(l.assign=function(t,e,n){return a(t,n,e)}),u&&(l.inputs=u),l.literal=hn(r),l.constant=pn(r),l},recurse:function(t,e,n){var r,o,a,u=this;if(t.input)return this.inputs(t.input,t.watchId);switch(t.type){case go.Literal:return this.value(t.value,e);case go.UnaryExpression:return o=this.recurse(t.argument),this["unary"+t.operator](o,e);case go.BinaryExpression:return r=this.recurse(t.left),o=this.recurse(t.right),this["binary"+t.operator](r,o,e);case go.LogicalExpression:return r=this.recurse(t.left),o=this.recurse(t.right),this["binary"+t.operator](r,o,e);case go.ConditionalExpression:return this["ternary?:"](this.recurse(t.test),this.recurse(t.alternate),this.recurse(t.consequent),e);case go.Identifier:return Qe(t.name,u.expression),u.identifier(t.name,u.expensiveChecks||gn(t.name),e,n,u.expression);case go.MemberExpression:return r=this.recurse(t.object,!1,!!n),t.computed||(Qe(t.property.name,u.expression),o=t.property.name),t.computed&&(o=this.recurse(t.property)),t.computed?this.computedMember(r,o,e,n,u.expression):this.nonComputedMember(r,o,u.expensiveChecks,e,n,u.expression);case go.CallExpression:return a=[],i(t.arguments,function(t){a.push(u.recurse(t))}),t.filter&&(o=this.$filter(t.callee.name)),t.filter||(o=this.recurse(t.callee,!0)),t.filter?function(t,n,r,i){for(var u=[],s=0;s<a.length;++s)u.push(a[s](t,n,r,i));var c=o.apply(void 0,u,i);return e?{context:void 0,name:void 0,value:c}:c}:function(t,n,r,i){var s,c=o(t,n,r,i);if(null!=c.value){en(c.context,u.expression),nn(c.value,u.expression);for(var l=[],f=0;f<a.length;++f)l.push(en(a[f](t,n,r,i),u.expression));s=en(c.value.apply(c.context,l),u.expression)}return e?{value:s}:s};case go.AssignmentExpression:return r=this.recurse(t.left,!0,1),o=this.recurse(t.right),function(t,n,i,a){var s=r(t,n,i,a),c=o(t,n,i,a);return en(s.value,u.expression),rn(s.context),s.context[s.name]=c,e?{value:c}:c};case go.ArrayExpression:return a=[],i(t.elements,function(t){a.push(u.recurse(t))}),function(t,n,r,i){for(var o=[],u=0;u<a.length;++u)o.push(a[u](t,n,r,i));return e?{value:o}:o};case go.ObjectExpression:return a=[],i(t.properties,function(t){a.push({key:t.key.type===go.Identifier?t.key.name:""+t.key.value,value:u.recurse(t.value)})}),function(t,n,r,i){for(var o={},u=0;u<a.length;++u)o[a[u].key]=a[u].value(t,n,r,i);return e?{value:o}:o};case go.ThisExpression:return function(t){return e?{value:t}:t};case go.LocalsExpression:return function(t,n){return e?{value:n}:n};case go.NGValueParameter:return function(t,n,r){return e?{value:r}:r}}},"unary+":function(t,e){return function(n,r,i,o){var a=t(n,r,i,o);return a=$(a)?+a:0,e?{value:a}:a}},"unary-":function(t,e){return function(n,r,i,o){var a=t(n,r,i,o);return a=$(a)?-a:0,e?{value:a}:a}},"unary!":function(t,e){return function(n,r,i,o){var a=!t(n,r,i,o);return e?{value:a}:a}},"binary+":function(t,e,n){return function(r,i,o,a){var u=t(r,i,o,a),s=e(r,i,o,a),c=an(u,s);return n?{value:c}:c}},"binary-":function(t,e,n){return function(r,i,o,a){var u=t(r,i,o,a),s=e(r,i,o,a),c=($(u)?u:0)-($(s)?s:0);return n?{value:c}:c}},"binary*":function(t,e,n){return function(r,i,o,a){var u=t(r,i,o,a)*e(r,i,o,a);return n?{value:u}:u}},"binary/":function(t,e,n){return function(r,i,o,a){var u=t(r,i,o,a)/e(r,i,o,a);return n?{value:u}:u}},"binary%":function(t,e,n){return function(r,i,o,a){var u=t(r,i,o,a)%e(r,i,o,a);return n?{value:u}:u}},"binary===":function(t,e,n){return function(r,i,o,a){var u=t(r,i,o,a)===e(r,i,o,a);return n?{value:u}:u}},"binary!==":function(t,e,n){return function(r,i,o,a){var u=t(r,i,o,a)!==e(r,i,o,a);return n?{value:u}:u}},"binary==":function(t,e,n){return function(r,i,o,a){var u=t(r,i,o,a)==e(r,i,o,a);return n?{value:u}:u}},"binary!=":function(t,e,n){return function(r,i,o,a){var u=t(r,i,o,a)!=e(r,i,o,a);return n?{value:u}:u}},"binary<":function(t,e,n){return function(r,i,o,a){var u=t(r,i,o,a)<e(r,i,o,a);return n?{value:u}:u}},"binary>":function(t,e,n){return function(r,i,o,a){var u=t(r,i,o,a)>e(r,i,o,a);return n?{value:u}:u}},"binary<=":function(t,e,n){return function(r,i,o,a){var u=t(r,i,o,a)<=e(r,i,o,a);return n?{value:u}:u}},"binary>=":function(t,e,n){return function(r,i,o,a){var u=t(r,i,o,a)>=e(r,i,o,a);return n?{value:u}:u}},"binary&&":function(t,e,n){return function(r,i,o,a){var u=t(r,i,o,a)&&e(r,i,o,a);return n?{value:u}:u}},"binary||":function(t,e,n){return function(r,i,o,a){var u=t(r,i,o,a)||e(r,i,o,a);return n?{value:u}:u}},"ternary?:":function(t,e,n,r){return function(i,o,a,u){var s=t(i,o,a,u)?e(i,o,a,u):n(i,o,a,u);return r?{value:s}:s}},value:function(t,e){return function(){return e?{context:void 0,name:void 0,value:t}:t}},identifier:function(t,e,n,r,i){return function(o,a,u,s){var c=a&&t in a?a:o;r&&1!==r&&c&&!c[t]&&(c[t]={});var l=c?c[t]:void 0;return e&&en(l,i),n?{context:c,name:t,value:l}:l}},computedMember:function(t,e,n,r,i){return function(o,a,u,s){var c,l,f=t(o,a,u,s);return null!=f&&(c=e(o,a,u,s),c=tn(c),Qe(c,i),r&&1!==r&&(rn(f),f&&!f[c]&&(f[c]={})),l=f[c],en(l,i)),n?{context:f,name:c,value:l}:l}},nonComputedMember:function(t,e,n,r,i,o){return function(a,u,s,c){var l=t(a,u,s,c);i&&1!==i&&(rn(l),l&&!l[e]&&(l[e]={}));var f=null!=l?l[e]:void 0;return(n||gn(e))&&en(f,o),r?{context:l,name:e,value:f}:f}},inputs:function(t,e){return function(n,r,i,o){return o?o[e]:t(n,r,i)}}};/**
	 * @constructor
	 */
var mo=function(t,e,n){this.lexer=t,this.$filter=e,this.options=n,this.ast=new go(t,n),this.astCompiler=n.csp?new vn(this.ast,e):new dn(this.ast,e)};mo.prototype={constructor:mo,parse:function(t){return this.astCompiler.compile(t,this.options.expensiveChecks)}};var yo=Object.prototype.valueOf,$o=n("$sce"),bo={HTML:"html",CSS:"css",URL:"url",
// RESOURCE_URL is a subtype of URL used in contexts where a privileged resource is sourced from a
// url.  (e.g. ng-include, script src, templateUrl)
RESOURCE_URL:"resourceUrl",JS:"js"},wo=n("$compile"),xo=e.document.createElement("a"),_o=Nn(e.location.href);Mn.$inject=["$document"],/* global currencyFilter: true,
	 dateFilter: true,
	 filterFilter: true,
	 jsonFilter: true,
	 limitToFilter: true,
	 lowercaseFilter: true,
	 numberFilter: true,
	 orderByFilter: true,
	 uppercaseFilter: true,
	 */
/**
	 * @ngdoc provider
	 * @name $filterProvider
	 * @description
	 *
	 * Filters are just functions which transform input to an output. However filters need to be
	 * Dependency Injected. To achieve this a filter definition consists of a factory function which is
	 * annotated with dependencies and is responsible for creating a filter function.
	 *
	 * <div class="alert alert-warning">
	 * **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.
	 * Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace
	 * your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores
	 * (`myapp_subsection_filterx`).
	 * </div>
	 *
	 * ```js
	 *   // Filter registration
	 *   function MyModule($provide, $filterProvider) {
	 *     // create a service to demonstrate injection (not always needed)
	 *     $provide.value('greet', function(name){
	 *       return 'Hello ' + name + '!';
	 *     });
	 *
	 *     // register a filter factory which uses the
	 *     // greet service to demonstrate DI.
	 *     $filterProvider.register('greet', function(greet){
	 *       // return the filter function which uses the greet service
	 *       // to generate salutation
	 *       return function(text) {
	 *         // filters need to be forgiving so check input validity
	 *         return text && greet(text) || text;
	 *       };
	 *     });
	 *   }
	 * ```
	 *
	 * The filter function is registered with the `$injector` under the filter name suffix with
	 * `Filter`.
	 *
	 * ```js
	 *   it('should be the same instance', inject(
	 *     function($filterProvider) {
	 *       $filterProvider.register('reverse', function(){
	 *         return ...;
	 *       });
	 *     },
	 *     function($filter, reverseFilter) {
	 *       expect($filter('reverse')).toBe(reverseFilter);
	 *     });
	 * ```
	 *
	 *
	 * For more information about how angular filters work, and how to create your own filters, see
	 * {@link guide/filter Filters} in the Angular Developer Guide.
	 */
/**
	 * @ngdoc service
	 * @name $filter
	 * @kind function
	 * @description
	 * Filters are used for formatting data displayed to the user.
	 *
	 * The general syntax in templates is as follows:
	 *
	 *         {{ expression [| filter_name[:parameter_value] ... ] }}
	 *
	 * @param {String} name Name of the filter function to retrieve
	 * @return {Function} the filter function
	 * @example
	   <example name="$filter" module="filterExample">
	     <file name="index.html">
	       <div ng-controller="MainCtrl">
	        <h3>{{ originalText }}</h3>
	        <h3>{{ filteredText }}</h3>
	       </div>
	     </file>
	
	     <file name="script.js">
	      angular.module('filterExample', [])
	      .controller('MainCtrl', function($scope, $filter) {
	        $scope.originalText = 'hello';
	        $scope.filteredText = $filter('uppercase')($scope.originalText);
	      });
	     </file>
	   </example>
	  */
Ln.$inject=["$provide"];var Co=22,So=".",Ao="0";/**
	 * @ngdoc filter
	 * @name currency
	 * @kind function
	 *
	 * @description
	 * Formats a number as a currency (ie $1,234.56). When no currency symbol is provided, default
	 * symbol for current locale is used.
	 *
	 * @param {number} amount Input to filter.
	 * @param {string=} symbol Currency symbol or identifier to be displayed.
	 * @param {number=} fractionSize Number of decimal places to round the amount to, defaults to default max fraction size for current locale
	 * @returns {string} Formatted number.
	 *
	 *
	 * @example
	   <example module="currencyExample">
	     <file name="index.html">
	       <script>
	         angular.module('currencyExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.amount = 1234.56;
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <input type="number" ng-model="amount" aria-label="amount"> <br>
	         default currency symbol ($): <span id="currency-default">{{amount | currency}}</span><br>
	         custom currency identifier (USD$): <span id="currency-custom">{{amount | currency:"USD$"}}</span>
	         no fractions (0): <span id="currency-no-fractions">{{amount | currency:"USD$":0}}</span>
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should init with 1234.56', function() {
	         expect(element(by.id('currency-default')).getText()).toBe('$1,234.56');
	         expect(element(by.id('currency-custom')).getText()).toBe('USD$1,234.56');
	         expect(element(by.id('currency-no-fractions')).getText()).toBe('USD$1,235');
	       });
	       it('should update', function() {
	         if (browser.params.browser == 'safari') {
	           // Safari does not understand the minus key. See
	           // https://github.com/angular/protractor/issues/481
	           return;
	         }
	         element(by.model('amount')).clear();
	         element(by.model('amount')).sendKeys('-1234');
	         expect(element(by.id('currency-default')).getText()).toBe('-$1,234.00');
	         expect(element(by.id('currency-custom')).getText()).toBe('-USD$1,234.00');
	         expect(element(by.id('currency-no-fractions')).getText()).toBe('-USD$1,234');
	       });
	     </file>
	   </example>
	 */
Hn.$inject=["$locale"],/**
	 * @ngdoc filter
	 * @name number
	 * @kind function
	 *
	 * @description
	 * Formats a number as text.
	 *
	 * If the input is null or undefined, it will just be returned.
	 * If the input is infinite (Infinity or -Infinity), the Infinity symbol '∞' or '-∞' is returned, respectively.
	 * If the input is not a number an empty string is returned.
	 *
	 *
	 * @param {number|string} number Number to format.
	 * @param {(number|string)=} fractionSize Number of decimal places to round the number to.
	 * If this is not provided then the fraction size is computed from the current locale's number
	 * formatting pattern. In the case of the default locale, it will be 3.
	 * @returns {string} Number rounded to `fractionSize` appropriately formatted based on the current
	 *                   locale (e.g., in the en_US locale it will have "." as the decimal separator and
	 *                   include "," group separators after each third digit).
	 *
	 * @example
	   <example module="numberFilterExample">
	     <file name="index.html">
	       <script>
	         angular.module('numberFilterExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.val = 1234.56789;
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <label>Enter number: <input ng-model='val'></label><br>
	         Default formatting: <span id='number-default'>{{val | number}}</span><br>
	         No fractions: <span>{{val | number:0}}</span><br>
	         Negative number: <span>{{-val | number:4}}</span>
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should format numbers', function() {
	         expect(element(by.id('number-default')).getText()).toBe('1,234.568');
	         expect(element(by.binding('val | number:0')).getText()).toBe('1,235');
	         expect(element(by.binding('-val | number:4')).getText()).toBe('-1,234.5679');
	       });
	
	       it('should update', function() {
	         element(by.model('val')).clear();
	         element(by.model('val')).sendKeys('3374.333');
	         expect(element(by.id('number-default')).getText()).toBe('3,374.333');
	         expect(element(by.binding('val | number:0')).getText()).toBe('3,374');
	         expect(element(by.binding('-val | number:4')).getText()).toBe('-3,374.3330');
	      });
	     </file>
	   </example>
	 */
Bn.$inject=["$locale"];var Eo={yyyy:Jn("FullYear",4,0,!1,!0),yy:Jn("FullYear",2,0,!0,!0),y:Jn("FullYear",1,0,!1,!0),MMMM:Yn("Month"),MMM:Yn("Month",!0),MM:Jn("Month",2,1),M:Jn("Month",1,1),LLLL:Yn("Month",!1,!0),dd:Jn("Date",2),d:Jn("Date",1),HH:Jn("Hours",2),H:Jn("Hours",1),hh:Jn("Hours",2,-12),h:Jn("Hours",1,-12),mm:Jn("Minutes",2),m:Jn("Minutes",1),ss:Jn("Seconds",2),s:Jn("Seconds",1),
// while ISO 8601 requires fractions to be prefixed with `.` or `,`
// we can be just safely rely on using `sss` since we currently don't support single or two digit fractions
sss:Jn("Milliseconds",3),EEEE:Yn("Day"),EEE:Yn("Day",!0),a:er,Z:Kn,ww:tr(2),w:tr(1),G:nr,GG:nr,GGG:nr,GGGG:rr},ko=/((?:[^yMLdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|m+|s+|a|Z|G+|w+))(.*)/,To=/^\-?\d+$/;/**
	 * @ngdoc filter
	 * @name date
	 * @kind function
	 *
	 * @description
	 *   Formats `date` to a string based on the requested `format`.
	 *
	 *   `format` string can be composed of the following elements:
	 *
	 *   * `'yyyy'`: 4 digit representation of year (e.g. AD 1 => 0001, AD 2010 => 2010)
	 *   * `'yy'`: 2 digit representation of year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)
	 *   * `'y'`: 1 digit representation of year, e.g. (AD 1 => 1, AD 199 => 199)
	 *   * `'MMMM'`: Month in year (January-December)
	 *   * `'MMM'`: Month in year (Jan-Dec)
	 *   * `'MM'`: Month in year, padded (01-12)
	 *   * `'M'`: Month in year (1-12)
	 *   * `'LLLL'`: Stand-alone month in year (January-December)
	 *   * `'dd'`: Day in month, padded (01-31)
	 *   * `'d'`: Day in month (1-31)
	 *   * `'EEEE'`: Day in Week,(Sunday-Saturday)
	 *   * `'EEE'`: Day in Week, (Sun-Sat)
	 *   * `'HH'`: Hour in day, padded (00-23)
	 *   * `'H'`: Hour in day (0-23)
	 *   * `'hh'`: Hour in AM/PM, padded (01-12)
	 *   * `'h'`: Hour in AM/PM, (1-12)
	 *   * `'mm'`: Minute in hour, padded (00-59)
	 *   * `'m'`: Minute in hour (0-59)
	 *   * `'ss'`: Second in minute, padded (00-59)
	 *   * `'s'`: Second in minute (0-59)
	 *   * `'sss'`: Millisecond in second, padded (000-999)
	 *   * `'a'`: AM/PM marker
	 *   * `'Z'`: 4 digit (+sign) representation of the timezone offset (-1200-+1200)
	 *   * `'ww'`: Week of year, padded (00-53). Week 01 is the week with the first Thursday of the year
	 *   * `'w'`: Week of year (0-53). Week 1 is the week with the first Thursday of the year
	 *   * `'G'`, `'GG'`, `'GGG'`: The abbreviated form of the era string (e.g. 'AD')
	 *   * `'GGGG'`: The long form of the era string (e.g. 'Anno Domini')
	 *
	 *   `format` string can also be one of the following predefined
	 *   {@link guide/i18n localizable formats}:
	 *
	 *   * `'medium'`: equivalent to `'MMM d, y h:mm:ss a'` for en_US locale
	 *     (e.g. Sep 3, 2010 12:05:08 PM)
	 *   * `'short'`: equivalent to `'M/d/yy h:mm a'` for en_US  locale (e.g. 9/3/10 12:05 PM)
	 *   * `'fullDate'`: equivalent to `'EEEE, MMMM d, y'` for en_US  locale
	 *     (e.g. Friday, September 3, 2010)
	 *   * `'longDate'`: equivalent to `'MMMM d, y'` for en_US  locale (e.g. September 3, 2010)
	 *   * `'mediumDate'`: equivalent to `'MMM d, y'` for en_US  locale (e.g. Sep 3, 2010)
	 *   * `'shortDate'`: equivalent to `'M/d/yy'` for en_US locale (e.g. 9/3/10)
	 *   * `'mediumTime'`: equivalent to `'h:mm:ss a'` for en_US locale (e.g. 12:05:08 PM)
	 *   * `'shortTime'`: equivalent to `'h:mm a'` for en_US locale (e.g. 12:05 PM)
	 *
	 *   `format` string can contain literal values. These need to be escaped by surrounding with single quotes (e.g.
	 *   `"h 'in the morning'"`). In order to output a single quote, escape it - i.e., two single quotes in a sequence
	 *   (e.g. `"h 'o''clock'"`).
	 *
	 * @param {(Date|number|string)} date Date to format either as Date object, milliseconds (string or
	 *    number) or various ISO 8601 datetime string formats (e.g. yyyy-MM-ddTHH:mm:ss.sssZ and its
	 *    shorter versions like yyyy-MM-ddTHH:mmZ, yyyy-MM-dd or yyyyMMddTHHmmssZ). If no timezone is
	 *    specified in the string input, the time is considered to be in the local timezone.
	 * @param {string=} format Formatting rules (see Description). If not specified,
	 *    `mediumDate` is used.
	 * @param {string=} timezone Timezone to be used for formatting. It understands UTC/GMT and the
	 *    continental US time zone abbreviations, but for general use, use a time zone offset, for
	 *    example, `'+0430'` (4 hours, 30 minutes east of the Greenwich meridian)
	 *    If not specified, the timezone of the browser will be used.
	 * @returns {string} Formatted string or the input if input is not recognized as date/millis.
	 *
	 * @example
	   <example>
	     <file name="index.html">
	       <span ng-non-bindable>{{1288323623006 | date:'medium'}}</span>:
	           <span>{{1288323623006 | date:'medium'}}</span><br>
	       <span ng-non-bindable>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span>:
	          <span>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span><br>
	       <span ng-non-bindable>{{1288323623006 | date:'MM/dd/yyyy @ h:mma'}}</span>:
	          <span>{{'1288323623006' | date:'MM/dd/yyyy @ h:mma'}}</span><br>
	       <span ng-non-bindable>{{1288323623006 | date:"MM/dd/yyyy 'at' h:mma"}}</span>:
	          <span>{{'1288323623006' | date:"MM/dd/yyyy 'at' h:mma"}}</span><br>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should format date', function() {
	         expect(element(by.binding("1288323623006 | date:'medium'")).getText()).
	            toMatch(/Oct 2\d, 2010 \d{1,2}:\d{2}:\d{2} (AM|PM)/);
	         expect(element(by.binding("1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'")).getText()).
	            toMatch(/2010\-10\-2\d \d{2}:\d{2}:\d{2} (\-|\+)?\d{4}/);
	         expect(element(by.binding("'1288323623006' | date:'MM/dd/yyyy @ h:mma'")).getText()).
	            toMatch(/10\/2\d\/2010 @ \d{1,2}:\d{2}(AM|PM)/);
	         expect(element(by.binding("'1288323623006' | date:\"MM/dd/yyyy 'at' h:mma\"")).getText()).
	            toMatch(/10\/2\d\/2010 at \d{1,2}:\d{2}(AM|PM)/);
	       });
	     </file>
	   </example>
	 */
ir.$inject=["$locale"];/**
	 * @ngdoc filter
	 * @name lowercase
	 * @kind function
	 * @description
	 * Converts string to lowercase.
	 * @see angular.lowercase
	 */
var Oo=g(Rr),Ro=g(jr);/**
	 * @ngdoc filter
	 * @name orderBy
	 * @kind function
	 *
	 * @description
	 * Orders a specified `array` by the `expression` predicate. It is ordered alphabetically
	 * for strings and numerically for numbers. Note: if you notice numbers are not being sorted
	 * as expected, make sure they are actually being saved as numbers and not strings.
	 * Array-like values (e.g. NodeLists, jQuery objects, TypedArrays, Strings, etc) are also supported.
	 *
	 * @param {Array} array The array (or array-like object) to sort.
	 * @param {function(*)|string|Array.<(function(*)|string)>=} expression A predicate to be
	 *    used by the comparator to determine the order of elements.
	 *
	 *    Can be one of:
	 *
	 *    - `function`: Getter function. The result of this function will be sorted using the
	 *      `<`, `===`, `>` operator.
	 *    - `string`: An Angular expression. The result of this expression is used to compare elements
	 *      (for example `name` to sort by a property called `name` or `name.substr(0, 3)` to sort by
	 *      3 first characters of a property called `name`). The result of a constant expression
	 *      is interpreted as a property name to be used in comparisons (for example `"special name"`
	 *      to sort object by the value of their `special name` property). An expression can be
	 *      optionally prefixed with `+` or `-` to control ascending or descending sort order
	 *      (for example, `+name` or `-name`). If no property is provided, (e.g. `'+'`) then the array
	 *      element itself is used to compare where sorting.
	 *    - `Array`: An array of function or string predicates. The first predicate in the array
	 *      is used for sorting, but when two items are equivalent, the next predicate is used.
	 *
	 *    If the predicate is missing or empty then it defaults to `'+'`.
	 *
	 * @param {boolean=} reverse Reverse the order of the array.
	 * @returns {Array} Sorted copy of the source array.
	 *
	 *
	 * @example
	 * The example below demonstrates a simple ngRepeat, where the data is sorted
	 * by age in descending order (predicate is set to `'-age'`).
	 * `reverse` is not set, which means it defaults to `false`.
	   <example module="orderByExample">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	         <table class="friend">
	           <tr>
	             <th>Name</th>
	             <th>Phone Number</th>
	             <th>Age</th>
	           </tr>
	           <tr ng-repeat="friend in friends | orderBy:'-age'">
	             <td>{{friend.name}}</td>
	             <td>{{friend.phone}}</td>
	             <td>{{friend.age}}</td>
	           </tr>
	         </table>
	       </div>
	     </file>
	     <file name="script.js">
	       angular.module('orderByExample', [])
	         .controller('ExampleController', ['$scope', function($scope) {
	           $scope.friends =
	               [{name:'John', phone:'555-1212', age:10},
	                {name:'Mary', phone:'555-9876', age:19},
	                {name:'Mike', phone:'555-4321', age:21},
	                {name:'Adam', phone:'555-5678', age:35},
	                {name:'Julie', phone:'555-8765', age:29}];
	         }]);
	     </file>
	   </example>
	 *
	 * The predicate and reverse parameters can be controlled dynamically through scope properties,
	 * as shown in the next example.
	 * @example
	   <example module="orderByExample">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	         <pre>Sorting predicate = {{predicate}}; reverse = {{reverse}}</pre>
	         <hr/>
	         <button ng-click="predicate=''">Set to unsorted</button>
	         <table class="friend">
	           <tr>
	            <th>
	                <button ng-click="order('name')">Name</button>
	                <span class="sortorder" ng-show="predicate === 'name'" ng-class="{reverse:reverse}"></span>
	            </th>
	            <th>
	                <button ng-click="order('phone')">Phone Number</button>
	                <span class="sortorder" ng-show="predicate === 'phone'" ng-class="{reverse:reverse}"></span>
	            </th>
	            <th>
	                <button ng-click="order('age')">Age</button>
	                <span class="sortorder" ng-show="predicate === 'age'" ng-class="{reverse:reverse}"></span>
	            </th>
	           </tr>
	           <tr ng-repeat="friend in friends | orderBy:predicate:reverse">
	             <td>{{friend.name}}</td>
	             <td>{{friend.phone}}</td>
	             <td>{{friend.age}}</td>
	           </tr>
	         </table>
	       </div>
	     </file>
	     <file name="script.js">
	       angular.module('orderByExample', [])
	         .controller('ExampleController', ['$scope', function($scope) {
	           $scope.friends =
	               [{name:'John', phone:'555-1212', age:10},
	                {name:'Mary', phone:'555-9876', age:19},
	                {name:'Mike', phone:'555-4321', age:21},
	                {name:'Adam', phone:'555-5678', age:35},
	                {name:'Julie', phone:'555-8765', age:29}];
	           $scope.predicate = 'age';
	           $scope.reverse = true;
	           $scope.order = function(predicate) {
	             $scope.reverse = ($scope.predicate === predicate) ? !$scope.reverse : false;
	             $scope.predicate = predicate;
	           };
	         }]);
	      </file>
	     <file name="style.css">
	       .sortorder:after {
	         content: '\25b2';
	       }
	       .sortorder.reverse:after {
	         content: '\25bc';
	       }
	     </file>
	   </example>
	 *
	 * It's also possible to call the orderBy filter manually, by injecting `$filter`, retrieving the
	 * filter routine with `$filter('orderBy')`, and calling the returned filter routine with the
	 * desired parameters.
	 *
	 * Example:
	 *
	 * @example
	  <example module="orderByExample">
	    <file name="index.html">
	    <div ng-controller="ExampleController">
	      <pre>Sorting predicate = {{predicate}}; reverse = {{reverse}}</pre>
	      <table class="friend">
	        <tr>
	          <th>
	              <button ng-click="order('name')">Name</button>
	              <span class="sortorder" ng-show="predicate === 'name'" ng-class="{reverse:reverse}"></span>
	          </th>
	          <th>
	              <button ng-click="order('phone')">Phone Number</button>
	              <span class="sortorder" ng-show="predicate === 'phone'" ng-class="{reverse:reverse}"></span>
	          </th>
	          <th>
	              <button ng-click="order('age')">Age</button>
	              <span class="sortorder" ng-show="predicate === 'age'" ng-class="{reverse:reverse}"></span>
	          </th>
	        </tr>
	        <tr ng-repeat="friend in friends">
	          <td>{{friend.name}}</td>
	          <td>{{friend.phone}}</td>
	          <td>{{friend.age}}</td>
	        </tr>
	      </table>
	    </div>
	    </file>
	
	    <file name="script.js">
	      angular.module('orderByExample', [])
	        .controller('ExampleController', ['$scope', '$filter', function($scope, $filter) {
	          var orderBy = $filter('orderBy');
	          $scope.friends = [
	            { name: 'John',    phone: '555-1212',    age: 10 },
	            { name: 'Mary',    phone: '555-9876',    age: 19 },
	            { name: 'Mike',    phone: '555-4321',    age: 21 },
	            { name: 'Adam',    phone: '555-5678',    age: 35 },
	            { name: 'Julie',   phone: '555-8765',    age: 29 }
	          ];
	          $scope.order = function(predicate) {
	            $scope.predicate = predicate;
	            $scope.reverse = ($scope.predicate === predicate) ? !$scope.reverse : false;
	            $scope.friends = orderBy($scope.friends, predicate, $scope.reverse);
	          };
	          $scope.order('age', true);
	        }]);
	    </file>
	
	    <file name="style.css">
	       .sortorder:after {
	         content: '\25b2';
	       }
	       .sortorder.reverse:after {
	         content: '\25bc';
	       }
	    </file>
	</example>
	 */
ur.$inject=["$parse"];/**
	 * @ngdoc directive
	 * @name a
	 * @restrict E
	 *
	 * @description
	 * Modifies the default behavior of the html A tag so that the default action is prevented when
	 * the href attribute is empty.
	 *
	 * This change permits the easy creation of action links with the `ngClick` directive
	 * without changing the location or causing page reloads, e.g.:
	 * `<a href="" ng-click="list.addItem()">Add Item</a>`
	 */
var jo=g({restrict:"E",compile:function(t,e){if(!e.href&&!e.xlinkHref)return function(t,e){
// If the linked element is not an anchor tag anymore, do nothing
if("a"===e[0].nodeName.toLowerCase()){
// SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.
var n="[object SVGAnimatedString]"===Vr.call(e.prop("href"))?"xlink:href":"href";e.on("click",function(t){
// if we have no href url, then don't navigate anywhere.
e.attr(n)||t.preventDefault()})}}}}),No={};
// boolean attrs are evaluated
i(Si,function(t,e){function n(t,n,i){t.$watch(i[r],function(t){i.$set(e,!!t)})}
// binding to multiple is not supported
if("multiple"!=t){var r=ge("ng-"+e),i=n;"checked"===t&&(i=function(t,e,i){
// ensuring ngChecked doesn't interfere with ngModel when both are set on the same input
i.ngModel!==i[r]&&n(t,e,i)}),No[r]=function(){return{restrict:"A",priority:100,link:i}}}}),
// aliased input attrs are evaluated
i(Ei,function(t,e){No[e]=function(){return{priority:100,link:function(t,n,r){
//special case ngPattern when a literal regular expression value
//is used as the expression (this way we don't have to watch anything).
if("ngPattern"===e&&"/"==r.ngPattern.charAt(0)){var i=r.ngPattern.match(kr);if(i)return void r.$set("ngPattern",new RegExp(i[1],i[2]))}t.$watch(r[e],function(t){r.$set(e,t)})}}}}),
// ng-src, ng-srcset, ng-href are interpolated
i(["src","srcset","href"],function(t){var e=ge("ng-"+t);No[e]=function(){return{priority:99,// it needs to run after the attributes are interpolated
link:function(n,r,i){var o=t,a=t;"href"===t&&"[object SVGAnimatedString]"===Vr.call(r.prop("href"))&&(a="xlinkHref",i.$attr[a]="xlink:href",o=null),i.$observe(e,function(e){
// on IE, if "ng:src" directive declaration is used and "src" attribute doesn't exist
// then calling element.setAttribute('src', 'foo') doesn't do anything, so we need
// to set the property as well to achieve the desired effect.
// we use attr[attrName] value since $set can sanitize the url.
return e?(i.$set(a,e),void(Dr&&o&&r.prop(o,i[a]))):void("href"===t&&i.$set(a,null))})}}}});/* global -nullFormCtrl, -SUBMITTED_CLASS, addSetValidityMethod: true
	 */
var Po={$addControl:d,$$renameControl:cr,$removeControl:d,$setValidity:d,$setDirty:d,$setPristine:d,$setSubmitted:d},Do="ng-submitted";/**
	 * @ngdoc type
	 * @name form.FormController
	 *
	 * @property {boolean} $pristine True if user has not interacted with the form yet.
	 * @property {boolean} $dirty True if user has already interacted with the form.
	 * @property {boolean} $valid True if all of the containing forms and controls are valid.
	 * @property {boolean} $invalid True if at least one containing control or form is invalid.
	 * @property {boolean} $pending True if at least one containing control or form is pending.
	 * @property {boolean} $submitted True if user has submitted the form even if its invalid.
	 *
	 * @property {Object} $error Is an object hash, containing references to controls or
	 *  forms with failing validators, where:
	 *
	 *  - keys are validation tokens (error names),
	 *  - values are arrays of controls or forms that have a failing validator for given error name.
	 *
	 *  Built-in validation tokens:
	 *
	 *  - `email`
	 *  - `max`
	 *  - `maxlength`
	 *  - `min`
	 *  - `minlength`
	 *  - `number`
	 *  - `pattern`
	 *  - `required`
	 *  - `url`
	 *  - `date`
	 *  - `datetimelocal`
	 *  - `time`
	 *  - `week`
	 *  - `month`
	 *
	 * @description
	 * `FormController` keeps track of all its controls and nested forms as well as the state of them,
	 * such as being valid/invalid or dirty/pristine.
	 *
	 * Each {@link ng.directive:form form} directive creates an instance
	 * of `FormController`.
	 *
	 */
//asks for $scope to fool the BC controller module
lr.$inject=["$element","$attrs","$scope","$animate","$interpolate"];/**
	 * @ngdoc directive
	 * @name ngForm
	 * @restrict EAC
	 *
	 * @description
	 * Nestable alias of {@link ng.directive:form `form`} directive. HTML
	 * does not allow nesting of form elements. It is useful to nest forms, for example if the validity of a
	 * sub-group of controls needs to be determined.
	 *
	 * Note: the purpose of `ngForm` is to group controls,
	 * but not to be a replacement for the `<form>` tag with all of its capabilities
	 * (e.g. posting to the server, ...).
	 *
	 * @param {string=} ngForm|name Name of the form. If specified, the form controller will be published into
	 *                       related scope, under this name.
	 *
	 */
/**
	 * @ngdoc directive
	 * @name form
	 * @restrict E
	 *
	 * @description
	 * Directive that instantiates
	 * {@link form.FormController FormController}.
	 *
	 * If the `name` attribute is specified, the form controller is published onto the current scope under
	 * this name.
	 *
	 * # Alias: {@link ng.directive:ngForm `ngForm`}
	 *
	 * In Angular, forms can be nested. This means that the outer form is valid when all of the child
	 * forms are valid as well. However, browsers do not allow nesting of `<form>` elements, so
	 * Angular provides the {@link ng.directive:ngForm `ngForm`} directive, which behaves identically to
	 * `form` but can be nested. Nested forms can be useful, for example, if the validity of a sub-group
	 * of controls needs to be determined.
	 *
	 * # CSS classes
	 *  - `ng-valid` is set if the form is valid.
	 *  - `ng-invalid` is set if the form is invalid.
	 *  - `ng-pending` is set if the form is pending.
	 *  - `ng-pristine` is set if the form is pristine.
	 *  - `ng-dirty` is set if the form is dirty.
	 *  - `ng-submitted` is set if the form was submitted.
	 *
	 * Keep in mind that ngAnimate can detect each of these classes when added and removed.
	 *
	 *
	 * # Submitting a form and preventing the default action
	 *
	 * Since the role of forms in client-side Angular applications is different than in classical
	 * roundtrip apps, it is desirable for the browser not to translate the form submission into a full
	 * page reload that sends the data to the server. Instead some javascript logic should be triggered
	 * to handle the form submission in an application-specific way.
	 *
	 * For this reason, Angular prevents the default action (form submission to the server) unless the
	 * `<form>` element has an `action` attribute specified.
	 *
	 * You can use one of the following two ways to specify what javascript method should be called when
	 * a form is submitted:
	 *
	 * - {@link ng.directive:ngSubmit ngSubmit} directive on the form element
	 * - {@link ng.directive:ngClick ngClick} directive on the first
	  *  button or input field of type submit (input[type=submit])
	 *
	 * To prevent double execution of the handler, use only one of the {@link ng.directive:ngSubmit ngSubmit}
	 * or {@link ng.directive:ngClick ngClick} directives.
	 * This is because of the following form submission rules in the HTML specification:
	 *
	 * - If a form has only one input field then hitting enter in this field triggers form submit
	 * (`ngSubmit`)
	 * - if a form has 2+ input fields and no buttons or input[type=submit] then hitting enter
	 * doesn't trigger submit
	 * - if a form has one or more input fields and one or more buttons or input[type=submit] then
	 * hitting enter in any of the input fields will trigger the click handler on the *first* button or
	 * input[type=submit] (`ngClick`) *and* a submit handler on the enclosing form (`ngSubmit`)
	 *
	 * Any pending `ngModelOptions` changes will take place immediately when an enclosing form is
	 * submitted. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`
	 * to have access to the updated model.
	 *
	 * ## Animation Hooks
	 *
	 * Animations in ngForm are triggered when any of the associated CSS classes are added and removed.
	 * These classes are: `.ng-pristine`, `.ng-dirty`, `.ng-invalid` and `.ng-valid` as well as any
	 * other validations that are performed within the form. Animations in ngForm are similar to how
	 * they work in ngClass and animations can be hooked into using CSS transitions, keyframes as well
	 * as JS animations.
	 *
	 * The following example shows a simple way to utilize CSS transitions to style a form element
	 * that has been rendered as invalid after it has been validated:
	 *
	 * <pre>
	 * //be sure to include ngAnimate as a module to hook into more
	 * //advanced animations
	 * .my-form {
	 *   transition:0.5s linear all;
	 *   background: white;
	 * }
	 * .my-form.ng-invalid {
	 *   background: red;
	 *   color:white;
	 * }
	 * </pre>
	 *
	 * @example
	    <example deps="angular-animate.js" animations="true" fixBase="true" module="formExample">
	      <file name="index.html">
	       <script>
	         angular.module('formExample', [])
	           .controller('FormController', ['$scope', function($scope) {
	             $scope.userType = 'guest';
	           }]);
	       </script>
	       <style>
	        .my-form {
	          transition:all linear 0.5s;
	          background: transparent;
	        }
	        .my-form.ng-invalid {
	          background: red;
	        }
	       </style>
	       <form name="myForm" ng-controller="FormController" class="my-form">
	         userType: <input name="input" ng-model="userType" required>
	         <span class="error" ng-show="myForm.input.$error.required">Required!</span><br>
	         <code>userType = {{userType}}</code><br>
	         <code>myForm.input.$valid = {{myForm.input.$valid}}</code><br>
	         <code>myForm.input.$error = {{myForm.input.$error}}</code><br>
	         <code>myForm.$valid = {{myForm.$valid}}</code><br>
	         <code>myForm.$error.required = {{!!myForm.$error.required}}</code><br>
	        </form>
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should initialize to model', function() {
	          var userType = element(by.binding('userType'));
	          var valid = element(by.binding('myForm.input.$valid'));
	
	          expect(userType.getText()).toContain('guest');
	          expect(valid.getText()).toContain('true');
	        });
	
	        it('should be invalid if empty', function() {
	          var userType = element(by.binding('userType'));
	          var valid = element(by.binding('myForm.input.$valid'));
	          var userInput = element(by.model('userType'));
	
	          userInput.clear();
	          userInput.sendKeys('');
	
	          expect(userType.getText()).toEqual('userType =');
	          expect(valid.getText()).toContain('false');
	        });
	      </file>
	    </example>
	 *
	 * @param {string=} name Name of the form. If specified, the form controller will be published into
	 *                       related scope, under this name.
	 */
var Mo=function(t){return["$timeout","$parse",function(e,n){function r(t){return""===t?n('this[""]').assign:n(t).assign||d}var i={name:"form",restrict:t?"EAC":"E",require:["form","^^?form"],//first is the form's own ctrl, second is an optional parent form
controller:lr,compile:function(n,i){
// Setup initial state of the control
n.addClass(ya).addClass(ga);var o=i.name?"name":!(!t||!i.ngForm)&&"ngForm";return{pre:function(t,n,i,a){var u=a[0];
// if `action` attr is not present on the form, prevent the default action (submission)
if(!("action"in i)){
// we can't use jq events because if a form is destroyed during submission the default
// action is not prevented. see #1238
//
// IE 9 is not affected because it doesn't fire a submit event and try to do a full
// page reload if the form was destroyed by submission of the form via a click handler
// on a button in the form. Looks like an IE9 specific bug.
var s=function(e){t.$apply(function(){u.$commitViewValue(),u.$setSubmitted()}),e.preventDefault()};hi(n[0],"submit",s),
// unregister the preventDefault listener so that we don't not leak memory but in a
// way that will achieve the prevention of the default action.
n.on("$destroy",function(){e(function(){pi(n[0],"submit",s)},0,!1)})}var c=a[1]||u.$$parentForm;c.$addControl(u);var f=o?r(u.$name):d;o&&(f(t,u),i.$observe(o,function(e){u.$name!==e&&(f(t,void 0),u.$$parentForm.$$renameControl(u,e),(f=r(u.$name))(t,u))})),n.on("$destroy",function(){u.$$parentForm.$removeControl(u),f(t,void 0),l(u,Po)})}}}};return i}]},Io=Mo(),Lo=Mo(!0),qo=/^\d{4,}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+(?:[+-][0-2]\d:[0-5]\d|Z)$/,Uo=/^[a-z][a-z\d.+-]*:\/*(?:[^:@]+(?::[^@]+)?@)?(?:[^\s:\/?#]+|\[[a-f\d:]+\])(?::\d+)?(?:\/[^?#]*)?(?:\?[^#]*)?(?:#.*)?$/i,Fo=/^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i,Vo=/^\s*(\-|\+)?(\d+|(\d*(\.\d*)))([eE][+-]?\d+)?\s*$/,Ho=/^(\d{4,})-(\d{2})-(\d{2})$/,Bo=/^(\d{4,})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,Wo=/^(\d{4,})-W(\d\d)$/,zo=/^(\d{4,})-(\d\d)$/,Go=/^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,Xo="keydown wheel mousedown",Jo=gt();i("date,datetime-local,month,time,week".split(","),function(t){Jo[t]=!0});var Yo={/**
	   * @ngdoc input
	   * @name input[text]
	   *
	   * @description
	   * Standard HTML text input with angular data binding, inherited by most of the `input` elements.
	   *
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} required Adds `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	   *    minlength.
	   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
	   *    any length.
	   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
	   *    that contains the regular expression body that will be converted to a regular expression
	   *    as in the ngPattern directive.
	   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
	   *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
	   *    If the expression evaluates to a RegExp object, then this is used directly.
	   *    If the expression evaluates to a string, then it will be converted to a RegExp
	   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	   *    `new RegExp('^abc$')`.<br />
	   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	   *    start at the index of the last search's match, thus not taking the whole input value into
	   *    account.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
	   *    This parameter is ignored for input[type=password] controls, which will never trim the
	   *    input.
	   *
	   * @example
	      <example name="text-input-directive" module="textInputExample">
	        <file name="index.html">
	         <script>
	           angular.module('textInputExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.example = {
	                 text: 'guest',
	                 word: /^\s*\w*\s*$/
	               };
	             }]);
	         </script>
	         <form name="myForm" ng-controller="ExampleController">
	           <label>Single word:
	             <input type="text" name="input" ng-model="example.text"
	                    ng-pattern="example.word" required ng-trim="false">
	           </label>
	           <div role="alert">
	             <span class="error" ng-show="myForm.input.$error.required">
	               Required!</span>
	             <span class="error" ng-show="myForm.input.$error.pattern">
	               Single word only!</span>
	           </div>
	           <tt>text = {{example.text}}</tt><br/>
	           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	          </form>
	        </file>
	        <file name="protractor.js" type="protractor">
	          var text = element(by.binding('example.text'));
	          var valid = element(by.binding('myForm.input.$valid'));
	          var input = element(by.model('example.text'));
	
	          it('should initialize to model', function() {
	            expect(text.getText()).toContain('guest');
	            expect(valid.getText()).toContain('true');
	          });
	
	          it('should be invalid if empty', function() {
	            input.clear();
	            input.sendKeys('');
	
	            expect(text.getText()).toEqual('text =');
	            expect(valid.getText()).toContain('false');
	          });
	
	          it('should be invalid if multi word', function() {
	            input.clear();
	            input.sendKeys('hello world');
	
	            expect(valid.getText()).toContain('false');
	          });
	        </file>
	      </example>
	   */
text:hr,/**
	     * @ngdoc input
	     * @name input[date]
	     *
	     * @description
	     * Input with date validation and transformation. In browsers that do not yet support
	     * the HTML5 date input, a text element will be used. In that case, text must be entered in a valid ISO-8601
	     * date format (yyyy-MM-dd), for example: `2009-01-06`. Since many
	     * modern browsers do not yet support this input type, it is important to provide cues to users on the
	     * expected input format via a placeholder or label.
	     *
	     * The model must always be a Date object, otherwise Angular will throw an error.
	     * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
	     *
	     * The timezone to be used to read/write the `Date` instance in the model can be defined using
	     * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
	     *
	     * @param {string} ngModel Assignable angular expression to data-bind to.
	     * @param {string=} name Property name of the form under which the control is published.
	     * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be a
	     *   valid ISO date string (yyyy-MM-dd). You can also use interpolation inside this attribute
	     *   (e.g. `min="{{minDate | date:'yyyy-MM-dd'}}"`). Note that `min` will also add native HTML5
	     *   constraint validation.
	     * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must be
	     *   a valid ISO date string (yyyy-MM-dd). You can also use interpolation inside this attribute
	     *   (e.g. `max="{{maxDate | date:'yyyy-MM-dd'}}"`). Note that `max` will also add native HTML5
	     *   constraint validation.
	     * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO date string
	     *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
	     * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO date string
	     *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
	     * @param {string=} required Sets `required` validation error key if the value is not entered.
	     * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	     *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	     *    `required` when you want to data-bind to the `required` attribute.
	     * @param {string=} ngChange Angular expression to be executed when input changes due to user
	     *    interaction with the input element.
	     *
	     * @example
	     <example name="date-input-directive" module="dateInputExample">
	     <file name="index.html">
	       <script>
	          angular.module('dateInputExample', [])
	            .controller('DateController', ['$scope', function($scope) {
	              $scope.example = {
	                value: new Date(2013, 9, 22)
	              };
	            }]);
	       </script>
	       <form name="myForm" ng-controller="DateController as dateCtrl">
	          <label for="exampleInput">Pick a date in 2013:</label>
	          <input type="date" id="exampleInput" name="input" ng-model="example.value"
	              placeholder="yyyy-MM-dd" min="2013-01-01" max="2013-12-31" required />
	          <div role="alert">
	            <span class="error" ng-show="myForm.input.$error.required">
	                Required!</span>
	            <span class="error" ng-show="myForm.input.$error.date">
	                Not a valid date!</span>
	           </div>
	           <tt>value = {{example.value | date: "yyyy-MM-dd"}}</tt><br/>
	           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	       </form>
	     </file>
	     <file name="protractor.js" type="protractor">
	        var value = element(by.binding('example.value | date: "yyyy-MM-dd"'));
	        var valid = element(by.binding('myForm.input.$valid'));
	        var input = element(by.model('example.value'));
	
	        // currently protractor/webdriver does not support
	        // sending keys to all known HTML5 input controls
	        // for various browsers (see https://github.com/angular/protractor/issues/562).
	        function setInput(val) {
	          // set the value of the element and force validation.
	          var scr = "var ipt = document.getElementById('exampleInput'); " +
	          "ipt.value = '" + val + "';" +
	          "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
	          browser.executeScript(scr);
	        }
	
	        it('should initialize to model', function() {
	          expect(value.getText()).toContain('2013-10-22');
	          expect(valid.getText()).toContain('myForm.input.$valid = true');
	        });
	
	        it('should be invalid if empty', function() {
	          setInput('');
	          expect(value.getText()).toEqual('value =');
	          expect(valid.getText()).toContain('myForm.input.$valid = false');
	        });
	
	        it('should be invalid if over max', function() {
	          setInput('2015-01-01');
	          expect(value.getText()).toContain('');
	          expect(valid.getText()).toContain('myForm.input.$valid = false');
	        });
	     </file>
	     </example>
	     */
date:gr("date",Ho,vr(Ho,["yyyy","MM","dd"]),"yyyy-MM-dd"),/**
	    * @ngdoc input
	    * @name input[datetime-local]
	    *
	    * @description
	    * Input with datetime validation and transformation. In browsers that do not yet support
	    * the HTML5 date input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
	    * local datetime format (yyyy-MM-ddTHH:mm:ss), for example: `2010-12-28T14:57:00`.
	    *
	    * The model must always be a Date object, otherwise Angular will throw an error.
	    * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
	    *
	    * The timezone to be used to read/write the `Date` instance in the model can be defined using
	    * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
	    *
	    * @param {string} ngModel Assignable angular expression to data-bind to.
	    * @param {string=} name Property name of the form under which the control is published.
	    * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
	    *   This must be a valid ISO datetime format (yyyy-MM-ddTHH:mm:ss). You can also use interpolation
	    *   inside this attribute (e.g. `min="{{minDatetimeLocal | date:'yyyy-MM-ddTHH:mm:ss'}}"`).
	    *   Note that `min` will also add native HTML5 constraint validation.
	    * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
	    *   This must be a valid ISO datetime format (yyyy-MM-ddTHH:mm:ss). You can also use interpolation
	    *   inside this attribute (e.g. `max="{{maxDatetimeLocal | date:'yyyy-MM-ddTHH:mm:ss'}}"`).
	    *   Note that `max` will also add native HTML5 constraint validation.
	    * @param {(date|string)=} ngMin Sets the `min` validation error key to the Date / ISO datetime string
	    *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
	    * @param {(date|string)=} ngMax Sets the `max` validation error key to the Date / ISO datetime string
	    *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
	    * @param {string=} required Sets `required` validation error key if the value is not entered.
	    * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	    *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	    *    `required` when you want to data-bind to the `required` attribute.
	    * @param {string=} ngChange Angular expression to be executed when input changes due to user
	    *    interaction with the input element.
	    *
	    * @example
	    <example name="datetimelocal-input-directive" module="dateExample">
	    <file name="index.html">
	      <script>
	        angular.module('dateExample', [])
	          .controller('DateController', ['$scope', function($scope) {
	            $scope.example = {
	              value: new Date(2010, 11, 28, 14, 57)
	            };
	          }]);
	      </script>
	      <form name="myForm" ng-controller="DateController as dateCtrl">
	        <label for="exampleInput">Pick a date between in 2013:</label>
	        <input type="datetime-local" id="exampleInput" name="input" ng-model="example.value"
	            placeholder="yyyy-MM-ddTHH:mm:ss" min="2001-01-01T00:00:00" max="2013-12-31T00:00:00" required />
	        <div role="alert">
	          <span class="error" ng-show="myForm.input.$error.required">
	              Required!</span>
	          <span class="error" ng-show="myForm.input.$error.datetimelocal">
	              Not a valid date!</span>
	        </div>
	        <tt>value = {{example.value | date: "yyyy-MM-ddTHH:mm:ss"}}</tt><br/>
	        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	      </form>
	    </file>
	    <file name="protractor.js" type="protractor">
	      var value = element(by.binding('example.value | date: "yyyy-MM-ddTHH:mm:ss"'));
	      var valid = element(by.binding('myForm.input.$valid'));
	      var input = element(by.model('example.value'));
	
	      // currently protractor/webdriver does not support
	      // sending keys to all known HTML5 input controls
	      // for various browsers (https://github.com/angular/protractor/issues/562).
	      function setInput(val) {
	        // set the value of the element and force validation.
	        var scr = "var ipt = document.getElementById('exampleInput'); " +
	        "ipt.value = '" + val + "';" +
	        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
	        browser.executeScript(scr);
	      }
	
	      it('should initialize to model', function() {
	        expect(value.getText()).toContain('2010-12-28T14:57:00');
	        expect(valid.getText()).toContain('myForm.input.$valid = true');
	      });
	
	      it('should be invalid if empty', function() {
	        setInput('');
	        expect(value.getText()).toEqual('value =');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	
	      it('should be invalid if over max', function() {
	        setInput('2015-01-01T23:59:00');
	        expect(value.getText()).toContain('');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	    </file>
	    </example>
	    */
"datetime-local":gr("datetimelocal",Bo,vr(Bo,["yyyy","MM","dd","HH","mm","ss","sss"]),"yyyy-MM-ddTHH:mm:ss.sss"),/**
	   * @ngdoc input
	   * @name input[time]
	   *
	   * @description
	   * Input with time validation and transformation. In browsers that do not yet support
	   * the HTML5 time input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
	   * local time format (HH:mm:ss), for example: `14:57:00`. Model must be a Date object. This binding will always output a
	   * Date object to the model of January 1, 1970, or local date `new Date(1970, 0, 1, HH, mm, ss)`.
	   *
	   * The model must always be a Date object, otherwise Angular will throw an error.
	   * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
	   *
	   * The timezone to be used to read/write the `Date` instance in the model can be defined using
	   * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
	   *   This must be a valid ISO time format (HH:mm:ss). You can also use interpolation inside this
	   *   attribute (e.g. `min="{{minTime | date:'HH:mm:ss'}}"`). Note that `min` will also add
	   *   native HTML5 constraint validation.
	   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
	   *   This must be a valid ISO time format (HH:mm:ss). You can also use interpolation inside this
	   *   attribute (e.g. `max="{{maxTime | date:'HH:mm:ss'}}"`). Note that `max` will also add
	   *   native HTML5 constraint validation.
	   * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO time string the
	   *   `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
	   * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO time string the
	   *   `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
	   * @param {string=} required Sets `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	   <example name="time-input-directive" module="timeExample">
	   <file name="index.html">
	     <script>
	      angular.module('timeExample', [])
	        .controller('DateController', ['$scope', function($scope) {
	          $scope.example = {
	            value: new Date(1970, 0, 1, 14, 57, 0)
	          };
	        }]);
	     </script>
	     <form name="myForm" ng-controller="DateController as dateCtrl">
	        <label for="exampleInput">Pick a time between 8am and 5pm:</label>
	        <input type="time" id="exampleInput" name="input" ng-model="example.value"
	            placeholder="HH:mm:ss" min="08:00:00" max="17:00:00" required />
	        <div role="alert">
	          <span class="error" ng-show="myForm.input.$error.required">
	              Required!</span>
	          <span class="error" ng-show="myForm.input.$error.time">
	              Not a valid date!</span>
	        </div>
	        <tt>value = {{example.value | date: "HH:mm:ss"}}</tt><br/>
	        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	     </form>
	   </file>
	   <file name="protractor.js" type="protractor">
	      var value = element(by.binding('example.value | date: "HH:mm:ss"'));
	      var valid = element(by.binding('myForm.input.$valid'));
	      var input = element(by.model('example.value'));
	
	      // currently protractor/webdriver does not support
	      // sending keys to all known HTML5 input controls
	      // for various browsers (https://github.com/angular/protractor/issues/562).
	      function setInput(val) {
	        // set the value of the element and force validation.
	        var scr = "var ipt = document.getElementById('exampleInput'); " +
	        "ipt.value = '" + val + "';" +
	        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
	        browser.executeScript(scr);
	      }
	
	      it('should initialize to model', function() {
	        expect(value.getText()).toContain('14:57:00');
	        expect(valid.getText()).toContain('myForm.input.$valid = true');
	      });
	
	      it('should be invalid if empty', function() {
	        setInput('');
	        expect(value.getText()).toEqual('value =');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	
	      it('should be invalid if over max', function() {
	        setInput('23:59:00');
	        expect(value.getText()).toContain('');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	   </file>
	   </example>
	   */
time:gr("time",Go,vr(Go,["HH","mm","ss","sss"]),"HH:mm:ss.sss"),/**
	    * @ngdoc input
	    * @name input[week]
	    *
	    * @description
	    * Input with week-of-the-year validation and transformation to Date. In browsers that do not yet support
	    * the HTML5 week input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
	    * week format (yyyy-W##), for example: `2013-W02`.
	    *
	    * The model must always be a Date object, otherwise Angular will throw an error.
	    * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
	    *
	    * The timezone to be used to read/write the `Date` instance in the model can be defined using
	    * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
	    *
	    * @param {string} ngModel Assignable angular expression to data-bind to.
	    * @param {string=} name Property name of the form under which the control is published.
	    * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
	    *   This must be a valid ISO week format (yyyy-W##). You can also use interpolation inside this
	    *   attribute (e.g. `min="{{minWeek | date:'yyyy-Www'}}"`). Note that `min` will also add
	    *   native HTML5 constraint validation.
	    * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
	    *   This must be a valid ISO week format (yyyy-W##). You can also use interpolation inside this
	    *   attribute (e.g. `max="{{maxWeek | date:'yyyy-Www'}}"`). Note that `max` will also add
	    *   native HTML5 constraint validation.
	    * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO week string
	    *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
	    * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO week string
	    *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
	    * @param {string=} required Sets `required` validation error key if the value is not entered.
	    * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	    *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	    *    `required` when you want to data-bind to the `required` attribute.
	    * @param {string=} ngChange Angular expression to be executed when input changes due to user
	    *    interaction with the input element.
	    *
	    * @example
	    <example name="week-input-directive" module="weekExample">
	    <file name="index.html">
	      <script>
	      angular.module('weekExample', [])
	        .controller('DateController', ['$scope', function($scope) {
	          $scope.example = {
	            value: new Date(2013, 0, 3)
	          };
	        }]);
	      </script>
	      <form name="myForm" ng-controller="DateController as dateCtrl">
	        <label>Pick a date between in 2013:
	          <input id="exampleInput" type="week" name="input" ng-model="example.value"
	                 placeholder="YYYY-W##" min="2012-W32"
	                 max="2013-W52" required />
	        </label>
	        <div role="alert">
	          <span class="error" ng-show="myForm.input.$error.required">
	              Required!</span>
	          <span class="error" ng-show="myForm.input.$error.week">
	              Not a valid date!</span>
	        </div>
	        <tt>value = {{example.value | date: "yyyy-Www"}}</tt><br/>
	        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	      </form>
	    </file>
	    <file name="protractor.js" type="protractor">
	      var value = element(by.binding('example.value | date: "yyyy-Www"'));
	      var valid = element(by.binding('myForm.input.$valid'));
	      var input = element(by.model('example.value'));
	
	      // currently protractor/webdriver does not support
	      // sending keys to all known HTML5 input controls
	      // for various browsers (https://github.com/angular/protractor/issues/562).
	      function setInput(val) {
	        // set the value of the element and force validation.
	        var scr = "var ipt = document.getElementById('exampleInput'); " +
	        "ipt.value = '" + val + "';" +
	        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
	        browser.executeScript(scr);
	      }
	
	      it('should initialize to model', function() {
	        expect(value.getText()).toContain('2013-W01');
	        expect(valid.getText()).toContain('myForm.input.$valid = true');
	      });
	
	      it('should be invalid if empty', function() {
	        setInput('');
	        expect(value.getText()).toEqual('value =');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	
	      it('should be invalid if over max', function() {
	        setInput('2015-W01');
	        expect(value.getText()).toContain('');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	    </file>
	    </example>
	    */
week:gr("week",Wo,dr,"yyyy-Www"),/**
	   * @ngdoc input
	   * @name input[month]
	   *
	   * @description
	   * Input with month validation and transformation. In browsers that do not yet support
	   * the HTML5 month input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
	   * month format (yyyy-MM), for example: `2009-01`.
	   *
	   * The model must always be a Date object, otherwise Angular will throw an error.
	   * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
	   * If the model is not set to the first of the month, the next view to model update will set it
	   * to the first of the month.
	   *
	   * The timezone to be used to read/write the `Date` instance in the model can be defined using
	   * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
	   *   This must be a valid ISO month format (yyyy-MM). You can also use interpolation inside this
	   *   attribute (e.g. `min="{{minMonth | date:'yyyy-MM'}}"`). Note that `min` will also add
	   *   native HTML5 constraint validation.
	   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
	   *   This must be a valid ISO month format (yyyy-MM). You can also use interpolation inside this
	   *   attribute (e.g. `max="{{maxMonth | date:'yyyy-MM'}}"`). Note that `max` will also add
	   *   native HTML5 constraint validation.
	   * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO week string
	   *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
	   * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO week string
	   *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
	
	   * @param {string=} required Sets `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	   <example name="month-input-directive" module="monthExample">
	   <file name="index.html">
	     <script>
	      angular.module('monthExample', [])
	        .controller('DateController', ['$scope', function($scope) {
	          $scope.example = {
	            value: new Date(2013, 9, 1)
	          };
	        }]);
	     </script>
	     <form name="myForm" ng-controller="DateController as dateCtrl">
	       <label for="exampleInput">Pick a month in 2013:</label>
	       <input id="exampleInput" type="month" name="input" ng-model="example.value"
	          placeholder="yyyy-MM" min="2013-01" max="2013-12" required />
	       <div role="alert">
	         <span class="error" ng-show="myForm.input.$error.required">
	            Required!</span>
	         <span class="error" ng-show="myForm.input.$error.month">
	            Not a valid month!</span>
	       </div>
	       <tt>value = {{example.value | date: "yyyy-MM"}}</tt><br/>
	       <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	       <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	       <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	       <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	     </form>
	   </file>
	   <file name="protractor.js" type="protractor">
	      var value = element(by.binding('example.value | date: "yyyy-MM"'));
	      var valid = element(by.binding('myForm.input.$valid'));
	      var input = element(by.model('example.value'));
	
	      // currently protractor/webdriver does not support
	      // sending keys to all known HTML5 input controls
	      // for various browsers (https://github.com/angular/protractor/issues/562).
	      function setInput(val) {
	        // set the value of the element and force validation.
	        var scr = "var ipt = document.getElementById('exampleInput'); " +
	        "ipt.value = '" + val + "';" +
	        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
	        browser.executeScript(scr);
	      }
	
	      it('should initialize to model', function() {
	        expect(value.getText()).toContain('2013-10');
	        expect(valid.getText()).toContain('myForm.input.$valid = true');
	      });
	
	      it('should be invalid if empty', function() {
	        setInput('');
	        expect(value.getText()).toEqual('value =');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	
	      it('should be invalid if over max', function() {
	        setInput('2015-01');
	        expect(value.getText()).toContain('');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	   </file>
	   </example>
	   */
month:gr("month",zo,vr(zo,["yyyy","MM"]),"yyyy-MM"),/**
	   * @ngdoc input
	   * @name input[number]
	   *
	   * @description
	   * Text input with number validation and transformation. Sets the `number` validation
	   * error if not a valid number.
	   *
	   * <div class="alert alert-warning">
	   * The model must always be of type `number` otherwise Angular will throw an error.
	   * Be aware that a string containing a number is not enough. See the {@link ngModel:numfmt}
	   * error docs for more information and an example of how to convert your model if necessary.
	   * </div>
	   *
	   * ## Issues with HTML5 constraint validation
	   *
	   * In browsers that follow the
	   * [HTML5 specification](https://html.spec.whatwg.org/multipage/forms.html#number-state-%28type=number%29),
	   * `input[number]` does not work as expected with {@link ngModelOptions `ngModelOptions.allowInvalid`}.
	   * If a non-number is entered in the input, the browser will report the value as an empty string,
	   * which means the view / model values in `ngModel` and subsequently the scope value
	   * will also be an empty string.
	   *
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
	   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
	   * @param {string=} required Sets `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	   *    minlength.
	   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
	   *    any length.
	   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
	   *    that contains the regular expression body that will be converted to a regular expression
	   *    as in the ngPattern directive.
	   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
	   *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
	   *    If the expression evaluates to a RegExp object, then this is used directly.
	   *    If the expression evaluates to a string, then it will be converted to a RegExp
	   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	   *    `new RegExp('^abc$')`.<br />
	   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	   *    start at the index of the last search's match, thus not taking the whole input value into
	   *    account.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	      <example name="number-input-directive" module="numberExample">
	        <file name="index.html">
	         <script>
	           angular.module('numberExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.example = {
	                 value: 12
	               };
	             }]);
	         </script>
	         <form name="myForm" ng-controller="ExampleController">
	           <label>Number:
	             <input type="number" name="input" ng-model="example.value"
	                    min="0" max="99" required>
	          </label>
	           <div role="alert">
	             <span class="error" ng-show="myForm.input.$error.required">
	               Required!</span>
	             <span class="error" ng-show="myForm.input.$error.number">
	               Not valid number!</span>
	           </div>
	           <tt>value = {{example.value}}</tt><br/>
	           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	          </form>
	        </file>
	        <file name="protractor.js" type="protractor">
	          var value = element(by.binding('example.value'));
	          var valid = element(by.binding('myForm.input.$valid'));
	          var input = element(by.model('example.value'));
	
	          it('should initialize to model', function() {
	            expect(value.getText()).toContain('12');
	            expect(valid.getText()).toContain('true');
	          });
	
	          it('should be invalid if empty', function() {
	            input.clear();
	            input.sendKeys('');
	            expect(value.getText()).toEqual('value =');
	            expect(valid.getText()).toContain('false');
	          });
	
	          it('should be invalid if over max', function() {
	            input.clear();
	            input.sendKeys('123');
	            expect(value.getText()).toEqual('value =');
	            expect(valid.getText()).toContain('false');
	          });
	        </file>
	      </example>
	   */
number:yr,/**
	   * @ngdoc input
	   * @name input[url]
	   *
	   * @description
	   * Text input with URL validation. Sets the `url` validation error key if the content is not a
	   * valid URL.
	   *
	   * <div class="alert alert-warning">
	   * **Note:** `input[url]` uses a regex to validate urls that is derived from the regex
	   * used in Chromium. If you need stricter validation, you can use `ng-pattern` or modify
	   * the built-in validators (see the {@link guide/forms Forms guide})
	   * </div>
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} required Sets `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	   *    minlength.
	   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
	   *    any length.
	   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
	   *    that contains the regular expression body that will be converted to a regular expression
	   *    as in the ngPattern directive.
	   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
	   *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
	   *    If the expression evaluates to a RegExp object, then this is used directly.
	   *    If the expression evaluates to a string, then it will be converted to a RegExp
	   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	   *    `new RegExp('^abc$')`.<br />
	   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	   *    start at the index of the last search's match, thus not taking the whole input value into
	   *    account.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	      <example name="url-input-directive" module="urlExample">
	        <file name="index.html">
	         <script>
	           angular.module('urlExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.url = {
	                 text: 'http://google.com'
	               };
	             }]);
	         </script>
	         <form name="myForm" ng-controller="ExampleController">
	           <label>URL:
	             <input type="url" name="input" ng-model="url.text" required>
	           <label>
	           <div role="alert">
	             <span class="error" ng-show="myForm.input.$error.required">
	               Required!</span>
	             <span class="error" ng-show="myForm.input.$error.url">
	               Not valid url!</span>
	           </div>
	           <tt>text = {{url.text}}</tt><br/>
	           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	           <tt>myForm.$error.url = {{!!myForm.$error.url}}</tt><br/>
	          </form>
	        </file>
	        <file name="protractor.js" type="protractor">
	          var text = element(by.binding('url.text'));
	          var valid = element(by.binding('myForm.input.$valid'));
	          var input = element(by.model('url.text'));
	
	          it('should initialize to model', function() {
	            expect(text.getText()).toContain('http://google.com');
	            expect(valid.getText()).toContain('true');
	          });
	
	          it('should be invalid if empty', function() {
	            input.clear();
	            input.sendKeys('');
	
	            expect(text.getText()).toEqual('text =');
	            expect(valid.getText()).toContain('false');
	          });
	
	          it('should be invalid if not url', function() {
	            input.clear();
	            input.sendKeys('box');
	
	            expect(valid.getText()).toContain('false');
	          });
	        </file>
	      </example>
	   */
url:$r,/**
	   * @ngdoc input
	   * @name input[email]
	   *
	   * @description
	   * Text input with email validation. Sets the `email` validation error key if not a valid email
	   * address.
	   *
	   * <div class="alert alert-warning">
	   * **Note:** `input[email]` uses a regex to validate email addresses that is derived from the regex
	   * used in Chromium. If you need stricter validation (e.g. requiring a top-level domain), you can
	   * use `ng-pattern` or modify the built-in validators (see the {@link guide/forms Forms guide})
	   * </div>
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} required Sets `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	   *    minlength.
	   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
	   *    any length.
	   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
	   *    that contains the regular expression body that will be converted to a regular expression
	   *    as in the ngPattern directive.
	   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
	   *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
	   *    If the expression evaluates to a RegExp object, then this is used directly.
	   *    If the expression evaluates to a string, then it will be converted to a RegExp
	   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	   *    `new RegExp('^abc$')`.<br />
	   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	   *    start at the index of the last search's match, thus not taking the whole input value into
	   *    account.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	      <example name="email-input-directive" module="emailExample">
	        <file name="index.html">
	         <script>
	           angular.module('emailExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.email = {
	                 text: 'me@example.com'
	               };
	             }]);
	         </script>
	           <form name="myForm" ng-controller="ExampleController">
	             <label>Email:
	               <input type="email" name="input" ng-model="email.text" required>
	             </label>
	             <div role="alert">
	               <span class="error" ng-show="myForm.input.$error.required">
	                 Required!</span>
	               <span class="error" ng-show="myForm.input.$error.email">
	                 Not valid email!</span>
	             </div>
	             <tt>text = {{email.text}}</tt><br/>
	             <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	             <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	             <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	             <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	             <tt>myForm.$error.email = {{!!myForm.$error.email}}</tt><br/>
	           </form>
	         </file>
	        <file name="protractor.js" type="protractor">
	          var text = element(by.binding('email.text'));
	          var valid = element(by.binding('myForm.input.$valid'));
	          var input = element(by.model('email.text'));
	
	          it('should initialize to model', function() {
	            expect(text.getText()).toContain('me@example.com');
	            expect(valid.getText()).toContain('true');
	          });
	
	          it('should be invalid if empty', function() {
	            input.clear();
	            input.sendKeys('');
	            expect(text.getText()).toEqual('text =');
	            expect(valid.getText()).toContain('false');
	          });
	
	          it('should be invalid if not email', function() {
	            input.clear();
	            input.sendKeys('xxx');
	
	            expect(valid.getText()).toContain('false');
	          });
	        </file>
	      </example>
	   */
email:br,/**
	   * @ngdoc input
	   * @name input[radio]
	   *
	   * @description
	   * HTML radio button.
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string} value The value to which the `ngModel` expression should be set when selected.
	   *    Note that `value` only supports `string` values, i.e. the scope model needs to be a string,
	   *    too. Use `ngValue` if you need complex models (`number`, `object`, ...).
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   * @param {string} ngValue Angular expression to which `ngModel` will be be set when the radio
	   *    is selected. Should be used instead of the `value` attribute if you need
	   *    a non-string `ngModel` (`boolean`, `array`, ...).
	   *
	   * @example
	      <example name="radio-input-directive" module="radioExample">
	        <file name="index.html">
	         <script>
	           angular.module('radioExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.color = {
	                 name: 'blue'
	               };
	               $scope.specialValue = {
	                 "id": "12345",
	                 "value": "green"
	               };
	             }]);
	         </script>
	         <form name="myForm" ng-controller="ExampleController">
	           <label>
	             <input type="radio" ng-model="color.name" value="red">
	             Red
	           </label><br/>
	           <label>
	             <input type="radio" ng-model="color.name" ng-value="specialValue">
	             Green
	           </label><br/>
	           <label>
	             <input type="radio" ng-model="color.name" value="blue">
	             Blue
	           </label><br/>
	           <tt>color = {{color.name | json}}</tt><br/>
	          </form>
	          Note that `ng-value="specialValue"` sets radio item's value to be the value of `$scope.specialValue`.
	        </file>
	        <file name="protractor.js" type="protractor">
	          it('should change state', function() {
	            var color = element(by.binding('color.name'));
	
	            expect(color.getText()).toContain('blue');
	
	            element.all(by.model('color.name')).get(0).click();
	
	            expect(color.getText()).toContain('red');
	          });
	        </file>
	      </example>
	   */
radio:wr,/**
	   * @ngdoc input
	   * @name input[checkbox]
	   *
	   * @description
	   * HTML checkbox.
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {expression=} ngTrueValue The value to which the expression should be set when selected.
	   * @param {expression=} ngFalseValue The value to which the expression should be set when not selected.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	      <example name="checkbox-input-directive" module="checkboxExample">
	        <file name="index.html">
	         <script>
	           angular.module('checkboxExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.checkboxModel = {
	                value1 : true,
	                value2 : 'YES'
	              };
	             }]);
	         </script>
	         <form name="myForm" ng-controller="ExampleController">
	           <label>Value1:
	             <input type="checkbox" ng-model="checkboxModel.value1">
	           </label><br/>
	           <label>Value2:
	             <input type="checkbox" ng-model="checkboxModel.value2"
	                    ng-true-value="'YES'" ng-false-value="'NO'">
	            </label><br/>
	           <tt>value1 = {{checkboxModel.value1}}</tt><br/>
	           <tt>value2 = {{checkboxModel.value2}}</tt><br/>
	          </form>
	        </file>
	        <file name="protractor.js" type="protractor">
	          it('should change state', function() {
	            var value1 = element(by.binding('checkboxModel.value1'));
	            var value2 = element(by.binding('checkboxModel.value2'));
	
	            expect(value1.getText()).toContain('true');
	            expect(value2.getText()).toContain('YES');
	
	            element(by.model('checkboxModel.value1')).click();
	            element(by.model('checkboxModel.value2')).click();
	
	            expect(value1.getText()).toContain('false');
	            expect(value2.getText()).toContain('NO');
	          });
	        </file>
	      </example>
	   */
checkbox:_r,hidden:d,button:d,submit:d,reset:d,file:d},Ko=["$browser","$sniffer","$filter","$parse",function(t,e,n,r){return{restrict:"E",require:["?ngModel"],link:{pre:function(i,o,a,u){u[0]&&(Yo[Rr(a.type)]||Yo.text)(i,o,a,u[0],e,t,n,r)}}}}],Zo=/^(true|false|\d+)$/,Qo=function(){return{restrict:"A",priority:100,compile:function(t,e){return Zo.test(e.ngValue)?function(t,e,n){n.$set("value",t.$eval(n.ngValue))}:function(t,e,n){t.$watch(n.ngValue,function(t){n.$set("value",t)})}}}},ta=["$compile",function(t){return{restrict:"AC",compile:function(e){return t.$$addBindingClass(e),function(e,n,r){t.$$addBindingInfo(n,r.ngBind),n=n[0],e.$watch(r.ngBind,function(t){n.textContent=y(t)?"":t})}}}}],ea=["$interpolate","$compile",function(t,e){return{compile:function(n){return e.$$addBindingClass(n),function(n,r,i){var o=t(r.attr(i.$attr.ngBindTemplate));e.$$addBindingInfo(r,o.expressions),r=r[0],i.$observe("ngBindTemplate",function(t){r.textContent=y(t)?"":t})}}}}],na=["$sce","$parse","$compile",function(t,e,n){return{restrict:"A",compile:function(r,i){var o=e(i.ngBindHtml),a=e(i.ngBindHtml,function(t){return(t||"").toString()});return n.$$addBindingClass(r),function(e,r,i){n.$$addBindingInfo(r,i.ngBindHtml),e.$watch(a,function(){
// we re-evaluate the expr because we want a TrustedValueHolderType
// for $sce, not a string
r.html(t.getTrustedHtml(o(e))||"")})}}}}],ra=g({restrict:"A",require:"ngModel",link:function(t,e,n,r){r.$viewChangeListeners.push(function(){t.$eval(n.ngChange)})}}),ia=Cr("",!0),oa=Cr("Odd",0),aa=Cr("Even",1),ua=sr({compile:function(t,e){e.$set("ngCloak",void 0),t.removeClass("ng-cloak")}}),sa=[function(){return{restrict:"A",scope:!0,controller:"@",priority:500}}],ca={},la={blur:!0,focus:!0};i("click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste".split(" "),function(t){var e=ge("ng-"+t);ca[e]=["$parse","$rootScope",function(n,r){return{restrict:"A",compile:function(i,o){
// We expose the powerful $event object on the scope that provides access to the Window,
// etc. that isn't protected by the fast paths in $parse.  We explicitly request better
// checks at the cost of speed since event handler expressions are not executed as
// frequently as regular change detection.
var a=n(o[e],/* interceptorFn */null,/* expensiveChecks */!0);return function(e,n){n.on(t,function(n){var i=function(){a(e,{$event:n})};la[t]&&r.$$phase?e.$evalAsync(i):e.$apply(i)})}}}}]});/**
	 * @ngdoc directive
	 * @name ngDblclick
	 *
	 * @description
	 * The `ngDblclick` directive allows you to specify custom behavior on a dblclick event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngDblclick {@link guide/expression Expression} to evaluate upon
	 * a dblclick. (The Event object is available as `$event`)
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <button ng-dblclick="count = count + 1" ng-init="count=0">
	        Increment (on double click)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */
/**
	 * @ngdoc directive
	 * @name ngMousedown
	 *
	 * @description
	 * The ngMousedown directive allows you to specify custom behavior on mousedown event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMousedown {@link guide/expression Expression} to evaluate upon
	 * mousedown. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <button ng-mousedown="count = count + 1" ng-init="count=0">
	        Increment (on mouse down)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */
/**
	 * @ngdoc directive
	 * @name ngMouseup
	 *
	 * @description
	 * Specify custom behavior on mouseup event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMouseup {@link guide/expression Expression} to evaluate upon
	 * mouseup. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <button ng-mouseup="count = count + 1" ng-init="count=0">
	        Increment (on mouse up)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */
/**
	 * @ngdoc directive
	 * @name ngMouseover
	 *
	 * @description
	 * Specify custom behavior on mouseover event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMouseover {@link guide/expression Expression} to evaluate upon
	 * mouseover. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <button ng-mouseover="count = count + 1" ng-init="count=0">
	        Increment (when mouse is over)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */
/**
	 * @ngdoc directive
	 * @name ngMouseenter
	 *
	 * @description
	 * Specify custom behavior on mouseenter event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMouseenter {@link guide/expression Expression} to evaluate upon
	 * mouseenter. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <button ng-mouseenter="count = count + 1" ng-init="count=0">
	        Increment (when mouse enters)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */
/**
	 * @ngdoc directive
	 * @name ngMouseleave
	 *
	 * @description
	 * Specify custom behavior on mouseleave event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMouseleave {@link guide/expression Expression} to evaluate upon
	 * mouseleave. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <button ng-mouseleave="count = count + 1" ng-init="count=0">
	        Increment (when mouse leaves)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */
/**
	 * @ngdoc directive
	 * @name ngMousemove
	 *
	 * @description
	 * Specify custom behavior on mousemove event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMousemove {@link guide/expression Expression} to evaluate upon
	 * mousemove. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <button ng-mousemove="count = count + 1" ng-init="count=0">
	        Increment (when mouse moves)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */
/**
	 * @ngdoc directive
	 * @name ngKeydown
	 *
	 * @description
	 * Specify custom behavior on keydown event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngKeydown {@link guide/expression Expression} to evaluate upon
	 * keydown. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <input ng-keydown="count = count + 1" ng-init="count=0">
	      key down count: {{count}}
	     </file>
	   </example>
	 */
/**
	 * @ngdoc directive
	 * @name ngKeyup
	 *
	 * @description
	 * Specify custom behavior on keyup event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngKeyup {@link guide/expression Expression} to evaluate upon
	 * keyup. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
	 *
	 * @example
	   <example>
	     <file name="index.html">
	       <p>Typing in the input box below updates the key count</p>
	       <input ng-keyup="count = count + 1" ng-init="count=0"> key up count: {{count}}
	
	       <p>Typing in the input box below updates the keycode</p>
	       <input ng-keyup="event=$event">
	       <p>event keyCode: {{ event.keyCode }}</p>
	       <p>event altKey: {{ event.altKey }}</p>
	     </file>
	   </example>
	 */
/**
	 * @ngdoc directive
	 * @name ngKeypress
	 *
	 * @description
	 * Specify custom behavior on keypress event.
	 *
	 * @element ANY
	 * @param {expression} ngKeypress {@link guide/expression Expression} to evaluate upon
	 * keypress. ({@link guide/expression#-event- Event object is available as `$event`}
	 * and can be interrogated for keyCode, altKey, etc.)
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <input ng-keypress="count = count + 1" ng-init="count=0">
	      key press count: {{count}}
	     </file>
	   </example>
	 */
/**
	 * @ngdoc directive
	 * @name ngSubmit
	 *
	 * @description
	 * Enables binding angular expressions to onsubmit events.
	 *
	 * Additionally it prevents the default action (which for form means sending the request to the
	 * server and reloading the current page), but only if the form does not contain `action`,
	 * `data-action`, or `x-action` attributes.
	 *
	 * <div class="alert alert-warning">
	 * **Warning:** Be careful not to cause "double-submission" by using both the `ngClick` and
	 * `ngSubmit` handlers together. See the
	 * {@link form#submitting-a-form-and-preventing-the-default-action `form` directive documentation}
	 * for a detailed discussion of when `ngSubmit` may be triggered.
	 * </div>
	 *
	 * @element form
	 * @priority 0
	 * @param {expression} ngSubmit {@link guide/expression Expression} to eval.
	 * ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example module="submitExample">
	     <file name="index.html">
	      <script>
	        angular.module('submitExample', [])
	          .controller('ExampleController', ['$scope', function($scope) {
	            $scope.list = [];
	            $scope.text = 'hello';
	            $scope.submit = function() {
	              if ($scope.text) {
	                $scope.list.push(this.text);
	                $scope.text = '';
	              }
	            };
	          }]);
	      </script>
	      <form ng-submit="submit()" ng-controller="ExampleController">
	        Enter text and hit enter:
	        <input type="text" ng-model="text" name="text" />
	        <input type="submit" id="submit" value="Submit" />
	        <pre>list={{list}}</pre>
	      </form>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-submit', function() {
	         expect(element(by.binding('list')).getText()).toBe('list=[]');
	         element(by.css('#submit')).click();
	         expect(element(by.binding('list')).getText()).toContain('hello');
	         expect(element(by.model('text')).getAttribute('value')).toBe('');
	       });
	       it('should ignore empty strings', function() {
	         expect(element(by.binding('list')).getText()).toBe('list=[]');
	         element(by.css('#submit')).click();
	         element(by.css('#submit')).click();
	         expect(element(by.binding('list')).getText()).toContain('hello');
	        });
	     </file>
	   </example>
	 */
/**
	 * @ngdoc directive
	 * @name ngFocus
	 *
	 * @description
	 * Specify custom behavior on focus event.
	 *
	 * Note: As the `focus` event is executed synchronously when calling `input.focus()`
	 * AngularJS executes the expression using `scope.$evalAsync` if the event is fired
	 * during an `$apply` to ensure a consistent state.
	 *
	 * @element window, input, select, textarea, a
	 * @priority 0
	 * @param {expression} ngFocus {@link guide/expression Expression} to evaluate upon
	 * focus. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	 * See {@link ng.directive:ngClick ngClick}
	 */
/**
	 * @ngdoc directive
	 * @name ngBlur
	 *
	 * @description
	 * Specify custom behavior on blur event.
	 *
	 * A [blur event](https://developer.mozilla.org/en-US/docs/Web/Events/blur) fires when
	 * an element has lost focus.
	 *
	 * Note: As the `blur` event is executed synchronously also during DOM manipulations
	 * (e.g. removing a focussed input),
	 * AngularJS executes the expression using `scope.$evalAsync` if the event is fired
	 * during an `$apply` to ensure a consistent state.
	 *
	 * @element window, input, select, textarea, a
	 * @priority 0
	 * @param {expression} ngBlur {@link guide/expression Expression} to evaluate upon
	 * blur. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	 * See {@link ng.directive:ngClick ngClick}
	 */
/**
	 * @ngdoc directive
	 * @name ngCopy
	 *
	 * @description
	 * Specify custom behavior on copy event.
	 *
	 * @element window, input, select, textarea, a
	 * @priority 0
	 * @param {expression} ngCopy {@link guide/expression Expression} to evaluate upon
	 * copy. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <input ng-copy="copied=true" ng-init="copied=false; value='copy me'" ng-model="value">
	      copied: {{copied}}
	     </file>
	   </example>
	 */
/**
	 * @ngdoc directive
	 * @name ngCut
	 *
	 * @description
	 * Specify custom behavior on cut event.
	 *
	 * @element window, input, select, textarea, a
	 * @priority 0
	 * @param {expression} ngCut {@link guide/expression Expression} to evaluate upon
	 * cut. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <input ng-cut="cut=true" ng-init="cut=false; value='cut me'" ng-model="value">
	      cut: {{cut}}
	     </file>
	   </example>
	 */
/**
	 * @ngdoc directive
	 * @name ngPaste
	 *
	 * @description
	 * Specify custom behavior on paste event.
	 *
	 * @element window, input, select, textarea, a
	 * @priority 0
	 * @param {expression} ngPaste {@link guide/expression Expression} to evaluate upon
	 * paste. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <input ng-paste="paste=true" ng-init="paste=false" placeholder='paste here'>
	      pasted: {{paste}}
	     </file>
	   </example>
	 */
/**
	 * @ngdoc directive
	 * @name ngIf
	 * @restrict A
	 * @multiElement
	 *
	 * @description
	 * The `ngIf` directive removes or recreates a portion of the DOM tree based on an
	 * {expression}. If the expression assigned to `ngIf` evaluates to a false
	 * value then the element is removed from the DOM, otherwise a clone of the
	 * element is reinserted into the DOM.
	 *
	 * `ngIf` differs from `ngShow` and `ngHide` in that `ngIf` completely removes and recreates the
	 * element in the DOM rather than changing its visibility via the `display` css property.  A common
	 * case when this difference is significant is when using css selectors that rely on an element's
	 * position within the DOM, such as the `:first-child` or `:last-child` pseudo-classes.
	 *
	 * Note that when an element is removed using `ngIf` its scope is destroyed and a new scope
	 * is created when the element is restored.  The scope created within `ngIf` inherits from
	 * its parent scope using
	 * [prototypal inheritance](https://github.com/angular/angular.js/wiki/Understanding-Scopes#javascript-prototypal-inheritance).
	 * An important implication of this is if `ngModel` is used within `ngIf` to bind to
	 * a javascript primitive defined in the parent scope. In this case any modifications made to the
	 * variable within the child scope will override (hide) the value in the parent scope.
	 *
	 * Also, `ngIf` recreates elements using their compiled state. An example of this behavior
	 * is if an element's class attribute is directly modified after it's compiled, using something like
	 * jQuery's `.addClass()` method, and the element is later removed. When `ngIf` recreates the element
	 * the added class will be lost because the original compiled state is used to regenerate the element.
	 *
	 * Additionally, you can provide animations via the `ngAnimate` module to animate the `enter`
	 * and `leave` effects.
	 *
	 * @animations
	 * | Animation                        | Occurs                               |
	 * |----------------------------------|-------------------------------------|
	 * | {@link ng.$animate#enter enter}  | just after the `ngIf` contents change and a new DOM element is created and injected into the `ngIf` container |
	 * | {@link ng.$animate#leave leave}  | just before the `ngIf` contents are removed from the DOM |
	 *
	 * @element ANY
	 * @scope
	 * @priority 600
	 * @param {expression} ngIf If the {@link guide/expression expression} is falsy then
	 *     the element is removed from the DOM tree. If it is truthy a copy of the compiled
	 *     element is added to the DOM tree.
	 *
	 * @example
	  <example module="ngAnimate" deps="angular-animate.js" animations="true">
	    <file name="index.html">
	      <label>Click me: <input type="checkbox" ng-model="checked" ng-init="checked=true" /></label><br/>
	      Show when checked:
	      <span ng-if="checked" class="animate-if">
	        This is removed when the checkbox is unchecked.
	      </span>
	    </file>
	    <file name="animations.css">
	      .animate-if {
	        background:white;
	        border:1px solid black;
	        padding:10px;
	      }
	
	      .animate-if.ng-enter, .animate-if.ng-leave {
	        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
	      }
	
	      .animate-if.ng-enter,
	      .animate-if.ng-leave.ng-leave-active {
	        opacity:0;
	      }
	
	      .animate-if.ng-leave,
	      .animate-if.ng-enter.ng-enter-active {
	        opacity:1;
	      }
	    </file>
	  </example>
	 */
var fa=["$animate","$compile",function(t,e){return{multiElement:!0,transclude:"element",priority:600,terminal:!0,restrict:"A",$$tlb:!0,link:function(n,r,i,o,a){var u,s,c;n.$watch(i.ngIf,function(n){n?s||a(function(n,o){s=o,n[n.length++]=e.$$createComment("end ngIf",i.ngIf),
// Note: We only need the first/last node of the cloned nodes.
// However, we need to keep the reference to the jqlite wrapper as it might be changed later
// by a directive with templateUrl when its template arrives.
u={clone:n},t.enter(n,r.parent(),r)}):(c&&(c.remove(),c=null),s&&(s.$destroy(),s=null),u&&(c=vt(u.clone),t.leave(c).then(function(){c=null}),u=null))})}}}],ha=["$templateRequest","$anchorScroll","$animate",function(t,e,n){return{restrict:"ECA",priority:400,terminal:!0,transclude:"element",controller:Wr.noop,compile:function(r,i){var o=i.ngInclude||i.src,a=i.onload||"",u=i.autoscroll;return function(r,i,s,c,l){var f,h,p,d=0,v=function(){h&&(h.remove(),h=null),f&&(f.$destroy(),f=null),p&&(n.leave(p).then(function(){h=null}),h=p,p=null)};r.$watch(o,function(o){var s=function(){!$(u)||u&&!r.$eval(u)||e()},h=++d;o?(
//set the 2nd param to true to ignore the template request error so that the inner
//contents and scope can be cleaned up.
t(o,!0).then(function(t){if(!r.$$destroyed&&h===d){var e=r.$new();c.template=t;
// Note: This will also link all children of ng-include that were contained in the original
// html. If that content contains controllers, ... they could pollute/change the scope.
// However, using ng-include on an element with additional content does not make sense...
// Note: We can't remove them in the cloneAttchFn of $transclude as that
// function is called before linking the content, which would apply child
// directives to non existing elements.
var u=l(e,function(t){v(),n.enter(t,null,i).then(s)});f=e,p=u,f.$emit("$includeContentLoaded",o),r.$eval(a)}},function(){r.$$destroyed||h===d&&(v(),r.$emit("$includeContentError",o))}),r.$emit("$includeContentRequested",o)):(v(),c.template=null)})}}}}],pa=["$compile",function(t){return{restrict:"ECA",priority:-400,require:"ngInclude",link:function(n,r,i,o){
// WebKit: https://bugs.webkit.org/show_bug.cgi?id=135698 --- SVG elements do not
// support innerHTML, so detect this here and try to generate the contents
// specially.
return Vr.call(r[0]).match(/SVG/)?(r.empty(),void t(Et(o.template,e.document).childNodes)(n,function(t){r.append(t)},{futureParentElement:r})):(r.html(o.template),void t(r.contents())(n))}}}],da=sr({priority:450,compile:function(){return{pre:function(t,e,n){t.$eval(n.ngInit)}}}}),va=function(){return{restrict:"A",priority:100,require:"ngModel",link:function(t,e,n,r){
// We want to control whitespace trimming so we use this convoluted approach
// to access the ngList attribute, which doesn't pre-trim the attribute
var o=e.attr(n.$attr.ngList)||", ",a="false"!==n.ngTrim,u=a?Jr(o):o,s=function(t){
// If the viewValue is invalid (say required but empty) it will be `undefined`
if(!y(t)){var e=[];return t&&i(t.split(u),function(t){t&&e.push(a?Jr(t):t)}),e}};r.$parsers.push(s),r.$formatters.push(function(t){if(Gr(t))return t.join(o)}),
// Override the standard $isEmpty because an empty array means the input is empty.
r.$isEmpty=function(t){return!t||!t.length}}}},ga="ng-valid",ma="ng-invalid",ya="ng-pristine",$a="ng-dirty",ba="ng-untouched",wa="ng-touched",xa="ng-pending",_a="ng-empty",Ca="ng-not-empty",Sa=n("ngModel"),Aa=["$scope","$exceptionHandler","$attrs","$element","$parse","$animate","$timeout","$rootScope","$q","$interpolate",function(t,e,n,r,o,a,u,s,c,l){this.$viewValue=Number.NaN,this.$modelValue=Number.NaN,this.$$rawModelValue=void 0,// stores the parsed modelValue / model set from scope regardless of validity.
this.$validators={},this.$asyncValidators={},this.$parsers=[],this.$formatters=[],this.$viewChangeListeners=[],this.$untouched=!0,this.$touched=!1,this.$pristine=!0,this.$dirty=!1,this.$valid=!0,this.$invalid=!1,this.$error={},// keep invalid keys here
this.$$success={},// keep valid keys here
this.$pending=void 0,// keep pending keys here
this.$name=l(n.name||"",!1)(t),this.$$parentForm=Po;var f,h=o(n.ngModel),p=h.assign,v=h,g=p,m=null,b=this;this.$$setOptions=function(t){if(b.$options=t,t&&t.getterSetter){var e=o(n.ngModel+"()"),i=o(n.ngModel+"($$$p)");v=function(t){var n=h(t);return S(n)&&(n=e(t)),n},g=function(t,e){S(h(t))?i(t,{$$$p:e}):p(t,e)}}else if(!h.assign)throw Sa("nonassign","Expression '{0}' is non-assignable. Element: {1}",n.ngModel,Z(r))},/**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$render
	   *
	   * @description
	   * Called when the view needs to be updated. It is expected that the user of the ng-model
	   * directive will implement this method.
	   *
	   * The `$render()` method is invoked in the following situations:
	   *
	   * * `$rollbackViewValue()` is called.  If we are rolling back the view value to the last
	   *   committed value then `$render()` is called to update the input control.
	   * * The value referenced by `ng-model` is changed programmatically and both the `$modelValue` and
	   *   the `$viewValue` are different from last time.
	   *
	   * Since `ng-model` does not do a deep watch, `$render()` is only invoked if the values of
	   * `$modelValue` and `$viewValue` are actually different from their previous values. If `$modelValue`
	   * or `$viewValue` are objects (rather than a string or number) then `$render()` will not be
	   * invoked if you only change a property on the objects.
	   */
this.$render=d,/**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$isEmpty
	   *
	   * @description
	   * This is called when we need to determine if the value of an input is empty.
	   *
	   * For instance, the required directive does this to work out if the input has data or not.
	   *
	   * The default `$isEmpty` function checks whether the value is `undefined`, `''`, `null` or `NaN`.
	   *
	   * You can override this for input directives whose concept of being empty is different from the
	   * default. The `checkboxInputType` directive does this because in its case a value of `false`
	   * implies empty.
	   *
	   * @param {*} value The value of the input to check for emptiness.
	   * @returns {boolean} True if `value` is "empty".
	   */
this.$isEmpty=function(t){return y(t)||""===t||null===t||t!==t},this.$$updateEmptyClasses=function(t){b.$isEmpty(t)?(a.removeClass(r,Ca),a.addClass(r,_a)):(a.removeClass(r,_a),a.addClass(r,Ca))};var w=0;/**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setValidity
	   *
	   * @description
	   * Change the validity state, and notify the form.
	   *
	   * This method can be called within $parsers/$formatters or a custom validation implementation.
	   * However, in most cases it should be sufficient to use the `ngModel.$validators` and
	   * `ngModel.$asyncValidators` collections which will call `$setValidity` automatically.
	   *
	   * @param {string} validationErrorKey Name of the validator. The `validationErrorKey` will be assigned
	   *        to either `$error[validationErrorKey]` or `$pending[validationErrorKey]`
	   *        (for unfulfilled `$asyncValidators`), so that it is available for data-binding.
	   *        The `validationErrorKey` should be in camelCase and will get converted into dash-case
	   *        for class name. Example: `myError` will result in `ng-valid-my-error` and `ng-invalid-my-error`
	   *        class and can be bound to as  `{{someForm.someControl.$error.myError}}` .
	   * @param {boolean} isValid Whether the current state is valid (true), invalid (false), pending (undefined),
	   *                          or skipped (null). Pending is used for unfulfilled `$asyncValidators`.
	   *                          Skipped is used by Angular when validators do not run because of parse errors and
	   *                          when `$asyncValidators` do not run because any of the `$validators` failed.
	   */
Sr({ctrl:this,$element:r,set:function(t,e){t[e]=!0},unset:function(t,e){delete t[e]},$animate:a}),/**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setPristine
	   *
	   * @description
	   * Sets the control to its pristine state.
	   *
	   * This method can be called to remove the `ng-dirty` class and set the control to its pristine
	   * state (`ng-pristine` class). A model is considered to be pristine when the control
	   * has not been changed from when first compiled.
	   */
this.$setPristine=function(){b.$dirty=!1,b.$pristine=!0,a.removeClass(r,$a),a.addClass(r,ya)},/**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setDirty
	   *
	   * @description
	   * Sets the control to its dirty state.
	   *
	   * This method can be called to remove the `ng-pristine` class and set the control to its dirty
	   * state (`ng-dirty` class). A model is considered to be dirty when the control has been changed
	   * from when first compiled.
	   */
this.$setDirty=function(){b.$dirty=!0,b.$pristine=!1,a.removeClass(r,ya),a.addClass(r,$a),b.$$parentForm.$setDirty()},/**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setUntouched
	   *
	   * @description
	   * Sets the control to its untouched state.
	   *
	   * This method can be called to remove the `ng-touched` class and set the control to its
	   * untouched state (`ng-untouched` class). Upon compilation, a model is set as untouched
	   * by default, however this function can be used to restore that state if the model has
	   * already been touched by the user.
	   */
this.$setUntouched=function(){b.$touched=!1,b.$untouched=!0,a.setClass(r,ba,wa)},/**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setTouched
	   *
	   * @description
	   * Sets the control to its touched state.
	   *
	   * This method can be called to remove the `ng-untouched` class and set the control to its
	   * touched state (`ng-touched` class). A model is considered to be touched when the user has
	   * first focused the control element and then shifted focus away from the control (blur event).
	   */
this.$setTouched=function(){b.$touched=!0,b.$untouched=!1,a.setClass(r,wa,ba)},/**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$rollbackViewValue
	   *
	   * @description
	   * Cancel an update and reset the input element's value to prevent an update to the `$modelValue`,
	   * which may be caused by a pending debounced event or because the input is waiting for a some
	   * future event.
	   *
	   * If you have an input that uses `ng-model-options` to set up debounced updates or updates that
	   * depend on special events such as blur, you can have a situation where there is a period when
	   * the `$viewValue` is out of sync with the ngModel's `$modelValue`.
	   *
	   * In this case, you can use `$rollbackViewValue()` to manually cancel the debounced / future update
	   * and reset the input to the last committed view value.
	   *
	   * It is also possible that you run into difficulties if you try to update the ngModel's `$modelValue`
	   * programmatically before these debounced/future events have resolved/occurred, because Angular's
	   * dirty checking mechanism is not able to tell whether the model has actually changed or not.
	   *
	   * The `$rollbackViewValue()` method should be called before programmatically changing the model of an
	   * input which may have such events pending. This is important in order to make sure that the
	   * input field will be updated with the new model value and any pending operations are cancelled.
	   *
	   * <example name="ng-model-cancel-update" module="cancel-update-example">
	   *   <file name="app.js">
	   *     angular.module('cancel-update-example', [])
	   *
	   *     .controller('CancelUpdateController', ['$scope', function($scope) {
	   *       $scope.model = {};
	   *
	   *       $scope.setEmpty = function(e, value, rollback) {
	   *         if (e.keyCode == 27) {
	   *           e.preventDefault();
	   *           if (rollback) {
	   *             $scope.myForm[value].$rollbackViewValue();
	   *           }
	   *           $scope.model[value] = '';
	   *         }
	   *       };
	   *     }]);
	   *   </file>
	   *   <file name="index.html">
	   *     <div ng-controller="CancelUpdateController">
	   *        <p>Both of these inputs are only updated if they are blurred. Hitting escape should
	   *        empty them. Follow these steps and observe the difference:</p>
	   *       <ol>
	   *         <li>Type something in the input. You will see that the model is not yet updated</li>
	   *         <li>Press the Escape key.
	   *           <ol>
	   *             <li> In the first example, nothing happens, because the model is already '', and no
	   *             update is detected. If you blur the input, the model will be set to the current view.
	   *             </li>
	   *             <li> In the second example, the pending update is cancelled, and the input is set back
	   *             to the last committed view value (''). Blurring the input does nothing.
	   *             </li>
	   *           </ol>
	   *         </li>
	   *       </ol>
	   *
	   *       <form name="myForm" ng-model-options="{ updateOn: 'blur' }">
	   *         <div>
	   *        <p id="inputDescription1">Without $rollbackViewValue():</p>
	   *         <input name="value1" aria-describedby="inputDescription1" ng-model="model.value1"
	   *                ng-keydown="setEmpty($event, 'value1')">
	   *         value1: "{{ model.value1 }}"
	   *         </div>
	   *
	   *         <div>
	   *        <p id="inputDescription2">With $rollbackViewValue():</p>
	   *         <input name="value2" aria-describedby="inputDescription2" ng-model="model.value2"
	   *                ng-keydown="setEmpty($event, 'value2', true)">
	   *         value2: "{{ model.value2 }}"
	   *         </div>
	   *       </form>
	   *     </div>
	   *   </file>
	       <file name="style.css">
	          div {
	            display: table-cell;
	          }
	          div:nth-child(1) {
	            padding-right: 30px;
	          }
	
	        </file>
	   * </example>
	   */
this.$rollbackViewValue=function(){u.cancel(m),b.$viewValue=b.$$lastCommittedViewValue,b.$render()},/**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$validate
	   *
	   * @description
	   * Runs each of the registered validators (first synchronous validators and then
	   * asynchronous validators).
	   * If the validity changes to invalid, the model will be set to `undefined`,
	   * unless {@link ngModelOptions `ngModelOptions.allowInvalid`} is `true`.
	   * If the validity changes to valid, it will set the model to the last available valid
	   * `$modelValue`, i.e. either the last parsed value or the last value set from the scope.
	   */
this.$validate=function(){
// ignore $validate before model is initialized
if(!_(b.$modelValue)||!isNaN(b.$modelValue)){var t=b.$$lastCommittedViewValue,e=b.$$rawModelValue,n=b.$valid,r=b.$modelValue,i=b.$options&&b.$options.allowInvalid;b.$$runValidators(e,t,function(t){
// If there was no change in validity, don't update the model
// This prevents changing an invalid modelValue to undefined
i||n===t||(
// Note: Don't check ctrl.$valid here, as we could have
// external validators (e.g. calculated on the server),
// that just call $setValidity and need the model value
// to calculate their validity.
b.$modelValue=t?e:void 0,b.$modelValue!==r&&b.$$writeModelToScope())})}},this.$$runValidators=function(t,e,n){function r(){var t=b.$$parserName||"parse";
// Set the parse error last, to prevent unsetting it, should a $validators key == parserName
return y(f)?(u(t,null),!0):(f||(i(b.$validators,function(t,e){u(e,null)}),i(b.$asyncValidators,function(t,e){u(e,null)})),u(t,f),f)}function o(){var n=!0;return i(b.$validators,function(r,i){var o=r(t,e);n=n&&o,u(i,o)}),!!n||(i(b.$asyncValidators,function(t,e){u(e,null)}),!1)}function a(){var n=[],r=!0;i(b.$asyncValidators,function(i,o){var a=i(t,e);if(!N(a))throw Sa("nopromise","Expected asynchronous validator to return a promise but got '{0}' instead.",a);u(o,void 0),n.push(a.then(function(){u(o,!0)},function(){r=!1,u(o,!1)}))}),n.length?c.all(n).then(function(){s(r)},d):s(!0)}function u(t,e){l===w&&b.$setValidity(t,e)}function s(t){l===w&&n(t)}w++;var l=w;
// check parser error
// check parser error
return r()&&o()?void a():void s(!1)},/**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$commitViewValue
	   *
	   * @description
	   * Commit a pending update to the `$modelValue`.
	   *
	   * Updates may be pending by a debounced event or because the input is waiting for a some future
	   * event defined in `ng-model-options`. this method is rarely needed as `NgModelController`
	   * usually handles calling this in response to input events.
	   */
this.$commitViewValue=function(){var t=b.$viewValue;u.cancel(m),
// If the view value has not changed then we should just exit, except in the case where there is
// a native validator on the element. In this case the validation state may have changed even though
// the viewValue has stayed empty.
(b.$$lastCommittedViewValue!==t||""===t&&b.$$hasNativeValidators)&&(b.$$updateEmptyClasses(t),b.$$lastCommittedViewValue=t,
// change to dirty
b.$pristine&&this.$setDirty(),this.$$parseAndValidate())},this.$$parseAndValidate=function(){function e(){b.$modelValue!==o&&b.$$writeModelToScope()}var n=b.$$lastCommittedViewValue,r=n;if(f=!y(r)||void 0)for(var i=0;i<b.$parsers.length;i++)if(r=b.$parsers[i](r),y(r)){f=!1;break}_(b.$modelValue)&&isNaN(b.$modelValue)&&(
// ctrl.$modelValue has not been touched yet...
b.$modelValue=v(t));var o=b.$modelValue,a=b.$options&&b.$options.allowInvalid;b.$$rawModelValue=r,a&&(b.$modelValue=r,e()),
// Pass the $$lastCommittedViewValue here, because the cached viewValue might be out of date.
// This can happen if e.g. $setViewValue is called from inside a parser
b.$$runValidators(r,b.$$lastCommittedViewValue,function(t){a||(
// Note: Don't check ctrl.$valid here, as we could have
// external validators (e.g. calculated on the server),
// that just call $setValidity and need the model value
// to calculate their validity.
b.$modelValue=t?r:void 0,e())})},this.$$writeModelToScope=function(){g(t,b.$modelValue),i(b.$viewChangeListeners,function(t){try{t()}catch(n){e(n)}})},/**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setViewValue
	   *
	   * @description
	   * Update the view value.
	   *
	   * This method should be called when a control wants to change the view value; typically,
	   * this is done from within a DOM event handler. For example, the {@link ng.directive:input input}
	   * directive calls it when the value of the input changes and {@link ng.directive:select select}
	   * calls it when an option is selected.
	   *
	   * When `$setViewValue` is called, the new `value` will be staged for committing through the `$parsers`
	   * and `$validators` pipelines. If there are no special {@link ngModelOptions} specified then the staged
	   * value sent directly for processing, finally to be applied to `$modelValue` and then the
	   * **expression** specified in the `ng-model` attribute. Lastly, all the registered change listeners,
	   * in the `$viewChangeListeners` list, are called.
	   *
	   * In case the {@link ng.directive:ngModelOptions ngModelOptions} directive is used with `updateOn`
	   * and the `default` trigger is not listed, all those actions will remain pending until one of the
	   * `updateOn` events is triggered on the DOM element.
	   * All these actions will be debounced if the {@link ng.directive:ngModelOptions ngModelOptions}
	   * directive is used with a custom debounce for this particular event.
	   * Note that a `$digest` is only triggered once the `updateOn` events are fired, or if `debounce`
	   * is specified, once the timer runs out.
	   *
	   * When used with standard inputs, the view value will always be a string (which is in some cases
	   * parsed into another type, such as a `Date` object for `input[date]`.)
	   * However, custom controls might also pass objects to this method. In this case, we should make
	   * a copy of the object before passing it to `$setViewValue`. This is because `ngModel` does not
	   * perform a deep watch of objects, it only looks for a change of identity. If you only change
	   * the property of the object then ngModel will not realize that the object has changed and
	   * will not invoke the `$parsers` and `$validators` pipelines. For this reason, you should
	   * not change properties of the copy once it has been passed to `$setViewValue`.
	   * Otherwise you may cause the model value on the scope to change incorrectly.
	   *
	   * <div class="alert alert-info">
	   * In any case, the value passed to the method should always reflect the current value
	   * of the control. For example, if you are calling `$setViewValue` for an input element,
	   * you should pass the input DOM value. Otherwise, the control and the scope model become
	   * out of sync. It's also important to note that `$setViewValue` does not call `$render` or change
	   * the control's DOM value in any way. If we want to change the control's DOM value
	   * programmatically, we should update the `ngModel` scope expression. Its new value will be
	   * picked up by the model controller, which will run it through the `$formatters`, `$render` it
	   * to update the DOM, and finally call `$validate` on it.
	   * </div>
	   *
	   * @param {*} value value from the view.
	   * @param {string} trigger Event that triggered the update.
	   */
this.$setViewValue=function(t,e){b.$viewValue=t,b.$options&&!b.$options.updateOnDefault||b.$$debounceViewValueCommit(e)},this.$$debounceViewValueCommit=function(e){var n,r=0,i=b.$options;i&&$(i.debounce)&&(n=i.debounce,_(n)?r=n:_(n[e])?r=n[e]:_(n["default"])&&(r=n["default"])),u.cancel(m),r?m=u(function(){b.$commitViewValue()},r):s.$$phase?b.$commitViewValue():t.$apply(function(){b.$commitViewValue()})},
// model -> value
// Note: we cannot use a normal scope.$watch as we want to detect the following:
// 1. scope value is 'a'
// 2. user enters 'b'
// 3. ng-change kicks in and reverts scope value to 'a'
//    -> scope value did not change since the last digest as
//       ng-change executes in apply phase
// 4. view should be changed back to 'a'
t.$watch(function(){var e=v(t);
// if scope model value and ngModel value are out of sync
// TODO(perf): why not move this to the action fn?
if(e!==b.$modelValue&&(
// checks for NaN is needed to allow setting the model to NaN when there's an asyncValidator
b.$modelValue===b.$modelValue||e===e)){b.$modelValue=b.$$rawModelValue=e,f=void 0;for(var n=b.$formatters,r=n.length,i=e;r--;)i=n[r](i);b.$viewValue!==i&&(b.$$updateEmptyClasses(i),b.$viewValue=b.$$lastCommittedViewValue=i,b.$render(),b.$$runValidators(e,i,d))}return e})}],Ea=["$rootScope",function(t){return{restrict:"A",require:["ngModel","^?form","^?ngModelOptions"],controller:Aa,
// Prelink needs to run before any input directive
// so that we can set the NgModelOptions in NgModelController
// before anyone else uses it.
priority:1,compile:function(e){
// Setup initial state of the control
return e.addClass(ya).addClass(ba).addClass(ga),{pre:function(t,e,n,r){var i=r[0],o=r[1]||i.$$parentForm;i.$$setOptions(r[2]&&r[2].$options),
// notify others, especially parent forms
o.$addControl(i),n.$observe("name",function(t){i.$name!==t&&i.$$parentForm.$$renameControl(i,t)}),t.$on("$destroy",function(){i.$$parentForm.$removeControl(i)})},post:function(e,n,r,i){var o=i[0];o.$options&&o.$options.updateOn&&n.on(o.$options.updateOn,function(t){o.$$debounceViewValueCommit(t&&t.type)}),n.on("blur",function(){o.$touched||(t.$$phase?e.$evalAsync(o.$setTouched):e.$apply(o.$setTouched))})}}}}}],ka=/(\s+|^)default(\s+|$)/,Ta=function(){return{restrict:"A",controller:["$scope","$attrs",function(t,e){var n=this;this.$options=U(t.$eval(e.ngModelOptions)),
// Allow adding/overriding bound events
$(this.$options.updateOn)?(this.$options.updateOnDefault=!1,
// extract "default" pseudo-event from list of events that can trigger a model update
this.$options.updateOn=Jr(this.$options.updateOn.replace(ka,function(){return n.$options.updateOnDefault=!0," "}))):this.$options.updateOnDefault=!0}]}},Oa=sr({terminal:!0,priority:1e3}),Ra=n("ngOptions"),ja=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/,Na=["$compile","$document","$parse",function(t,n,o){function a(t,e,n){function i(t,e,n,r,i){this.selectValue=t,this.viewValue=e,this.label=n,this.group=r,this.disabled=i}function a(t){var e;if(!c&&r(t))e=t;else{
// if object, extract keys, in enumeration order, unsorted
e=[];for(var n in t)t.hasOwnProperty(n)&&"$"!==n.charAt(0)&&e.push(n)}return e}var u=t.match(ja);if(!u)throw Ra("iexp","Expected expression in form of '_select_ (as _label_)? for (_key_,)?_value_ in _collection_' but got '{0}'. Element: {1}",t,Z(e));
// Extract the parts from the ngOptions expression
// The variable name for the value of the item in the collection
var s=u[5]||u[7],c=u[6],l=/ as /.test(u[0])&&u[1],f=u[9],h=o(u[2]?u[1]:s),p=l&&o(l),d=p||h,v=f&&o(f),g=f?function(t,e){return v(n,e)}:function(t){return Zt(t)},m=function(t,e){return g(t,_(t,e))},y=o(u[2]||u[1]),$=o(u[3]||""),b=o(u[4]||""),w=o(u[8]),x={},_=c?function(t,e){return x[c]=e,x[s]=t,x}:function(t){return x[s]=t,x};return{trackBy:f,getTrackByValue:m,getWatchables:o(w,function(t){
// Create a collection of things that we would like to watch (watchedArray)
// so that they can all be watched using a single $watchCollection
// that only runs the handler once if anything changes
var e=[];t=t||[];for(var r=a(t),i=r.length,o=0;o<i;o++){var s=t===r?o:r[o],c=t[s],l=_(c,s),f=g(c,l);
// Only need to watch the displayFn if there is a specific label expression
if(e.push(f),u[2]||u[1]){var h=y(n,l);e.push(h)}
// Only need to watch the disableWhenFn if there is a specific disable expression
if(u[4]){var p=b(n,l);e.push(p)}}return e}),getOptions:function(){for(var t=[],e={},r=w(n)||[],o=a(r),u=o.length,s=0;s<u;s++){var c=r===o?s:o[s],l=r[c],h=_(l,c),p=d(n,h),v=g(p,h),x=y(n,h),C=$(n,h),S=b(n,h),A=new i(v,p,x,C,S);t.push(A),e[v]=A}return{items:t,selectValueMap:e,getOptionFromViewValue:function(t){return e[m(t)]},getViewValueFromOption:function(t){
// If the viewValue could be an object that may be mutated by the application,
// we need to make a copy and not return the reference to the value on the option.
return f?Wr.copy(t.viewValue):t.viewValue}}}}}function u(e,r,o,u){
// ------------------------------------------------------------------ //
function l(t,e){var n=s.cloneNode(!1);e.appendChild(n),f(t,n)}function f(t,e){t.element=e,e.disabled=t.disabled,
// NOTE: The label must be set before the value, otherwise IE10/11/EDGE create unresponsive
// selects in certain circumstances when multiple selects are next to each other and display
// the option list in listbox style, i.e. the select is [multiple], or specifies a [size].
// See https://github.com/angular/angular.js/issues/11314 for more info.
// This is unfortunately untestable with unit / e2e tests
t.label!==e.label&&(e.label=t.label,e.textContent=t.label),t.value!==e.value&&(e.value=t.selectValue)}function h(){var t=_&&d.readValue();
// We must remove all current options, but cannot simply set innerHTML = null
// since the providedEmptyOption might have an ngIf on it that inserts comments which we
// must preserve.
// Instead, iterate over the current option elements and remove them or their optgroup
// parents
if(_)for(var e=_.items.length-1;e>=0;e--){var n=_.items[e];Bt(n.group?n.element.parentNode:n.element)}_=C.getOptions();var i={};
// Check to see if the value has changed due to the update to the options
if(
// Ensure that the empty option is always there if it was explicitly provided
w&&r.prepend(p),_.items.forEach(function(t){var e;$(t.group)?(
// This option is to live in a group
// See if we have already created this group
e=i[t.group],e||(e=c.cloneNode(!1),S.appendChild(e),
// Update the label on the group element
e.label=t.group,
// Store it for use later
i[t.group]=e),l(t,e)):
// This option is not in a group
l(t,S)}),r[0].appendChild(S),v.$render(),!v.$isEmpty(t)){var o=d.readValue(),a=C.trackBy||g;(a?V(t,o):t===o)||(v.$setViewValue(o),v.$render())}}for(var p,d=u[0],v=u[1],g=o.multiple,m=0,y=r.children(),b=y.length;m<b;m++)if(""===y[m].value){p=y.eq(m);break}var w=!!p,x=Mr(s.cloneNode(!1));x.val("?");var _,C=a(o.ngOptions,r,e),S=n[0].createDocumentFragment(),A=function(){w||r.prepend(p),r.val(""),p.prop("selected",!0),// needed for IE
p.attr("selected",!0)},E=function(){w||p.remove()},k=function(){r.prepend(x),r.val("?"),x.prop("selected",!0),// needed for IE
x.attr("selected",!0)},T=function(){x.remove()};
// Update the controller methods for multiple selectable options
g?(v.$isEmpty=function(t){return!t||0===t.length},d.writeValue=function(t){_.items.forEach(function(t){t.element.selected=!1}),t&&t.forEach(function(t){var e=_.getOptionFromViewValue(t);e&&(e.element.selected=!0)})},d.readValue=function(){var t=r.val()||[],e=[];return i(t,function(t){var n=_.selectValueMap[t];n&&!n.disabled&&e.push(_.getViewValueFromOption(n))}),e},
// If we are using `track by` then we must watch these tracked values on the model
// since ngModel only watches for object identity change
C.trackBy&&e.$watchCollection(function(){if(Gr(v.$viewValue))return v.$viewValue.map(function(t){return C.getTrackByValue(t)})},function(){v.$render()})):(d.writeValue=function(t){var e=_.getOptionFromViewValue(t);e?(
// Don't update the option when it is already selected.
// For example, the browser will select the first option by default. In that case,
// most properties are set automatically - except the `selected` attribute, which we
// set always
r[0].value!==e.selectValue&&(T(),E(),r[0].value=e.selectValue,e.element.selected=!0),e.element.setAttribute("selected","selected")):null===t||w?(T(),A()):(E(),k())},d.readValue=function(){var t=_.selectValueMap[r.val()];return t&&!t.disabled?(E(),T(),_.getViewValueFromOption(t)):null},
// If we are using `track by` then we must watch the tracked value on the model
// since ngModel only watches for object identity change
C.trackBy&&e.$watch(function(){return C.getTrackByValue(v.$viewValue)},function(){v.$render()})),w?(
// we need to remove it before calling selectElement.empty() because otherwise IE will
// remove the label from the element. wtf?
p.remove(),
// compile the element since there might be bindings in it
t(p)(e),
// remove the class, which is added automatically because we recompile the element and it
// becomes the compilation root
p.removeClass("ng-scope")):p=Mr(s.cloneNode(!1)),r.empty(),
// We need to do this here to ensure that the options object is defined
// when we first hit it in writeNgOptionsValue
h(),
// We will re-render the option elements if the option values or labels change
e.$watchCollection(C.getWatchables,h)}
// we can't just jqLite('<option>') since jqLite is not smart enough
// to create it in <select> and IE barfs otherwise.
var s=e.document.createElement("option"),c=e.document.createElement("optgroup");return{restrict:"A",terminal:!0,require:["select","ngModel"],link:{pre:function(t,e,n,r){
// Deactivate the SelectController.register method to prevent
// option directives from accidentally registering themselves
// (and unwanted $destroy handlers etc.)
r[0].registerOption=d},post:u}}}],Pa=["$locale","$interpolate","$log",function(t,e,n){var r=/{}/g,o=/^when(Minus)?(.+)$/;return{link:function(a,u,s){function c(t){u.text(t||"")}var l,f=s.count,h=s.$attr.when&&u.attr(s.$attr.when),// we have {{}} in attrs
p=s.offset||0,v=a.$eval(h)||{},g={},m=e.startSymbol(),$=e.endSymbol(),b=m+f+"-"+p+$,w=Wr.noop;i(s,function(t,e){var n=o.exec(e);if(n){var r=(n[1]?"-":"")+Rr(n[2]);v[r]=u.attr(s.$attr[e])}}),i(v,function(t,n){g[n]=e(t.replace(r,b))}),a.$watch(f,function(e){var r=parseFloat(e),i=isNaN(r);
// If both `count` and `lastCount` are NaN, we don't need to re-register a watch.
// In JS `NaN !== NaN`, so we have to explicitly check.
if(i||r in v||(
// If an explicit number rule such as 1, 2, 3... is defined, just use it.
// Otherwise, check it against pluralization rules in $locale service.
r=t.pluralCat(r-p)),r!==l&&!(i&&_(l)&&isNaN(l))){w();var o=g[r];y(o)?(null!=e&&n.debug("ngPluralize: no rule defined for '"+r+"' in "+h),w=d,c()):w=a.$watch(o,c),l=r}})}}}],Da=["$parse","$animate","$compile",function(t,e,o){var a="$$NG_REMOVED",u=n("ngRepeat"),s=function(t,e,n,r,i,o,a){
// TODO(perf): generate setters to shave off ~40ms or 1-1.5%
t[n]=r,i&&(t[i]=o),t.$index=e,t.$first=0===e,t.$last=e===a-1,t.$middle=!(t.$first||t.$last),
// jshint bitwise: false
t.$odd=!(t.$even=0===(1&e))},c=function(t){return t.clone[0]},l=function(t){return t.clone[t.clone.length-1]};return{restrict:"A",multiElement:!0,transclude:"element",priority:1e3,terminal:!0,$$tlb:!0,compile:function(n,f){var h=f.ngRepeat,p=o.$$createComment("end ngRepeat",h),d=h.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);if(!d)throw u("iexp","Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.",h);var v=d[1],g=d[2],m=d[3],y=d[4];if(d=v.match(/^(?:(\s*[\$\w]+)|\(\s*([\$\w]+)\s*,\s*([\$\w]+)\s*\))$/),!d)throw u("iidexp","'_item_' in '_item_ in _collection_' should be an identifier or '(_key_, _value_)' expression, but got '{0}'.",v);var $=d[3]||d[1],b=d[2];if(m&&(!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(m)||/^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(m)))throw u("badident","alias '{0}' is invalid --- must be a valid JS identifier which is not a reserved name.",m);var w,x,_,C,S={$id:Zt};return y?w=t(y):(_=function(t,e){return Zt(e)},C=function(t){return t}),function(t,n,o,f,d){w&&(x=function(e,n,r){
// assign key, value, and $index to the locals so that they can be used in hash functions
return b&&(S[b]=e),S[$]=n,S.$index=r,w(t,S)});
// Store a list of elements from previous run. This is a hash where key is the item from the
// iterator, and the value is objects with following properties.
//   - scope: bound scope
//   - element: previous element.
//   - index: position
//
// We are using no-proto object so that we don't need to guard against inherited props via
// hasOwnProperty.
var v=gt();
//watch props
t.$watchCollection(g,function(o){var f,g,// node that cloned nodes should be inserted after
// initialized to the comment node anchor
y,w,S,A,// key/value of iteration
E,k,T,O,// last object information {scope, element, id}
R,j,N=n[0],
// Same as lastBlockMap but it has the current state. It will become the
// lastBlockMap on the next iteration.
P=gt();if(m&&(t[m]=o),r(o))T=o,k=x||_;else{k=x||C,
// if object, extract keys, in enumeration order, unsorted
T=[];for(var D in o)Or.call(o,D)&&"$"!==D.charAt(0)&&T.push(D)}
// locate existing items
for(w=T.length,R=new Array(w),f=0;f<w;f++)if(S=o===T?f:T[f],A=o[S],E=k(S,A,f),v[E])
// found previously seen block
O=v[E],delete v[E],P[E]=O,R[f]=O;else{if(P[E])
// if collision detected. restore lastBlockMap and throw an error
throw i(R,function(t){t&&t.scope&&(v[t.id]=t)}),u("dupes","Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}, Duplicate value: {2}",h,E,A);
// new never before seen block
R[f]={id:E,scope:void 0,clone:void 0},P[E]=!0}
// remove leftover items
for(var M in v){if(O=v[M],j=vt(O.clone),e.leave(j),j[0].parentNode)
// if the element was not removed yet because of pending animation, mark it as deleted
// so that we can ignore it later
for(f=0,g=j.length;f<g;f++)j[f][a]=!0;O.scope.$destroy()}
// we are not using forEach for perf reasons (trying to avoid #call)
for(f=0;f<w;f++)if(S=o===T?f:T[f],A=o[S],O=R[f],O.scope){
// if we have already seen this object, then we need to reuse the
// associated scope/element
y=N;
// skip nodes that are already pending removal via leave animation
do y=y.nextSibling;while(y&&y[a]);c(O)!=y&&
// existing item which got moved
e.move(vt(O.clone),null,N),N=l(O),s(O.scope,f,$,A,b,S,w)}else
// new item which we don't know about
d(function(t,n){O.scope=n;
// http://jsperf.com/clone-vs-createcomment
var r=p.cloneNode(!1);t[t.length++]=r,e.enter(t,null,N),N=r,
// Note: We only need the first/last node of the cloned nodes.
// However, we need to keep the reference to the jqlite wrapper as it might be changed later
// by a directive with templateUrl when its template arrives.
O.clone=t,P[O.id]=O,s(O.scope,f,$,A,b,S,w)});v=P})}}}}],Ma="ng-hide",Ia="ng-hide-animate",La=["$animate",function(t){return{restrict:"A",multiElement:!0,link:function(e,n,r){e.$watch(r.ngShow,function(e){
// we're adding a temporary, animation-specific class for ng-hide since this way
// we can control when the element is actually displayed on screen without having
// to have a global/greedy CSS selector that breaks when other animations are run.
// Read: https://github.com/angular/angular.js/issues/9103#issuecomment-58335845
t[e?"removeClass":"addClass"](n,Ma,{tempClasses:Ia})})}}}],qa=["$animate",function(t){return{restrict:"A",multiElement:!0,link:function(e,n,r){e.$watch(r.ngHide,function(e){
// The comment inside of the ngShowDirective explains why we add and
// remove a temporary class for the show/hide animation
t[e?"addClass":"removeClass"](n,Ma,{tempClasses:Ia})})}}}],Ua=sr(function(t,e,n){t.$watch(n.ngStyle,function(t,n){n&&t!==n&&i(n,function(t,n){e.css(n,"")}),t&&e.css(t)},!0)}),Fa=["$animate","$compile",function(t,e){return{require:"ngSwitch",
// asks for $scope to fool the BC controller module
controller:["$scope",function(){this.cases={}}],link:function(n,r,o,a){var u=o.ngSwitch||o.on,s=[],c=[],l=[],f=[],h=function(t,e){return function(){t.splice(e,1)}};n.$watch(u,function(n){var r,o;for(r=0,o=l.length;r<o;++r)t.cancel(l[r]);for(l.length=0,r=0,o=f.length;r<o;++r){var u=vt(c[r].clone);f[r].$destroy();var p=l[r]=t.leave(u);p.then(h(l,r))}c.length=0,f.length=0,(s=a.cases["!"+n]||a.cases["?"])&&i(s,function(n){n.transclude(function(r,i){f.push(i);var o=n.element;r[r.length++]=e.$$createComment("end ngSwitchWhen");var a={clone:r};c.push(a),t.enter(r,o.parent(),o)})})})}}}],Va=sr({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(t,e,n,r,i){r.cases["!"+n.ngSwitchWhen]=r.cases["!"+n.ngSwitchWhen]||[],r.cases["!"+n.ngSwitchWhen].push({transclude:i,element:e})}}),Ha=sr({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(t,e,n,r,i){r.cases["?"]=r.cases["?"]||[],r.cases["?"].push({transclude:i,element:e})}}),Ba=n("ngTransclude"),Wa=sr({restrict:"EAC",link:function(t,e,n,r,i){function o(t){t.length&&(e.empty(),e.append(t))}if(n.ngTransclude===n.$attr.ngTransclude&&(
// If the attribute is of the form: `ng-transclude="ng-transclude"`
// then treat it like the default
n.ngTransclude=""),!i)throw Ba("orphan","Illegal use of ngTransclude directive in the template! No parent directive that requires a transclusion found. Element: {0}",Z(e));
// If there is no slot name defined or the slot name is not optional
// then transclude the slot
var a=n.ngTransclude||n.ngTranscludeSlot;i(o,null,a)}}),za=["$templateCache",function(t){return{restrict:"E",terminal:!0,compile:function(e,n){if("text/ng-template"==n.type){var r=n.id,i=e[0].text;t.put(r,i)}}}}],Ga={$setViewValue:d,$render:d},Xa=["$element","$scope",function(t,n){var r=this,i=new Qt;
// If the ngModel doesn't get provided then provide a dummy noop version to prevent errors
r.ngModelCtrl=Ga,
// The "unknown" option is one that is prepended to the list if the viewValue
// does not match any of the options. When it is rendered the value of the unknown
// option is '? XXX ?' where XXX is the hashKey of the value that is not known.
//
// We can't just jqLite('<option>') since jqLite is not smart enough
// to create it in <select> and IE barfs otherwise.
r.unknownOption=Mr(e.document.createElement("option")),r.renderUnknownOption=function(e){var n="? "+Zt(e)+" ?";r.unknownOption.val(n),t.prepend(r.unknownOption),t.val(n)},n.$on("$destroy",function(){
// disable unknown option so that we don't do work when the whole select is being destroyed
r.renderUnknownOption=d}),r.removeUnknownOption=function(){r.unknownOption.parent()&&r.unknownOption.remove()},
// Read the value of the select control, the implementation of this changes depending
// upon whether the select can have multiple values and whether ngOptions is at work.
r.readValue=function(){return r.removeUnknownOption(),t.val()},
// Write the value to the select control, the implementation of this changes depending
// upon whether the select can have multiple values and whether ngOptions is at work.
r.writeValue=function(e){r.hasOption(e)?(r.removeUnknownOption(),t.val(e),""===e&&r.emptyOption.prop("selected",!0)):null==e&&r.emptyOption?(r.removeUnknownOption(),t.val("")):r.renderUnknownOption(e)},
// Tell the select control that an option, with the given value, has been added
r.addOption=function(t,e){
// Skip comment nodes, as they only pollute the `optionsMap`
if(e[0].nodeType!==ai){pt(t,'"option value"'),""===t&&(r.emptyOption=e);var n=i.get(t)||0;i.put(t,n+1),r.ngModelCtrl.$render(),Er(e)}},
// Tell the select control that an option, with the given value, has been removed
r.removeOption=function(t){var e=i.get(t);e&&(1===e?(i.remove(t),""===t&&(r.emptyOption=void 0)):i.put(t,e-1))},
// Check whether the select control has an option matching the given value
r.hasOption=function(t){return!!i.get(t)},r.registerOption=function(t,e,n,i,o){if(i){
// The value attribute is interpolated
var a;n.$observe("value",function(t){$(a)&&r.removeOption(a),a=t,r.addOption(t,e)})}else o?
// The text content is interpolated
t.$watch(o,function(t,i){n.$set("value",t),i!==t&&r.removeOption(i),r.addOption(t,e)}):
// The value attribute is static
r.addOption(n.value,e);e.on("$destroy",function(){r.removeOption(n.value),r.ngModelCtrl.$render()})}}],Ja=function(){function t(t,e,n,r){
// if ngModel is not defined, we don't need to do anything
var o=r[1];if(o){var a=r[0];
// If the select allows multiple values then we need to modify how we read and write
// values from and to the control; also what it means for the value to be empty and
// we have to add an extra watch since ngModel doesn't work well with arrays - it
// doesn't trigger rendering if only an item in the array changes.
if(a.ngModelCtrl=o,
// When the selected item(s) changes we delegate getting the value of the select control
// to the `readValue` method, which can be changed if the select can have multiple
// selected values or if the options are being generated by `ngOptions`
e.on("change",function(){t.$apply(function(){o.$setViewValue(a.readValue())})}),n.multiple){
// Read value now needs to check each option to see if it is selected
a.readValue=function(){var t=[];return i(e.find("option"),function(e){e.selected&&t.push(e.value)}),t},
// Write value now needs to set the selected property of each matching option
a.writeValue=function(t){var n=new Qt(t);i(e.find("option"),function(t){t.selected=$(n.get(t.value))})};
// we have to do it on each watch since ngModel watches reference, but
// we need to work of an array, so we need to see if anything was inserted/removed
var u,s=NaN;t.$watch(function(){s!==o.$viewValue||V(u,o.$viewValue)||(u=F(o.$viewValue),o.$render()),s=o.$viewValue}),
// If we are a multiple select then value is now a collection
// so the meaning of $isEmpty changes
o.$isEmpty=function(t){return!t||0===t.length}}}}function e(t,e,n,r){
// if ngModel is not defined, we don't need to do anything
var i=r[1];if(i){var o=r[0];
// We delegate rendering to the `writeValue` method, which can be changed
// if the select can have multiple selected values or if the options are being
// generated by `ngOptions`.
// This must be done in the postLink fn to prevent $render to be called before
// all nodes have been linked correctly.
i.$render=function(){o.writeValue(i.$viewValue)}}}return{restrict:"E",require:["select","?ngModel"],controller:Xa,priority:1,link:{pre:t,post:e}}},Ya=["$interpolate",function(t){return{restrict:"E",priority:100,compile:function(e,n){if($(n.value))
// If the value attribute is defined, check if it contains an interpolation
var r=t(n.value,!0);else{
// If the value attribute is not defined then we fall back to the
// text content of the option element, which may be interpolated
var i=t(e.text(),!0);i||n.$set("value",e.text())}return function(t,e,n){
// This is an optimization over using ^^ since we don't want to have to search
// all the way to the root of the DOM for every single option element
var o="$selectController",a=e.parent(),u=a.data(o)||a.parent().data(o);// in case we are in optgroup
u&&u.registerOption(t,e,n,r,i)}}}}],Ka=g({restrict:"E",terminal:!1}),Za=function(){return{restrict:"A",require:"?ngModel",link:function(t,e,n,r){r&&(n.required=!0,// force truthy in case we are on non input element
r.$validators.required=function(t,e){return!n.required||!r.$isEmpty(e)},n.$observe("required",function(){r.$validate()}))}}},Qa=function(){return{restrict:"A",require:"?ngModel",link:function(t,e,r,i){if(i){var o,a=r.ngPattern||r.pattern;r.$observe("pattern",function(t){if(x(t)&&t.length>0&&(t=new RegExp("^"+t+"$")),t&&!t.test)throw n("ngPattern")("noregexp","Expected {0} to be a RegExp but was {1}. Element: {2}",a,t,Z(e));o=t||void 0,i.$validate()}),i.$validators.pattern=function(t,e){
// HTML5 pattern constraint validates the input value, so we validate the viewValue
return i.$isEmpty(e)||y(o)||o.test(e)}}}}},tu=function(){return{restrict:"A",require:"?ngModel",link:function(t,e,n,r){if(r){var i=-1;n.$observe("maxlength",function(t){var e=h(t);i=isNaN(e)?-1:e,r.$validate()}),r.$validators.maxlength=function(t,e){return i<0||r.$isEmpty(e)||e.length<=i}}}}},eu=function(){return{restrict:"A",require:"?ngModel",link:function(t,e,n,r){if(r){var i=0;n.$observe("minlength",function(t){i=h(t)||0,r.$validate()}),r.$validators.minlength=function(t,e){return r.$isEmpty(e)||e.length>=i}}}}};
//AngularJS is already loaded, so we can return here...
//try to bind to jquery now so that one can write jqLite(document).ready()
//but we will rebind on bootstrap again.
return e.angular.bootstrap?void(e.console&&console.log("WARNING: Tried to load angular more than once.")):(lt(),bt(Wr),Wr.module("ngLocale",[],["$provide",function(t){function e(t){t+="";var e=t.indexOf(".");return e==-1?0:t.length-e-1}function n(t,n){var r=n;void 0===r&&(r=Math.min(e(t),3));var i=Math.pow(10,r),o=(t*i|0)%i;return{v:r,f:o}}var r={ZERO:"zero",ONE:"one",TWO:"two",FEW:"few",MANY:"many",OTHER:"other"};t.value("$locale",{DATETIME_FORMATS:{AMPMS:["AM","PM"],DAY:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],ERANAMES:["Before Christ","Anno Domini"],ERAS:["BC","AD"],FIRSTDAYOFWEEK:6,MONTH:["January","February","March","April","May","June","July","August","September","October","November","December"],SHORTDAY:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],SHORTMONTH:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],STANDALONEMONTH:["January","February","March","April","May","June","July","August","September","October","November","December"],WEEKENDRANGE:[5,6],fullDate:"EEEE, MMMM d, y",longDate:"MMMM d, y",medium:"MMM d, y h:mm:ss a",mediumDate:"MMM d, y",mediumTime:"h:mm:ss a","short":"M/d/yy h:mm a",shortDate:"M/d/yy",shortTime:"h:mm a"},NUMBER_FORMATS:{CURRENCY_SYM:"$",DECIMAL_SEP:".",GROUP_SEP:",",PATTERNS:[{gSize:3,lgSize:3,maxFrac:3,minFrac:0,minInt:1,negPre:"-",negSuf:"",posPre:"",posSuf:""},{gSize:3,lgSize:3,maxFrac:2,minFrac:2,minInt:1,negPre:"-¤",negSuf:"",posPre:"¤",posSuf:""}]},id:"en-us",localeID:"en_US",pluralCat:function(t,e){var i=0|t,o=n(t,e);return 1==i&&0==o.v?r.ONE:r.OTHER}})}]),void Mr(e.document).ready(function(){ot(e.document,at)}))}(window),!window.angular.$$csp().noInlineStyle&&window.angular.element(document.head).prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>')}).call(e,n(6))},/* 6 */
/***/
function(t,e,n){var r,i;/*!
	 * jQuery JavaScript Library v2.2.4
	 * http://jquery.com/
	 *
	 * Includes Sizzle.js
	 * http://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2016-05-20T17:23Z
	 */
!function(e,n){"object"==typeof t&&"object"==typeof t.exports?
// For CommonJS and CommonJS-like environments where a proper `window`
// is present, execute the factory and get jQuery.
// For environments that do not have a `window` with a `document`
// (such as Node.js), expose a factory as module.exports.
// This accentuates the need for the creation of a real `window`.
// e.g. var jQuery = require("jquery")(window);
// See ticket #14549 for more info.
t.exports=e.document?n(e,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return n(t)}:n(e)}("undefined"!=typeof window?window:this,function(n,o){function a(t){
// Support: iOS 8.2 (not reproducible in simulator)
// `in` check used to prevent JIT error (gh-2145)
// hasOwn isn't used here due to false negatives
// regarding Nodelist length in IE
var e=!!t&&"length"in t&&t.length,n=ct.type(t);return"function"!==n&&!ct.isWindow(t)&&("array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t)}
// Implement the identical functionality for filter and not
function u(t,e,n){if(ct.isFunction(e))return ct.grep(t,function(t,r){/* jshint -W018 */
return!!e.call(t,r,t)!==n});if(e.nodeType)return ct.grep(t,function(t){return t===e!==n});if("string"==typeof e){if($t.test(e))return ct.filter(e,t,n);e=ct.filter(e,t)}return ct.grep(t,function(t){return rt.call(e,t)>-1!==n})}function s(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}
// Convert String-formatted options into Object-formatted ones
function c(t){var e={};return ct.each(t.match(St)||[],function(t,n){e[n]=!0}),e}/**
	 * The ready event handler and self cleanup method
	 */
function l(){Q.removeEventListener("DOMContentLoaded",l),n.removeEventListener("load",l),ct.ready()}function f(){this.expando=ct.expando+f.uid++}function h(t,e,n){var r;
// If nothing was found internally, try to fetch any
// data from the HTML5 data-* attribute
if(void 0===n&&1===t.nodeType)if(r="data-"+e.replace(jt,"-$&").toLowerCase(),n=t.getAttribute(r),"string"==typeof n){try{n="true"===n||"false"!==n&&("null"===n?null:
// Only convert to a number if it doesn't change the string
+n+""===n?+n:Rt.test(n)?ct.parseJSON(n):n)}catch(i){}
// Make sure we set the data so it isn't changed later
Ot.set(t,e,n)}else n=void 0;return n}function p(t,e,n,r){var i,o=1,a=20,u=r?function(){return r.cur()}:function(){return ct.css(t,e,"")},s=u(),c=n&&n[3]||(ct.cssNumber[e]?"":"px"),
// Starting value computation is required for potential unit mismatches
l=(ct.cssNumber[e]||"px"!==c&&+s)&&Pt.exec(ct.css(t,e));if(l&&l[3]!==c){
// Trust units reported by jQuery.css
c=c||l[3],
// Make sure we update the tween properties later on
n=n||[],
// Iteratively approximate from a nonzero starting point
l=+s||1;do
// If previous iteration zeroed out, double until we get *something*.
// Use string for doubling so we don't accidentally see scale as unchanged below
o=o||".5",
// Adjust and apply
l/=o,ct.style(t,e,l+c);while(o!==(o=u()/s)&&1!==o&&--a)}
// Apply relative offset (+=/-=) if specified
return n&&(l=+l||+s||0,i=n[1]?l+(n[1]+1)*n[2]:+n[2],r&&(r.unit=c,r.start=l,r.end=i)),i}function d(t,e){
// Support: IE9-11+
// Use typeof to avoid zero-argument method invocation on host objects (#15151)
var n="undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e||"*"):"undefined"!=typeof t.querySelectorAll?t.querySelectorAll(e||"*"):[];return void 0===e||e&&ct.nodeName(t,e)?ct.merge([t],n):n}
// Mark scripts as having already been evaluated
function v(t,e){for(var n=0,r=t.length;n<r;n++)Tt.set(t[n],"globalEval",!e||Tt.get(e[n],"globalEval"))}function g(t,e,n,r,i){for(var o,a,u,s,c,l,f=e.createDocumentFragment(),h=[],p=0,g=t.length;p<g;p++)if(o=t[p],o||0===o)
// Add nodes directly
if("object"===ct.type(o))
// Support: Android<4.1, PhantomJS<2
// push.apply(_, arraylike) throws on ancient WebKit
ct.merge(h,o.nodeType?[o]:o);else if(Ft.test(o)){for(a=a||f.appendChild(e.createElement("div")),
// Deserialize a standard representation
u=(Lt.exec(o)||["",""])[1].toLowerCase(),s=Ut[u]||Ut._default,a.innerHTML=s[1]+ct.htmlPrefilter(o)+s[2],
// Descend through wrappers to the right content
l=s[0];l--;)a=a.lastChild;
// Support: Android<4.1, PhantomJS<2
// push.apply(_, arraylike) throws on ancient WebKit
ct.merge(h,a.childNodes),
// Remember the top-level container
a=f.firstChild,
// Ensure the created nodes are orphaned (#12392)
a.textContent=""}else h.push(e.createTextNode(o));for(
// Remove wrapper from fragment
f.textContent="",p=0;o=h[p++];)
// Skip elements already in the context collection (trac-4087)
if(r&&ct.inArray(o,r)>-1)i&&i.push(o);else
// Capture executables
if(c=ct.contains(o.ownerDocument,o),
// Append to fragment
a=d(f.appendChild(o),"script"),
// Preserve script evaluation history
c&&v(a),n)for(l=0;o=a[l++];)qt.test(o.type||"")&&n.push(o);return f}function m(){return!0}function y(){return!1}
// Support: IE9
// See #13393 for more info
function $(){try{return Q.activeElement}catch(t){}}function b(t,e,n,r,i,o){var a,u;
// Types can be a map of types/handlers
if("object"==typeof e){
// ( types-Object, selector, data )
"string"!=typeof n&&(
// ( types-Object, data )
r=r||n,n=void 0);for(u in e)b(t,u,n,r,e[u],o);return t}if(null==r&&null==i?(
// ( types, fn )
i=n,r=n=void 0):null==i&&("string"==typeof n?(
// ( types, selector, fn )
i=r,r=void 0):(
// ( types, data, fn )
i=r,r=n,n=void 0)),i===!1)i=y;else if(!i)return t;
// Use same guid so caller can remove using origFn
return 1===o&&(a=i,i=function(t){
// Can use an empty set, since event contains the info
return ct().off(t),a.apply(this,arguments)},i.guid=a.guid||(a.guid=ct.guid++)),t.each(function(){ct.event.add(this,e,i,r,n)})}
// Manipulating tables requires a tbody
function w(t,e){return ct.nodeName(t,"table")&&ct.nodeName(11!==e.nodeType?e:e.firstChild,"tr")?t.getElementsByTagName("tbody")[0]||t.appendChild(t.ownerDocument.createElement("tbody")):t}
// Replace/restore the type attribute of script elements for safe DOM manipulation
function x(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function _(t){var e=Xt.exec(t.type);return e?t.type=e[1]:t.removeAttribute("type"),t}function C(t,e){var n,r,i,o,a,u,s,c;if(1===e.nodeType){
// 1. Copy private data: events, handlers, etc.
if(Tt.hasData(t)&&(o=Tt.access(t),a=Tt.set(e,o),c=o.events)){delete a.handle,a.events={};for(i in c)for(n=0,r=c[i].length;n<r;n++)ct.event.add(e,i,c[i][n])}
// 2. Copy user data
Ot.hasData(t)&&(u=Ot.access(t),s=ct.extend({},u),Ot.set(e,s))}}
// Fix IE bugs, see support tests
function S(t,e){var n=e.nodeName.toLowerCase();
// Fails to persist the checked state of a cloned checkbox or radio button.
"input"===n&&It.test(t.type)?e.checked=t.checked:"input"!==n&&"textarea"!==n||(e.defaultValue=t.defaultValue)}function A(t,e,n,r){
// Flatten any nested arrays
e=et.apply([],e);var i,o,a,u,s,c,l=0,f=t.length,h=f-1,p=e[0],v=ct.isFunction(p);
// We can't cloneNode fragments that contain checked, in WebKit
if(v||f>1&&"string"==typeof p&&!ut.checkClone&&Gt.test(p))return t.each(function(i){var o=t.eq(i);v&&(e[0]=p.call(this,i,o.html())),A(o,e,n,r)});if(f&&(i=g(e,t[0].ownerDocument,!1,t,r),o=i.firstChild,1===i.childNodes.length&&(i=o),o||r)){
// Use the original fragment for the last item
// instead of the first because it can end up
// being emptied incorrectly in certain situations (#8070).
for(a=ct.map(d(i,"script"),x),u=a.length;l<f;l++)s=i,l!==h&&(s=ct.clone(s,!0,!0),
// Keep references to cloned scripts for later restoration
u&&
// Support: Android<4.1, PhantomJS<2
// push.apply(_, arraylike) throws on ancient WebKit
ct.merge(a,d(s,"script"))),n.call(t[l],s,l);if(u)
// Evaluate executable scripts on first document insertion
for(c=a[a.length-1].ownerDocument,
// Reenable scripts
ct.map(a,_),l=0;l<u;l++)s=a[l],qt.test(s.type||"")&&!Tt.access(s,"globalEval")&&ct.contains(c,s)&&(s.src?
// Optional AJAX dependency, but won't run scripts if not present
ct._evalUrl&&ct._evalUrl(s.src):ct.globalEval(s.textContent.replace(Jt,"")))}return t}function E(t,e,n){for(var r,i=e?ct.filter(e,t):t,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||ct.cleanData(d(r)),r.parentNode&&(n&&ct.contains(r.ownerDocument,r)&&v(d(r,"script")),r.parentNode.removeChild(r));return t}/**
	 * Retrieve the actual display of a element
	 * @param {String} name nodeName of the element
	 * @param {Object} doc Document object
	 */
// Called only from within defaultDisplay
function k(t,e){var n=ct(e.createElement(t)).appendTo(e.body),r=ct.css(n[0],"display");
// We don't have any data stored on the element,
// so use "detach" method as fast way to get rid of the element
return n.detach(),r}/**
	 * Try to determine the default display value of an element
	 * @param {String} nodeName
	 */
function T(t){var e=Q,n=Kt[t];
// If the simple way fails, read from inside an iframe
// Use the already-created iframe if possible
// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
// Support: IE
// Store the correct default display
return n||(n=k(t,e),"none"!==n&&n||(Yt=(Yt||ct("<iframe frameborder='0' width='0' height='0'/>")).appendTo(e.documentElement),e=Yt[0].contentDocument,e.write(),e.close(),n=k(t,e),Yt.detach()),Kt[t]=n),n}function O(t,e,n){var r,i,o,a,u=t.style;
// Support: Opera 12.1x only
// Fall back to style even without computed
// computed is undefined for elems on document fragments
// Support: IE9
// getPropertyValue is only needed for .css('filter') (#12537)
// Remember the original values
// Put in the new values to get a computed value out
// Revert the changed values
// Support: IE9-11+
// IE returns zIndex value as an integer.
return n=n||te(t),a=n?n.getPropertyValue(e)||n[e]:void 0,""!==a&&void 0!==a||ct.contains(t.ownerDocument,t)||(a=ct.style(t,e)),n&&!ut.pixelMarginRight()&&Qt.test(a)&&Zt.test(e)&&(r=u.width,i=u.minWidth,o=u.maxWidth,u.minWidth=u.maxWidth=u.width=a,a=n.width,u.width=r,u.minWidth=i,u.maxWidth=o),void 0!==a?a+"":a}function R(t,e){
// Define the hook, we'll check on the first run if it's really needed.
return{get:function(){
// Hook not needed (or it's not possible to use it due
// to missing dependency), remove it.
return t()?void delete this.get:(this.get=e).apply(this,arguments)}}}
// Return a css property mapped to a potentially vendor prefixed property
function j(t){
// Shortcut for names that are not vendor prefixed
if(t in ue)return t;for(
// Check for vendor prefixed names
var e=t[0].toUpperCase()+t.slice(1),n=ae.length;n--;)if(t=ae[n]+e,t in ue)return t}function N(t,e,n){
// Any relative (+/-) values have already been
// normalized at this point
var r=Pt.exec(e);
// Guard against undefined "subtract", e.g., when used as in cssHooks
return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):e}function P(t,e,n,r,i){for(var o=n===(r?"border":"content")?
// If we already have the right measurement, avoid augmentation
4:
// Otherwise initialize for horizontal or vertical properties
"width"===e?1:0,a=0;o<4;o+=2)
// Both box models exclude margin, so add it if we want it
"margin"===n&&(a+=ct.css(t,n+Dt[o],!0,i)),r?(
// border-box includes padding, so remove it if we want content
"content"===n&&(a-=ct.css(t,"padding"+Dt[o],!0,i)),
// At this point, extra isn't border nor margin, so remove border
"margin"!==n&&(a-=ct.css(t,"border"+Dt[o]+"Width",!0,i))):(
// At this point, extra isn't content, so add padding
a+=ct.css(t,"padding"+Dt[o],!0,i),
// At this point, extra isn't content nor padding, so add border
"padding"!==n&&(a+=ct.css(t,"border"+Dt[o]+"Width",!0,i)));return a}function D(t,e,n){
// Start with offset property, which is equivalent to the border-box value
var r=!0,i="width"===e?t.offsetWidth:t.offsetHeight,o=te(t),a="border-box"===ct.css(t,"boxSizing",!1,o);
// Some non-html elements return undefined for offsetWidth, so check for null/undefined
// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
if(i<=0||null==i){
// Computed unit is not pixels. Stop here and return.
if(
// Fall back to computed then uncomputed css if necessary
i=O(t,e,o),(i<0||null==i)&&(i=t.style[e]),Qt.test(i))return i;
// Check for style in case a browser which returns unreliable values
// for getComputedStyle silently falls back to the reliable elem.style
r=a&&(ut.boxSizingReliable()||i===t.style[e]),
// Normalize "", auto, and prepare for extra
i=parseFloat(i)||0}
// Use the active box-sizing model to add/subtract irrelevant styles
return i+P(t,e,n||(a?"border":"content"),r,o)+"px"}function M(t,e){for(var n,r,i,o=[],a=0,u=t.length;a<u;a++)r=t[a],r.style&&(o[a]=Tt.get(r,"olddisplay"),n=r.style.display,e?(
// Reset the inline display of this element to learn if it is
// being hidden by cascaded rules or not
o[a]||"none"!==n||(r.style.display=""),
// Set elements which have been overridden with display: none
// in a stylesheet to whatever the default browser style is
// for such an element
""===r.style.display&&Mt(r)&&(o[a]=Tt.access(r,"olddisplay",T(r.nodeName)))):(i=Mt(r),"none"===n&&i||Tt.set(r,"olddisplay",i?n:ct.css(r,"display"))));
// Set the display of most of the elements in a second loop
// to avoid the constant reflow
for(a=0;a<u;a++)r=t[a],r.style&&(e&&"none"!==r.style.display&&""!==r.style.display||(r.style.display=e?o[a]||"":"none"));return t}function I(t,e,n,r,i){return new I.prototype.init(t,e,n,r,i)}
// Animations created synchronously will run synchronously
function L(){return n.setTimeout(function(){se=void 0}),se=ct.now()}
// Generate parameters to create a standard animation
function q(t,e){var n,r=0,i={height:t};for(
// If we include width, step value is 1 to do all cssExpand values,
// otherwise step value is 2 to skip over Left and Right
e=e?1:0;r<4;r+=2-e)n=Dt[r],i["margin"+n]=i["padding"+n]=t;return e&&(i.opacity=i.width=t),i}function U(t,e,n){for(var r,i=(H.tweeners[e]||[]).concat(H.tweeners["*"]),o=0,a=i.length;o<a;o++)if(r=i[o].call(n,e,t))
// We're done with this property
return r}function F(t,e,n){/* jshint validthis: true */
var r,i,o,a,u,s,c,l,f=this,h={},p=t.style,d=t.nodeType&&Mt(t),v=Tt.get(t,"fxshow");
// Handle queue: false promises
n.queue||(u=ct._queueHooks(t,"fx"),null==u.unqueued&&(u.unqueued=0,s=u.empty.fire,u.empty.fire=function(){u.unqueued||s()}),u.unqueued++,f.always(function(){
// Ensure the complete handler is called before this completes
f.always(function(){u.unqueued--,ct.queue(t,"fx").length||u.empty.fire()})})),
// Height/width overflow pass
1===t.nodeType&&("height"in e||"width"in e)&&(
// Make sure that nothing sneaks out
// Record all 3 overflow attributes because IE9-10 do not
// change the overflow attribute when overflowX and
// overflowY are set to the same value
n.overflow=[p.overflow,p.overflowX,p.overflowY],
// Set display property to inline-block for height/width
// animations on inline elements that are having width/height animated
c=ct.css(t,"display"),
// Test default display if display is currently "none"
l="none"===c?Tt.get(t,"olddisplay")||T(t.nodeName):c,"inline"===l&&"none"===ct.css(t,"float")&&(p.display="inline-block")),n.overflow&&(p.overflow="hidden",f.always(function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]}));
// show/hide pass
for(r in e)if(i=e[r],le.exec(i)){if(delete e[r],o=o||"toggle"===i,i===(d?"hide":"show")){
// If there is dataShow left over from a stopped hide or show
// and we are going to proceed with show, we should pretend to be hidden
if("show"!==i||!v||void 0===v[r])continue;d=!0}h[r]=v&&v[r]||ct.style(t,r)}else c=void 0;if(ct.isEmptyObject(h))"inline"===("none"===c?T(t.nodeName):c)&&(p.display=c);else{v?"hidden"in v&&(d=v.hidden):v=Tt.access(t,"fxshow",{}),
// Store state if its toggle - enables .stop().toggle() to "reverse"
o&&(v.hidden=!d),d?ct(t).show():f.done(function(){ct(t).hide()}),f.done(function(){var e;Tt.remove(t,"fxshow");for(e in h)ct.style(t,e,h[e])});for(r in h)a=U(d?v[r]:0,r,f),r in v||(v[r]=a.start,d&&(a.end=a.start,a.start="width"===r||"height"===r?1:0))}}function V(t,e){var n,r,i,o,a;
// camelCase, specialEasing and expand cssHook pass
for(n in t)if(r=ct.camelCase(n),i=e[r],o=t[n],ct.isArray(o)&&(i=o[1],o=t[n]=o[0]),n!==r&&(t[r]=o,delete t[n]),a=ct.cssHooks[r],a&&"expand"in a){o=a.expand(o),delete t[r];
// Not quite $.extend, this won't overwrite existing keys.
// Reusing 'index' because we have the correct "name"
for(n in o)n in t||(t[n]=o[n],e[n]=i)}else e[r]=i}function H(t,e,n){var r,i,o=0,a=H.prefilters.length,u=ct.Deferred().always(function(){
// Don't match elem in the :animated selector
delete s.elem}),s=function(){if(i)return!1;for(var e=se||L(),n=Math.max(0,c.startTime+c.duration-e),
// Support: Android 2.3
// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
r=n/c.duration||0,o=1-r,a=0,s=c.tweens.length;a<s;a++)c.tweens[a].run(o);return u.notifyWith(t,[c,o,n]),o<1&&s?n:(u.resolveWith(t,[c]),!1)},c=u.promise({elem:t,props:ct.extend({},e),opts:ct.extend(!0,{specialEasing:{},easing:ct.easing._default},n),originalProperties:e,originalOptions:n,startTime:se||L(),duration:n.duration,tweens:[],createTween:function(e,n){var r=ct.Tween(t,c.opts,e,n,c.opts.specialEasing[e]||c.opts.easing);return c.tweens.push(r),r},stop:function(e){var n=0,
// If we are going to the end, we want to run all the tweens
// otherwise we skip this part
r=e?c.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)c.tweens[n].run(1);
// Resolve when we played the last frame; otherwise, reject
return e?(u.notifyWith(t,[c,1,0]),u.resolveWith(t,[c,e])):u.rejectWith(t,[c,e]),this}}),l=c.props;for(V(l,c.opts.specialEasing);o<a;o++)if(r=H.prefilters[o].call(c,t,l,c.opts))return ct.isFunction(r.stop)&&(ct._queueHooks(c.elem,c.opts.queue).stop=ct.proxy(r.stop,r)),r;
// attach callbacks from options
return ct.map(l,U,c),ct.isFunction(c.opts.start)&&c.opts.start.call(t,c),ct.fx.timer(ct.extend(s,{elem:t,anim:c,queue:c.opts.queue})),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always)}function B(t){return t.getAttribute&&t.getAttribute("class")||""}
// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function W(t){
// dataTypeExpression is optional and defaults to "*"
return function(e,n){"string"!=typeof e&&(n=e,e="*");var r,i=0,o=e.toLowerCase().match(St)||[];if(ct.isFunction(n))
// For each dataType in the dataTypeExpression
for(;r=o[i++];)
// Prepend if requested
"+"===r[0]?(r=r.slice(1)||"*",(t[r]=t[r]||[]).unshift(n)):(t[r]=t[r]||[]).push(n)}}
// Base inspection function for prefilters and transports
function z(t,e,n,r){function i(u){var s;return o[u]=!0,ct.each(t[u]||[],function(t,u){var c=u(e,n,r);return"string"!=typeof c||a||o[c]?a?!(s=c):void 0:(e.dataTypes.unshift(c),i(c),!1)}),s}var o={},a=t===Oe;return i(e.dataTypes[0])||!o["*"]&&i("*")}
// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function G(t,e){var n,r,i=ct.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((i[n]?t:r||(r={}))[n]=e[n]);return r&&ct.extend(!0,t,r),t}/* Handles responses to an ajax request:
	 * - finds the right dataType (mediates between content-type and expected dataType)
	 * - returns the corresponding response
	 */
function X(t,e,n){
// Remove auto dataType and get content-type in the process
for(var r,i,o,a,u=t.contents,s=t.dataTypes;"*"===s[0];)s.shift(),void 0===r&&(r=t.mimeType||e.getResponseHeader("Content-Type"));
// Check if we're dealing with a known content-type
if(r)for(i in u)if(u[i]&&u[i].test(r)){s.unshift(i);break}
// Check to see if we have a response for the expected dataType
if(s[0]in n)o=s[0];else{
// Try convertible dataTypes
for(i in n){if(!s[0]||t.converters[i+" "+s[0]]){o=i;break}a||(a=i)}
// Or just use first one
o=o||a}
// If we found a dataType
// We add the dataType to the list if needed
// and return the corresponding response
if(o)return o!==s[0]&&s.unshift(o),n[o]}/* Chain conversions given the request and the original response
	 * Also sets the responseXXX fields on the jqXHR instance
	 */
function J(t,e,n,r){var i,o,a,u,s,c={},
// Work with a copy of dataTypes in case we need to modify it for conversion
l=t.dataTypes.slice();
// Create converters map with lowercased keys
if(l[1])for(a in t.converters)c[a.toLowerCase()]=t.converters[a];
// Convert to each sequential dataType
for(o=l.shift();o;)if(t.responseFields[o]&&(n[t.responseFields[o]]=e),
// Apply the dataFilter if provided
!s&&r&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),s=o,o=l.shift())
// There's only work to do if current dataType is non-auto
if("*"===o)o=s;else if("*"!==s&&s!==o){
// If none found, seek a pair
if(
// Seek a direct converter
a=c[s+" "+o]||c["* "+o],!a)for(i in c)if(
// If conv2 outputs current
u=i.split(" "),u[1]===o&&(
// If prev can be converted to accepted input
a=c[s+" "+u[0]]||c["* "+u[0]])){
// Condense equivalence converters
a===!0?a=c[i]:c[i]!==!0&&(o=u[0],l.unshift(u[1]));break}
// Apply converter (if not an equivalence)
if(a!==!0)
// Unless errors are allowed to bubble, catch and return them
if(a&&t["throws"])e=a(e);else try{e=a(e)}catch(f){return{state:"parsererror",error:a?f:"No conversion from "+s+" to "+o}}}return{state:"success",data:e}}function Y(t,e,n,r){var i;if(ct.isArray(e))
// Serialize array item.
ct.each(e,function(e,i){n||Pe.test(t)?
// Treat each array item as a scalar.
r(t,i):
// Item is non-scalar (array or object), encode its numeric index.
Y(t+"["+("object"==typeof i&&null!=i?e:"")+"]",i,n,r)});else if(n||"object"!==ct.type(e))
// Serialize scalar item.
r(t,e);else
// Serialize object item.
for(i in e)Y(t+"["+i+"]",e[i],n,r)}/**
	 * Gets a window from an element
	 */
function K(t){return ct.isWindow(t)?t:9===t.nodeType&&t.defaultView}
// Support: Firefox 18+
// Can't be in strict mode, several libs including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
//"use strict";
var Z=[],Q=n.document,tt=Z.slice,et=Z.concat,nt=Z.push,rt=Z.indexOf,it={},ot=it.toString,at=it.hasOwnProperty,ut={},st="2.2.4",
// Define a local copy of jQuery
ct=function(t,e){
// The jQuery object is actually just the init constructor 'enhanced'
// Need init if jQuery is called (just allow error to be thrown if not included)
return new ct.fn.init(t,e)},
// Support: Android<4.1
// Make sure we trim BOM and NBSP
lt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
// Matches dashed string for camelizing
ft=/^-ms-/,ht=/-([\da-z])/gi,
// Used by jQuery.camelCase as callback to replace()
pt=function(t,e){return e.toUpperCase()};ct.fn=ct.prototype={
// The current version of jQuery being used
jquery:st,constructor:ct,
// Start with an empty selector
selector:"",
// The default length of a jQuery object is 0
length:0,toArray:function(){return tt.call(this)},
// Get the Nth element in the matched element set OR
// Get the whole matched element set as a clean array
get:function(t){
// Return just the one element from the set
// Return all the elements in a clean array
return null!=t?t<0?this[t+this.length]:this[t]:tt.call(this)},
// Take an array of elements and push it onto the stack
// (returning the new matched element set)
pushStack:function(t){
// Build a new jQuery matched element set
var e=ct.merge(this.constructor(),t);
// Return the newly-formed element set
// Add the old object onto the stack (as a reference)
return e.prevObject=this,e.context=this.context,e},
// Execute a callback for every element in the matched set.
each:function(t){return ct.each(this,t)},map:function(t){return this.pushStack(ct.map(this,function(e,n){return t.call(e,n,e)}))},slice:function(){return this.pushStack(tt.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,n=+t+(t<0?e:0);return this.pushStack(n>=0&&n<e?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},
// For internal use only.
// Behaves like an Array's method, not like a jQuery method.
push:nt,sort:Z.sort,splice:Z.splice},ct.extend=ct.fn.extend=function(){var t,e,n,r,i,o,a=arguments[0]||{},u=1,s=arguments.length,c=!1;for(
// Handle a deep copy situation
"boolean"==typeof a&&(c=a,
// Skip the boolean and the target
a=arguments[u]||{},u++),
// Handle case when target is a string or something (possible in deep copy)
"object"==typeof a||ct.isFunction(a)||(a={}),
// Extend jQuery itself if only one argument is passed
u===s&&(a=this,u--);u<s;u++)
// Only deal with non-null/undefined values
if(null!=(t=arguments[u]))
// Extend the base object
for(e in t)n=a[e],r=t[e],
// Prevent never-ending loop
a!==r&&(
// Recurse if we're merging plain objects or arrays
c&&r&&(ct.isPlainObject(r)||(i=ct.isArray(r)))?(i?(i=!1,o=n&&ct.isArray(n)?n:[]):o=n&&ct.isPlainObject(n)?n:{},
// Never move original objects, clone them
a[e]=ct.extend(c,o,r)):void 0!==r&&(a[e]=r));
// Return the modified object
return a},ct.extend({
// Unique for each copy of jQuery on the page
expando:"jQuery"+(st+Math.random()).replace(/\D/g,""),
// Assume jQuery is ready without the ready module
isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isFunction:function(t){return"function"===ct.type(t)},isArray:Array.isArray,isWindow:function(t){return null!=t&&t===t.window},isNumeric:function(t){
// parseFloat NaNs numeric-cast false positives (null|true|false|"")
// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
// subtraction forces infinities to NaN
// adding 1 corrects loss of precision from parseFloat (#15100)
var e=t&&t.toString();return!ct.isArray(t)&&e-parseFloat(e)+1>=0},isPlainObject:function(t){var e;
// Not plain objects:
// - Any object or value whose internal [[Class]] property is not "[object Object]"
// - DOM nodes
// - window
if("object"!==ct.type(t)||t.nodeType||ct.isWindow(t))return!1;
// Not own constructor property must be Object
if(t.constructor&&!at.call(t,"constructor")&&!at.call(t.constructor.prototype||{},"isPrototypeOf"))return!1;
// Own properties are enumerated firstly, so to speed up,
// if last one is own, then all properties are own
for(e in t);return void 0===e||at.call(t,e)},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},type:function(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?it[ot.call(t)]||"object":typeof t},
// Evaluates a script in a global context
globalEval:function(t){var e,n=eval;t=ct.trim(t),t&&(
// If the code includes a valid, prologue position
// strict mode pragma, execute code by injecting a
// script tag into the document.
1===t.indexOf("use strict")?(e=Q.createElement("script"),e.text=t,Q.head.appendChild(e).parentNode.removeChild(e)):
// Otherwise, avoid the DOM node creation, insertion
// and removal by using an indirect global eval
n(t))},
// Convert dashed to camelCase; used by the css and data modules
// Support: IE9-11+
// Microsoft forgot to hump their vendor prefix (#9572)
camelCase:function(t){return t.replace(ft,"ms-").replace(ht,pt)},nodeName:function(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()},each:function(t,e){var n,r=0;if(a(t))for(n=t.length;r<n&&e.call(t[r],r,t[r])!==!1;r++);else for(r in t)if(e.call(t[r],r,t[r])===!1)break;return t},
// Support: Android<4.1
trim:function(t){return null==t?"":(t+"").replace(lt,"")},
// results is for internal usage only
makeArray:function(t,e){var n=e||[];return null!=t&&(a(Object(t))?ct.merge(n,"string"==typeof t?[t]:t):nt.call(n,t)),n},inArray:function(t,e,n){return null==e?-1:rt.call(e,t,n)},merge:function(t,e){for(var n=+e.length,r=0,i=t.length;r<n;r++)t[i++]=e[r];return t.length=i,t},grep:function(t,e,n){
// Go through the array, only saving the items
// that pass the validator function
for(var r,i=[],o=0,a=t.length,u=!n;o<a;o++)r=!e(t[o],o),r!==u&&i.push(t[o]);return i},
// arg is for internal usage only
map:function(t,e,n){var r,i,o=0,u=[];
// Go through the array, translating each of the items to their new values
if(a(t))for(r=t.length;o<r;o++)i=e(t[o],o,n),null!=i&&u.push(i);else for(o in t)i=e(t[o],o,n),null!=i&&u.push(i);
// Flatten any nested arrays
return et.apply([],u)},
// A global GUID counter for objects
guid:1,
// Bind a function to a context, optionally partially applying any
// arguments.
proxy:function(t,e){var n,r,i;
// Quick check to determine if target is callable, in the spec
// this throws a TypeError, but we will just return undefined.
if("string"==typeof e&&(n=t[e],e=t,t=n),ct.isFunction(t))
// Simulated bind
// Set the guid of unique handler to the same of original handler, so it can be removed
return r=tt.call(arguments,2),i=function(){return t.apply(e||this,r.concat(tt.call(arguments)))},i.guid=t.guid=t.guid||ct.guid++,i},now:Date.now,
// jQuery.support is not used in Core but other projects attach their
// properties to it so it needs to exist.
support:ut}),
// JSHint would error on this code due to the Symbol not being defined in ES5.
// Defining this global in .jshintrc would create a danger of using the global
// unguarded in another place, it seems safer to just disable JSHint for these
// three lines.
/* jshint ignore: start */
"function"==typeof Symbol&&(ct.fn[Symbol.iterator]=Z[Symbol.iterator]),/* jshint ignore: end */
// Populate the class2type map
ct.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){it["[object "+e+"]"]=e.toLowerCase()});var dt=/*!
	 * Sizzle CSS Selector Engine v2.2.1
	 * http://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2015-10-17
	 */
function(t){function e(t,e,n,r){var i,o,a,u,s,c,f,p,d=e&&e.ownerDocument,
// nodeType defaults to 9, since context defaults to document
v=e?e.nodeType:9;
// Return early from calls with invalid selector or context
if(n=n||[],"string"!=typeof t||!t||1!==v&&9!==v&&11!==v)return n;
// Try to shortcut find operations (as opposed to filters) in HTML documents
if(!r&&((e?e.ownerDocument||e:U)!==j&&R(e),e=e||j,P)){
// If the selector is sufficiently simple, try using a "get*By*" DOM method
// (excepting DocumentFragment context, where the methods don't exist)
if(11!==v&&(c=mt.exec(t)))
// ID selector
if(i=c[1]){
// Document context
if(9===v){if(!(a=e.getElementById(i)))return n;
// Support: IE, Opera, Webkit
// TODO: identify versions
// getElementById can match elements by name instead of ID
if(a.id===i)return n.push(a),n}else
// Support: IE, Opera, Webkit
// TODO: identify versions
// getElementById can match elements by name instead of ID
if(d&&(a=d.getElementById(i))&&L(e,a)&&a.id===i)return n.push(a),n}else{if(c[2])return Z.apply(n,e.getElementsByTagName(t)),n;if((i=c[3])&&w.getElementsByClassName&&e.getElementsByClassName)return Z.apply(n,e.getElementsByClassName(i)),n}
// Take advantage of querySelectorAll
if(w.qsa&&!W[t+" "]&&(!D||!D.test(t))){if(1!==v)d=e,p=t;else if("object"!==e.nodeName.toLowerCase()){for(
// Capture the context ID, setting it first if necessary
(u=e.getAttribute("id"))?u=u.replace($t,"\\$&"):e.setAttribute("id",u=q),
// Prefix every selector in the list
f=S(t),o=f.length,s=ht.test(u)?"#"+u:"[id='"+u+"']";o--;)f[o]=s+" "+h(f[o]);p=f.join(","),
// Expand context for sibling selectors
d=yt.test(t)&&l(e.parentNode)||e}if(p)try{return Z.apply(n,d.querySelectorAll(p)),n}catch(g){}finally{u===q&&e.removeAttribute("id")}}}
// All others
return E(t.replace(ut,"$1"),e,n,r)}/**
	 * Create key-value caches of limited size
	 * @returns {function(string, object)} Returns the Object data after storing it on itself with
	 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
	 *	deleting the oldest entry
	 */
function n(){function t(n,r){
// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
// Only keep the most recent entries
return e.push(n+" ")>x.cacheLength&&delete t[e.shift()],t[n+" "]=r}var e=[];return t}/**
	 * Mark a function for special use by Sizzle
	 * @param {Function} fn The function to mark
	 */
function r(t){return t[q]=!0,t}/**
	 * Support testing using an element
	 * @param {Function} fn Passed the created div and expects a boolean result
	 */
function i(t){var e=j.createElement("div");try{return!!t(e)}catch(n){return!1}finally{
// Remove from its parent by default
e.parentNode&&e.parentNode.removeChild(e),
// release memory in IE
e=null}}/**
	 * Adds the same handler for all of the specified attrs
	 * @param {String} attrs Pipe-separated list of attributes
	 * @param {Function} handler The method that will be applied
	 */
function o(t,e){for(var n=t.split("|"),r=n.length;r--;)x.attrHandle[n[r]]=e}/**
	 * Checks document order of two siblings
	 * @param {Element} a
	 * @param {Element} b
	 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
	 */
function a(t,e){var n=e&&t,r=n&&1===t.nodeType&&1===e.nodeType&&(~e.sourceIndex||G)-(~t.sourceIndex||G);
// Use IE sourceIndex if available on both nodes
if(r)return r;
// Check if b follows a
if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}/**
	 * Returns a function to use in pseudos for input types
	 * @param {String} type
	 */
function u(t){return function(e){var n=e.nodeName.toLowerCase();return"input"===n&&e.type===t}}/**
	 * Returns a function to use in pseudos for buttons
	 * @param {String} type
	 */
function s(t){return function(e){var n=e.nodeName.toLowerCase();return("input"===n||"button"===n)&&e.type===t}}/**
	 * Returns a function to use in pseudos for positionals
	 * @param {Function} fn
	 */
function c(t){return r(function(e){return e=+e,r(function(n,r){
// Match elements found at the specified indexes
for(var i,o=t([],n.length,e),a=o.length;a--;)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))})})}/**
	 * Checks a node for validity as a Sizzle context
	 * @param {Element|Object=} context
	 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
	 */
function l(t){return t&&"undefined"!=typeof t.getElementsByTagName&&t}
// Easy API for creating new setFilters
function f(){}function h(t){for(var e=0,n=t.length,r="";e<n;e++)r+=t[e].value;return r}function p(t,e,n){var r=e.dir,i=n&&"parentNode"===r,o=V++;
// Check against closest ancestor/preceding element
// Check against all ancestor/preceding elements
return e.first?function(e,n,o){for(;e=e[r];)if(1===e.nodeType||i)return t(e,n,o)}:function(e,n,a){var u,s,c,l=[F,o];
// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
if(a){for(;e=e[r];)if((1===e.nodeType||i)&&t(e,n,a))return!0}else for(;e=e[r];)if(1===e.nodeType||i){if(c=e[q]||(e[q]={}),
// Support: IE <9 only
// Defend against cloned attroperties (jQuery gh-1709)
s=c[e.uniqueID]||(c[e.uniqueID]={}),(u=s[r])&&u[0]===F&&u[1]===o)
// Assign to newCache so results back-propagate to previous elements
return l[2]=u[2];
// A match means we're done; a fail means we have to keep checking
if(
// Reuse newcache so results back-propagate to previous elements
s[r]=l,l[2]=t(e,n,a))return!0}}}function d(t){return t.length>1?function(e,n,r){for(var i=t.length;i--;)if(!t[i](e,n,r))return!1;return!0}:t[0]}function v(t,n,r){for(var i=0,o=n.length;i<o;i++)e(t,n[i],r);return r}function g(t,e,n,r,i){for(var o,a=[],u=0,s=t.length,c=null!=e;u<s;u++)(o=t[u])&&(n&&!n(o,r,i)||(a.push(o),c&&e.push(u)));return a}function m(t,e,n,i,o,a){return i&&!i[q]&&(i=m(i)),o&&!o[q]&&(o=m(o,a)),r(function(r,a,u,s){var c,l,f,h=[],p=[],d=a.length,
// Get initial elements from seed or context
m=r||v(e||"*",u.nodeType?[u]:u,[]),
// Prefilter to get matcher input, preserving a map for seed-results synchronization
y=!t||!r&&e?m:g(m,h,t,u,s),$=n?
// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
o||(r?t:d||i)?
// ...intermediate processing is necessary
[]:
// ...otherwise use results directly
a:y;
// Apply postFilter
if(
// Find primary matches
n&&n(y,$,u,s),i)for(c=g($,p),i(c,[],u,s),
// Un-match failing elements by moving them back to matcherIn
l=c.length;l--;)(f=c[l])&&($[p[l]]=!(y[p[l]]=f));if(r){if(o||t){if(o){for(
// Get the final matcherOut by condensing this intermediate into postFinder contexts
c=[],l=$.length;l--;)(f=$[l])&&
// Restore matcherIn since elem is not yet a final match
c.push(y[l]=f);o(null,$=[],c,s)}for(
// Move matched elements from seed to results to keep them synchronized
l=$.length;l--;)(f=$[l])&&(c=o?tt(r,f):h[l])>-1&&(r[c]=!(a[c]=f))}}else $=g($===a?$.splice(d,$.length):$),o?o(null,a,$,s):Z.apply(a,$)})}function y(t){for(var e,n,r,i=t.length,o=x.relative[t[0].type],a=o||x.relative[" "],u=o?1:0,
// The foundational matcher ensures that elements are reachable from top-level context(s)
s=p(function(t){return t===e},a,!0),c=p(function(t){return tt(e,t)>-1},a,!0),l=[function(t,n,r){var i=!o&&(r||n!==k)||((e=n).nodeType?s(t,n,r):c(t,n,r));
// Avoid hanging onto element (issue #299)
return e=null,i}];u<i;u++)if(n=x.relative[t[u].type])l=[p(d(l),n)];else{
// Return special upon seeing a positional matcher
if(n=x.filter[t[u].type].apply(null,t[u].matches),n[q]){for(
// Find the next relative operator (if any) for proper handling
r=++u;r<i&&!x.relative[t[r].type];r++);
// If the preceding token was a descendant combinator, insert an implicit any-element `*`
return m(u>1&&d(l),u>1&&h(t.slice(0,u-1).concat({value:" "===t[u-2].type?"*":""})).replace(ut,"$1"),n,u<r&&y(t.slice(u,r)),r<i&&y(t=t.slice(r)),r<i&&h(t))}l.push(n)}return d(l)}function $(t,n){var i=n.length>0,o=t.length>0,a=function(r,a,u,s,c){var l,f,h,p=0,d="0",v=r&&[],m=[],y=k,
// We must always have either seed elements or outermost context
$=r||o&&x.find.TAG("*",c),
// Use integer dirruns iff this is the outermost matcher
b=F+=null==y?1:Math.random()||.1,w=$.length;
// Add elements passing elementMatchers directly to results
// Support: IE<9, Safari
// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
for(c&&(k=a===j||a||c);d!==w&&null!=(l=$[d]);d++){if(o&&l){for(f=0,a||l.ownerDocument===j||(R(l),u=!P);h=t[f++];)if(h(l,a||j,u)){s.push(l);break}c&&(F=b)}
// Track unmatched elements for set filters
i&&(
// They will have gone through all possible matchers
(l=!h&&l)&&p--,
// Lengthen the array for every element, matched or not
r&&v.push(l))}
// Apply set filters to unmatched elements
// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
// no element matchers and no seed.
// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
// case, which will result in a "00" `matchedCount` that differs from `i` but is also
// numerically zero.
if(
// `i` is now the count of elements visited above, and adding it to `matchedCount`
// makes the latter nonnegative.
p+=d,i&&d!==p){for(f=0;h=n[f++];)h(v,m,a,u);if(r){
// Reintegrate element matches to eliminate the need for sorting
if(p>0)for(;d--;)v[d]||m[d]||(m[d]=Y.call(s));
// Discard index placeholder values to get only actual matches
m=g(m)}
// Add matches to results
Z.apply(s,m),
// Seedless set matches succeeding multiple successful matchers stipulate sorting
c&&!r&&m.length>0&&p+n.length>1&&e.uniqueSort(s)}
// Override manipulation of globals by nested matchers
return c&&(F=b,k=y),v};return i?r(a):a}var b,w,x,_,C,S,A,E,k,T,O,
// Local document vars
R,j,N,P,D,M,I,L,
// Instance-specific data
q="sizzle"+1*new Date,U=t.document,F=0,V=0,H=n(),B=n(),W=n(),z=function(t,e){return t===e&&(O=!0),0},
// General-purpose constants
G=1<<31,
// Instance methods
X={}.hasOwnProperty,J=[],Y=J.pop,K=J.push,Z=J.push,Q=J.slice,
// Use a stripped-down indexOf as it's faster than native
// http://jsperf.com/thor-indexof-vs-for/5
tt=function(t,e){for(var n=0,r=t.length;n<r;n++)if(t[n]===e)return n;return-1},et="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
// Regular expressions
// http://www.w3.org/TR/css3-selectors/#whitespace
nt="[\\x20\\t\\r\\n\\f]",
// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
rt="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",
// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
it="\\["+nt+"*("+rt+")(?:"+nt+
// Operator (capture 2)
"*([*^$|!~]?=)"+nt+
// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+rt+"))|)"+nt+"*\\]",ot=":("+rt+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+it+")*)|.*)\\)|)",
// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
at=new RegExp(nt+"+","g"),ut=new RegExp("^"+nt+"+|((?:^|[^\\\\])(?:\\\\.)*)"+nt+"+$","g"),st=new RegExp("^"+nt+"*,"+nt+"*"),ct=new RegExp("^"+nt+"*([>+~]|"+nt+")"+nt+"*"),lt=new RegExp("="+nt+"*([^\\]'\"]*?)"+nt+"*\\]","g"),ft=new RegExp(ot),ht=new RegExp("^"+rt+"$"),pt={ID:new RegExp("^#("+rt+")"),CLASS:new RegExp("^\\.("+rt+")"),TAG:new RegExp("^("+rt+"|[*])"),ATTR:new RegExp("^"+it),PSEUDO:new RegExp("^"+ot),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+nt+"*(even|odd|(([+-]|)(\\d*)n|)"+nt+"*(?:([+-]|)"+nt+"*(\\d+)|))"+nt+"*\\)|)","i"),bool:new RegExp("^(?:"+et+")$","i"),
// For use in libraries implementing .is()
// We use this for POS matching in `select`
needsContext:new RegExp("^"+nt+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+nt+"*((?:-\\d)?\\d*)"+nt+"*\\)|)(?=[^-]|$)","i")},dt=/^(?:input|select|textarea|button)$/i,vt=/^h\d$/i,gt=/^[^{]+\{\s*\[native \w/,
// Easily-parseable/retrievable ID or TAG or CLASS selectors
mt=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,yt=/[+~]/,$t=/'|\\/g,
// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
bt=new RegExp("\\\\([\\da-f]{1,6}"+nt+"?|("+nt+")|.)","ig"),wt=function(t,e,n){var r="0x"+e-65536;
// NaN means non-codepoint
// Support: Firefox<24
// Workaround erroneous numeric interpretation of +"0x"
// BMP codepoint
// Supplemental Plane codepoint (surrogate pair)
return r!==r||n?e:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},
// Used for iframes
// See setDocument()
// Removing the function wrapper causes a "Permission Denied"
// error in IE
xt=function(){R()};
// Optimize for push.apply( _, NodeList )
try{Z.apply(J=Q.call(U.childNodes),U.childNodes),
// Support: Android<4.0
// Detect silently failing push.apply
J[U.childNodes.length].nodeType}catch(_t){Z={apply:J.length?
// Leverage slice if possible
function(t,e){K.apply(t,Q.call(e))}:
// Support: IE<9
// Otherwise append directly
function(t,e){
// Can't trust NodeList.length
for(var n=t.length,r=0;t[n++]=e[r++];);t.length=n-1}}}
// Expose support vars for convenience
w=e.support={},/**
	 * Detects XML nodes
	 * @param {Element|Object} elem An element or a document
	 * @returns {Boolean} True iff elem is a non-HTML XML node
	 */
C=e.isXML=function(t){
// documentElement is verified for cases where it doesn't yet exist
// (such as loading iframes in IE - #4833)
var e=t&&(t.ownerDocument||t).documentElement;return!!e&&"HTML"!==e.nodeName},/**
	 * Sets document-related variables once based on the current document
	 * @param {Element|Object} [doc] An element or document object to use to set the document
	 * @returns {Object} Returns the current document
	 */
R=e.setDocument=function(t){var e,n,r=t?t.ownerDocument||t:U;
// Return early if doc is invalid or already selected
// Return early if doc is invalid or already selected
// Update global variables
// Support: IE 9-11, Edge
// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
// Support: IE 11
/* Attributes
		---------------------------------------------------------------------- */
// Support: IE<8
// Verify that getAttribute really returns attributes and not properties
// (excepting IE8 booleans)
/* getElement(s)By*
		---------------------------------------------------------------------- */
// Check if getElementsByTagName("*") returns only elements
// Support: IE<9
// Support: IE<10
// Check if getElementById returns elements by name
// The broken getElementById methods don't pick up programatically-set names,
// so use a roundabout getElementsByName test
// ID find and filter
// Support: IE6/7
// getElementById is not reliable as a find shortcut
// Tag
// Class
/* QSA/matchesSelector
		---------------------------------------------------------------------- */
// QSA and matchesSelector support
// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
// qSa(:focus) reports false when true (Chrome 21)
// We allow this because of a bug in IE8/9 that throws an error
// whenever `document.activeElement` is accessed on an iframe
// So, we allow :focus to pass through QSA all the time to avoid the IE error
// See http://bugs.jquery.com/ticket/13378
// Build QSA regex
// Regex strategy adopted from Diego Perini
/* Contains
		---------------------------------------------------------------------- */
// Element contains another
// Purposefully self-exclusive
// As in, an element does not contain itself
/* Sorting
		---------------------------------------------------------------------- */
// Document order sorting
return r!==j&&9===r.nodeType&&r.documentElement?(j=r,N=j.documentElement,P=!C(j),(n=j.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",xt,!1):n.attachEvent&&n.attachEvent("onunload",xt)),w.attributes=i(function(t){return t.className="i",!t.getAttribute("className")}),w.getElementsByTagName=i(function(t){return t.appendChild(j.createComment("")),!t.getElementsByTagName("*").length}),w.getElementsByClassName=gt.test(j.getElementsByClassName),w.getById=i(function(t){return N.appendChild(t).id=q,!j.getElementsByName||!j.getElementsByName(q).length}),w.getById?(x.find.ID=function(t,e){if("undefined"!=typeof e.getElementById&&P){var n=e.getElementById(t);return n?[n]:[]}},x.filter.ID=function(t){var e=t.replace(bt,wt);return function(t){return t.getAttribute("id")===e}}):(delete x.find.ID,x.filter.ID=function(t){var e=t.replace(bt,wt);return function(t){var n="undefined"!=typeof t.getAttributeNode&&t.getAttributeNode("id");return n&&n.value===e}}),x.find.TAG=w.getElementsByTagName?function(t,e){return"undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t):w.qsa?e.querySelectorAll(t):void 0}:function(t,e){var n,r=[],i=0,
// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
o=e.getElementsByTagName(t);
// Filter out possible comments
if("*"===t){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},x.find.CLASS=w.getElementsByClassName&&function(t,e){if("undefined"!=typeof e.getElementsByClassName&&P)return e.getElementsByClassName(t)},M=[],D=[],(w.qsa=gt.test(j.querySelectorAll))&&(i(function(t){
// Select is set to empty string on purpose
// This is to test IE's treatment of not explicitly
// setting a boolean content attribute,
// since its presence should be enough
// http://bugs.jquery.com/ticket/12359
N.appendChild(t).innerHTML="<a id='"+q+"'></a><select id='"+q+"-\r\\' msallowcapture=''><option selected=''></option></select>",
// Support: IE8, Opera 11-12.16
// Nothing should be selected when empty strings follow ^= or $= or *=
// The test attribute must be unknown in Opera but "safe" for WinRT
// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
t.querySelectorAll("[msallowcapture^='']").length&&D.push("[*^$]="+nt+"*(?:''|\"\")"),
// Support: IE8
// Boolean attributes and "value" are not treated correctly
t.querySelectorAll("[selected]").length||D.push("\\["+nt+"*(?:value|"+et+")"),
// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
t.querySelectorAll("[id~="+q+"-]").length||D.push("~="),
// Webkit/Opera - :checked should return selected option elements
// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
// IE8 throws error here and will not see later tests
t.querySelectorAll(":checked").length||D.push(":checked"),
// Support: Safari 8+, iOS 8+
// https://bugs.webkit.org/show_bug.cgi?id=136851
// In-page `selector#id sibing-combinator selector` fails
t.querySelectorAll("a#"+q+"+*").length||D.push(".#.+[+~]")}),i(function(t){
// Support: Windows 8 Native Apps
// The type and name attributes are restricted during .innerHTML assignment
var e=j.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),
// Support: IE8
// Enforce case-sensitivity of name attribute
t.querySelectorAll("[name=d]").length&&D.push("name"+nt+"*[*^$|!~]?="),
// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
// IE8 throws error here and will not see later tests
t.querySelectorAll(":enabled").length||D.push(":enabled",":disabled"),
// Opera 10-11 does not throw on post-comma invalid pseudos
t.querySelectorAll("*,:x"),D.push(",.*:")})),(w.matchesSelector=gt.test(I=N.matches||N.webkitMatchesSelector||N.mozMatchesSelector||N.oMatchesSelector||N.msMatchesSelector))&&i(function(t){
// Check to see if it's possible to do matchesSelector
// on a disconnected node (IE 9)
w.disconnectedMatch=I.call(t,"div"),
// This should fail with an exception
// Gecko does not error, returns false instead
I.call(t,"[s!='']:x"),M.push("!=",ot)}),D=D.length&&new RegExp(D.join("|")),M=M.length&&new RegExp(M.join("|")),e=gt.test(N.compareDocumentPosition),L=e||gt.test(N.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,r=e&&e.parentNode;return t===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):t.compareDocumentPosition&&16&t.compareDocumentPosition(r)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},z=e?function(t,e){
// Flag for duplicate removal
if(t===e)return O=!0,0;
// Sort on method existence if only one input has compareDocumentPosition
var n=!t.compareDocumentPosition-!e.compareDocumentPosition;
// Calculate position if both inputs belong to the same document
// Otherwise we know they are disconnected
// Disconnected nodes
// Choose the first element that is related to our preferred document
return n?n:(n=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1,1&n||!w.sortDetached&&e.compareDocumentPosition(t)===n?t===j||t.ownerDocument===U&&L(U,t)?-1:e===j||e.ownerDocument===U&&L(U,e)?1:T?tt(T,t)-tt(T,e):0:4&n?-1:1)}:function(t,e){
// Exit early if the nodes are identical
if(t===e)return O=!0,0;var n,r=0,i=t.parentNode,o=e.parentNode,u=[t],s=[e];
// Parentless nodes are either documents or disconnected
if(!i||!o)return t===j?-1:e===j?1:i?-1:o?1:T?tt(T,t)-tt(T,e):0;if(i===o)return a(t,e);for(
// Otherwise we need full lists of their ancestors for comparison
n=t;n=n.parentNode;)u.unshift(n);for(n=e;n=n.parentNode;)s.unshift(n);
// Walk down the tree looking for a discrepancy
for(;u[r]===s[r];)r++;
// Do a sibling check if the nodes have a common ancestor
// Otherwise nodes in our document sort first
return r?a(u[r],s[r]):u[r]===U?-1:s[r]===U?1:0},j):j},e.matches=function(t,n){return e(t,null,null,n)},e.matchesSelector=function(t,n){if(
// Set document vars if needed
(t.ownerDocument||t)!==j&&R(t),
// Make sure that attribute selectors are quoted
n=n.replace(lt,"='$1']"),w.matchesSelector&&P&&!W[n+" "]&&(!M||!M.test(n))&&(!D||!D.test(n)))try{var r=I.call(t,n);
// IE 9's matchesSelector returns false on disconnected nodes
if(r||w.disconnectedMatch||
// As well, disconnected nodes are said to be in a document
// fragment in IE 9
t.document&&11!==t.document.nodeType)return r}catch(i){}return e(n,j,null,[t]).length>0},e.contains=function(t,e){
// Set document vars if needed
return(t.ownerDocument||t)!==j&&R(t),L(t,e)},e.attr=function(t,e){
// Set document vars if needed
(t.ownerDocument||t)!==j&&R(t);var n=x.attrHandle[e.toLowerCase()],
// Don't get fooled by Object.prototype properties (jQuery #13807)
r=n&&X.call(x.attrHandle,e.toLowerCase())?n(t,e,!P):void 0;return void 0!==r?r:w.attributes||!P?t.getAttribute(e):(r=t.getAttributeNode(e))&&r.specified?r.value:null},e.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},/**
	 * Document sorting and removing duplicates
	 * @param {ArrayLike} results
	 */
e.uniqueSort=function(t){var e,n=[],r=0,i=0;if(
// Unless we *know* we can detect duplicates, assume their presence
O=!w.detectDuplicates,T=!w.sortStable&&t.slice(0),t.sort(z),O){for(;e=t[i++];)e===t[i]&&(r=n.push(i));for(;r--;)t.splice(n[r],1)}
// Clear input after sorting to release objects
// See https://github.com/jquery/sizzle/pull/225
return T=null,t},/**
	 * Utility function for retrieving the text value of an array of DOM nodes
	 * @param {Array|Element} elem
	 */
_=e.getText=function(t){var e,n="",r=0,i=t.nodeType;if(i){if(1===i||9===i||11===i){
// Use textContent for elements
// innerText usage removed for consistency of new lines (jQuery #11153)
if("string"==typeof t.textContent)return t.textContent;
// Traverse its children
for(t=t.firstChild;t;t=t.nextSibling)n+=_(t)}else if(3===i||4===i)return t.nodeValue}else
// If no nodeType, this is expected to be an array
for(;e=t[r++];)
// Do not traverse comment nodes
n+=_(e);
// Do not include comment or processing instruction nodes
return n},x=e.selectors={
// Can be adjusted by the user
cacheLength:50,createPseudo:r,match:pt,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){
// Move the given value to match[3] whether quoted or unquoted
return t[1]=t[1].replace(bt,wt),t[3]=(t[3]||t[4]||t[5]||"").replace(bt,wt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){/* matches from matchExpr["CHILD"]
					1 type (only|nth|...)
					2 what (child|of-type)
					3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
					4 xn-component of xn+y argument ([+-]?\d*n|)
					5 sign of xn-component
					6 x of xn-component
					7 sign of y-component
					8 y of y-component
				*/
// nth-* requires argument
// numeric x and y parameters for Expr.filter.CHILD
// remember that false/true cast respectively to 0/1
return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||e.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&e.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];
// Accept quoted arguments as-is
// Get excess from tokenize (recursively)
// advance to the next closing parenthesis
// excess is a negative index
return pt.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&ft.test(n)&&(e=S(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(bt,wt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=H[t+" "];return e||(e=new RegExp("(^|"+nt+")"+t+"("+nt+"|$)"))&&H(t,function(t){return e.test("string"==typeof t.className&&t.className||"undefined"!=typeof t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(t,n,r){return function(i){var o=e.attr(i,t);return null==o?"!="===n:!n||(o+="","="===n?o===r:"!="===n?o!==r:"^="===n?r&&0===o.indexOf(r):"*="===n?r&&o.indexOf(r)>-1:"$="===n?r&&o.slice(-r.length)===r:"~="===n?(" "+o.replace(at," ")+" ").indexOf(r)>-1:"|="===n&&(o===r||o.slice(0,r.length+1)===r+"-"))}},CHILD:function(t,e,n,r,i){var o="nth"!==t.slice(0,3),a="last"!==t.slice(-4),u="of-type"===e;
// Shortcut for :nth-*(n)
return 1===r&&0===i?function(t){return!!t.parentNode}:function(e,n,s){var c,l,f,h,p,d,v=o!==a?"nextSibling":"previousSibling",g=e.parentNode,m=u&&e.nodeName.toLowerCase(),y=!s&&!u,$=!1;if(g){
// :(first|last|only)-(child|of-type)
if(o){for(;v;){for(h=e;h=h[v];)if(u?h.nodeName.toLowerCase()===m:1===h.nodeType)return!1;
// Reverse direction for :only-* (if we haven't yet done so)
d=v="only"===t&&!d&&"nextSibling"}return!0}
// non-xml :nth-child(...) stores cache data on `parent`
if(d=[a?g.firstChild:g.lastChild],a&&y){for(
// Seek `elem` from a previously-cached index
// ...in a gzip-friendly way
h=g,f=h[q]||(h[q]={}),
// Support: IE <9 only
// Defend against cloned attroperties (jQuery gh-1709)
l=f[h.uniqueID]||(f[h.uniqueID]={}),c=l[t]||[],p=c[0]===F&&c[1],$=p&&c[2],h=p&&g.childNodes[p];h=++p&&h&&h[v]||(
// Fallback to seeking `elem` from the start
$=p=0)||d.pop();)
// When found, cache indexes on `parent` and break
if(1===h.nodeType&&++$&&h===e){l[t]=[F,p,$];break}}else
// xml :nth-child(...)
// or :nth-last-child(...) or :nth(-last)?-of-type(...)
if(
// Use previously-cached element index if available
y&&(
// ...in a gzip-friendly way
h=e,f=h[q]||(h[q]={}),
// Support: IE <9 only
// Defend against cloned attroperties (jQuery gh-1709)
l=f[h.uniqueID]||(f[h.uniqueID]={}),c=l[t]||[],p=c[0]===F&&c[1],$=p),$===!1)
// Use the same loop as above to seek `elem` from the start
for(;(h=++p&&h&&h[v]||($=p=0)||d.pop())&&((u?h.nodeName.toLowerCase()!==m:1!==h.nodeType)||!++$||(
// Cache the index of each encountered element
y&&(f=h[q]||(h[q]={}),
// Support: IE <9 only
// Defend against cloned attroperties (jQuery gh-1709)
l=f[h.uniqueID]||(f[h.uniqueID]={}),l[t]=[F,$]),h!==e)););
// Incorporate the offset, then check against cycle size
return $-=i,$===r||$%r===0&&$/r>=0}}},PSEUDO:function(t,n){
// pseudo-class names are case-insensitive
// http://www.w3.org/TR/selectors/#pseudo-classes
// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
// Remember that setFilters inherits from pseudos
var i,o=x.pseudos[t]||x.setFilters[t.toLowerCase()]||e.error("unsupported pseudo: "+t);
// The user may use createPseudo to indicate that
// arguments are needed to create the filter function
// just as Sizzle does
// The user may use createPseudo to indicate that
// arguments are needed to create the filter function
// just as Sizzle does
// But maintain support for old signatures
return o[q]?o(n):o.length>1?(i=[t,t,"",n],x.setFilters.hasOwnProperty(t.toLowerCase())?r(function(t,e){for(var r,i=o(t,n),a=i.length;a--;)r=tt(t,i[a]),t[r]=!(e[r]=i[a])}):function(t){return o(t,0,i)}):o}},pseudos:{
// Potentially complex pseudos
not:r(function(t){
// Trim the selector passed to compile
// to avoid treating leading and trailing
// spaces as combinators
var e=[],n=[],i=A(t.replace(ut,"$1"));return i[q]?r(function(t,e,n,r){
// Match elements unmatched by `matcher`
for(var o,a=i(t,null,r,[]),u=t.length;u--;)(o=a[u])&&(t[u]=!(e[u]=o))}):function(t,r,o){
// Don't keep the element (issue #299)
return e[0]=t,i(e,null,o,n),e[0]=null,!n.pop()}}),has:r(function(t){return function(n){return e(t,n).length>0}}),contains:r(function(t){return t=t.replace(bt,wt),function(e){return(e.textContent||e.innerText||_(e)).indexOf(t)>-1}}),
// "Whether an element is represented by a :lang() selector
// is based solely on the element's language value
// being equal to the identifier C,
// or beginning with the identifier C immediately followed by "-".
// The matching of C against the element's language value is performed case-insensitively.
// The identifier C does not have to be a valid language name."
// http://www.w3.org/TR/selectors/#lang-pseudo
lang:r(function(t){
// lang value must be a valid identifier
return ht.test(t||"")||e.error("unsupported lang: "+t),t=t.replace(bt,wt).toLowerCase(),function(e){var n;do if(n=P?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return n=n.toLowerCase(),n===t||0===n.indexOf(t+"-");while((e=e.parentNode)&&1===e.nodeType);return!1}}),
// Miscellaneous
target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===N},focus:function(t){return t===j.activeElement&&(!j.hasFocus||j.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},
// Boolean properties
enabled:function(t){return t.disabled===!1},disabled:function(t){return t.disabled===!0},checked:function(t){
// In CSS3, :checked should return both checked and selected elements
// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){
// Accessing this property makes selected-by-default
// options in Safari work properly
return t.parentNode&&t.parentNode.selectedIndex,t.selected===!0},
// Contents
empty:function(t){
// http://www.w3.org/TR/selectors/#empty-pseudo
// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
//   but not by others (comment: 8; processing instruction: 7; etc.)
// nodeType < 6 works because attributes (2) do not appear as children
for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!x.pseudos.empty(t)},
// Element/input types
header:function(t){return vt.test(t.nodeName)},input:function(t){return dt.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;
// Support: IE<8
// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},
// Position-in-collection
first:c(function(){return[0]}),last:c(function(t,e){return[e-1]}),eq:c(function(t,e,n){return[n<0?n+e:n]}),even:c(function(t,e){for(var n=0;n<e;n+=2)t.push(n);return t}),odd:c(function(t,e){for(var n=1;n<e;n+=2)t.push(n);return t}),lt:c(function(t,e,n){for(var r=n<0?n+e:n;--r>=0;)t.push(r);return t}),gt:c(function(t,e,n){for(var r=n<0?n+e:n;++r<e;)t.push(r);return t})}},x.pseudos.nth=x.pseudos.eq;
// Add button/input type pseudos
for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})x.pseudos[b]=u(b);for(b in{submit:!0,reset:!0})x.pseudos[b]=s(b);/**
	 * A low-level selection function that works with Sizzle's compiled
	 *  selector functions
	 * @param {String|Function} selector A selector or a pre-compiled
	 *  selector function built with Sizzle.compile
	 * @param {Element} context
	 * @param {Array} [results]
	 * @param {Array} [seed] A set of elements to match against
	 */
// One-time assignments
// Sort stability
// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
// Initialize against the default document
// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
// Support: IE<8
// Prevent attribute/property "interpolation"
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
// Support: IE<9
// Use defaultValue in place of getAttribute("value")
// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
return f.prototype=x.filters=x.pseudos,x.setFilters=new f,S=e.tokenize=function(t,n){var r,i,o,a,u,s,c,l=B[t+" "];if(l)return n?0:l.slice(0);for(u=t,s=[],c=x.preFilter;u;){
// Comma and first run
r&&!(i=st.exec(u))||(i&&(
// Don't consume trailing commas as valid
u=u.slice(i[0].length)||u),s.push(o=[])),r=!1,
// Combinators
(i=ct.exec(u))&&(r=i.shift(),o.push({value:r,
// Cast descendant combinators to space
type:i[0].replace(ut," ")}),u=u.slice(r.length));
// Filters
for(a in x.filter)!(i=pt[a].exec(u))||c[a]&&!(i=c[a](i))||(r=i.shift(),o.push({value:r,type:a,matches:i}),u=u.slice(r.length));if(!r)break}
// Return the length of the invalid excess
// if we're just parsing
// Otherwise, throw an error or return tokens
// Cache the tokens
return n?u.length:u?e.error(t):B(t,s).slice(0)},A=e.compile=function(t,e){var n,r=[],i=[],o=W[t+" "];if(!o){for(
// Generate a function of recursive functions that can be used to check each element
e||(e=S(t)),n=e.length;n--;)o=y(e[n]),o[q]?r.push(o):i.push(o);
// Cache the compiled function
o=W(t,$(i,r)),
// Save selector and tokenization
o.selector=t}return o},E=e.select=function(t,e,n,r){var i,o,a,u,s,c="function"==typeof t&&t,f=!r&&S(t=c.selector||t);
// Try to minimize operations if there is only one selector in the list and no seed
// (the latter of which guarantees us context)
if(n=n||[],1===f.length){if(
// Reduce context if the leading compound selector is an ID
o=f[0]=f[0].slice(0),o.length>2&&"ID"===(a=o[0]).type&&w.getById&&9===e.nodeType&&P&&x.relative[o[1].type]){if(e=(x.find.ID(a.matches[0].replace(bt,wt),e)||[])[0],!e)return n;c&&(e=e.parentNode),t=t.slice(o.shift().value.length)}for(
// Fetch a seed set for right-to-left matching
i=pt.needsContext.test(t)?0:o.length;i--&&(a=o[i],!x.relative[u=a.type]);)if((s=x.find[u])&&(r=s(a.matches[0].replace(bt,wt),yt.test(o[0].type)&&l(e.parentNode)||e))){if(
// If seed is empty or no tokens remain, we can return early
o.splice(i,1),t=r.length&&h(o),!t)return Z.apply(n,r),n;break}}
// Compile and execute a filtering function if one is not provided
// Provide `match` to avoid retokenization if we modified the selector above
return(c||A(t,f))(r,e,!P,n,!e||yt.test(t)&&l(e.parentNode)||e),n},w.sortStable=q.split("").sort(z).join("")===q,w.detectDuplicates=!!O,R(),w.sortDetached=i(function(t){
// Should return 1, but returns 4 (following)
return 1&t.compareDocumentPosition(j.createElement("div"))}),i(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||o("type|href|height|width",function(t,e,n){if(!n)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),w.attributes&&i(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||o("value",function(t,e,n){if(!n&&"input"===t.nodeName.toLowerCase())return t.defaultValue}),i(function(t){return null==t.getAttribute("disabled")})||o(et,function(t,e,n){var r;if(!n)return t[e]===!0?e.toLowerCase():(r=t.getAttributeNode(e))&&r.specified?r.value:null}),e}(n);ct.find=dt,ct.expr=dt.selectors,ct.expr[":"]=ct.expr.pseudos,ct.uniqueSort=ct.unique=dt.uniqueSort,ct.text=dt.getText,ct.isXMLDoc=dt.isXML,ct.contains=dt.contains;var vt=function(t,e,n){for(var r=[],i=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(i&&ct(t).is(n))break;r.push(t)}return r},gt=function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n},mt=ct.expr.match.needsContext,yt=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,$t=/^.[^:#\[\.,]*$/;ct.filter=function(t,e,n){var r=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===r.nodeType?ct.find.matchesSelector(r,t)?[r]:[]:ct.find.matches(t,ct.grep(e,function(t){return 1===t.nodeType}))},ct.fn.extend({find:function(t){var e,n=this.length,r=[],i=this;if("string"!=typeof t)return this.pushStack(ct(t).filter(function(){for(e=0;e<n;e++)if(ct.contains(i[e],this))return!0}));for(e=0;e<n;e++)ct.find(t,i[e],r);
// Needed because $( selector, context ) becomes $( context ).find( selector )
return r=this.pushStack(n>1?ct.unique(r):r),r.selector=this.selector?this.selector+" "+t:t,r},filter:function(t){return this.pushStack(u(this,t||[],!1))},not:function(t){return this.pushStack(u(this,t||[],!0))},is:function(t){
// If this is a positional/relative selector, check membership in the returned set
// so $("p:first").is("p:last") won't return true for a doc with two "p".
return!!u(this,"string"==typeof t&&mt.test(t)?ct(t):t||[],!1).length}});
// Initialize a jQuery object
// A central reference to the root jQuery(document)
var bt,
// A simple way to check for HTML strings
// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
// Strict HTML recognition (#11290: must start with <)
wt=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,xt=ct.fn.init=function(t,e,n){var r,i;
// HANDLE: $(""), $(null), $(undefined), $(false)
if(!t)return this;
// Handle HTML strings
if(
// Method init() accepts an alternate rootjQuery
// so migrate can support jQuery.sub (gh-2101)
n=n||bt,"string"==typeof t){
// Match html or make sure no context is specified for #id
if(
// Assume that strings that start and end with <> are HTML and skip the regex check
r="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:wt.exec(t),!r||!r[1]&&e)return!e||e.jquery?(e||n).find(t):this.constructor(e).find(t);
// HANDLE: $(html) -> $(array)
if(r[1]){
// HANDLE: $(html, props)
if(e=e instanceof ct?e[0]:e,
// Option to run scripts is true for back-compat
// Intentionally let the error be thrown if parseHTML is not present
ct.merge(this,ct.parseHTML(r[1],e&&e.nodeType?e.ownerDocument||e:Q,!0)),yt.test(r[1])&&ct.isPlainObject(e))for(r in e)
// Properties of context are called as methods if possible
ct.isFunction(this[r])?this[r](e[r]):this.attr(r,e[r]);return this}
// Support: Blackberry 4.6
// gEBID returns nodes no longer in the document (#6963)
// Inject the element directly into the jQuery object
return i=Q.getElementById(r[2]),i&&i.parentNode&&(this.length=1,this[0]=i),this.context=Q,this.selector=t,this}
// Execute immediately if ready is not present
return t.nodeType?(this.context=this[0]=t,this.length=1,this):ct.isFunction(t)?void 0!==n.ready?n.ready(t):t(ct):(void 0!==t.selector&&(this.selector=t.selector,this.context=t.context),ct.makeArray(t,this))};
// Give the init function the jQuery prototype for later instantiation
xt.prototype=ct.fn,
// Initialize central reference
bt=ct(Q);var _t=/^(?:parents|prev(?:Until|All))/,
// Methods guaranteed to produce a unique set when starting from a unique set
Ct={children:!0,contents:!0,next:!0,prev:!0};ct.fn.extend({has:function(t){var e=ct(t,this),n=e.length;return this.filter(function(){for(var t=0;t<n;t++)if(ct.contains(this,e[t]))return!0})},closest:function(t,e){for(var n,r=0,i=this.length,o=[],a=mt.test(t)||"string"!=typeof t?ct(t,e||this.context):0;r<i;r++)for(n=this[r];n&&n!==e;n=n.parentNode)
// Always skip document fragments
if(n.nodeType<11&&(a?a.index(n)>-1:
// Don't pass non-elements to Sizzle
1===n.nodeType&&ct.find.matchesSelector(n,t))){o.push(n);break}return this.pushStack(o.length>1?ct.uniqueSort(o):o)},
// Determine the position of an element within the set
index:function(t){
// No argument, return index in parent
// No argument, return index in parent
// Index in selector
// If it receives a jQuery object, the first element is used
return t?"string"==typeof t?rt.call(ct(t),this[0]):rt.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(ct.uniqueSort(ct.merge(this.get(),ct(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),ct.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return vt(t,"parentNode")},parentsUntil:function(t,e,n){return vt(t,"parentNode",n)},next:function(t){return s(t,"nextSibling")},prev:function(t){return s(t,"previousSibling")},nextAll:function(t){return vt(t,"nextSibling")},prevAll:function(t){return vt(t,"previousSibling")},nextUntil:function(t,e,n){return vt(t,"nextSibling",n)},prevUntil:function(t,e,n){return vt(t,"previousSibling",n)},siblings:function(t){return gt((t.parentNode||{}).firstChild,t)},children:function(t){return gt(t.firstChild)},contents:function(t){return t.contentDocument||ct.merge([],t.childNodes)}},function(t,e){ct.fn[t]=function(n,r){var i=ct.map(this,e,n);
// Remove duplicates
// Reverse order for parents* and prev-derivatives
return"Until"!==t.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=ct.filter(r,i)),this.length>1&&(Ct[t]||ct.uniqueSort(i),_t.test(t)&&i.reverse()),this.pushStack(i)}});var St=/\S+/g;/*
	 * Create a callback list using the following parameters:
	 *
	 *	options: an optional list of space-separated options that will change how
	 *			the callback list behaves or a more traditional option object
	 *
	 * By default a callback list will act like an event callback list and can be
	 * "fired" multiple times.
	 *
	 * Possible options:
	 *
	 *	once:			will ensure the callback list can only be fired once (like a Deferred)
	 *
	 *	memory:			will keep track of previous values and will call any callback added
	 *					after the list has been fired right away with the latest "memorized"
	 *					values (like a Deferred)
	 *
	 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
	 *
	 *	stopOnFalse:	interrupt callings when a callback returns false
	 *
	 */
ct.Callbacks=function(t){
// Convert options from String-formatted to Object-formatted if needed
// (we check in cache first)
t="string"==typeof t?c(t):ct.extend({},t);var// Flag to know if list is currently firing
e,
// Last fire value for non-forgettable lists
n,
// Flag to know if list was already fired
r,
// Flag to prevent firing
i,
// Actual callback list
o=[],
// Queue of execution data for repeatable lists
a=[],
// Index of currently firing callback (modified by add/remove as needed)
u=-1,
// Fire callbacks
s=function(){for(
// Enforce single-firing
i=t.once,
// Execute callbacks for all pending executions,
// respecting firingIndex overrides and runtime changes
r=e=!0;a.length;u=-1)for(n=a.shift();++u<o.length;)
// Run callback and check for early termination
o[u].apply(n[0],n[1])===!1&&t.stopOnFalse&&(
// Jump to end and forget the data so .add doesn't re-fire
u=o.length,n=!1);
// Forget the data if we're done with it
t.memory||(n=!1),e=!1,
// Clean up if we're done firing for good
i&&(
// Keep an empty list if we have data for future add calls
o=n?[]:"")},
// Actual Callbacks object
l={
// Add a callback or a collection of callbacks to the list
add:function(){
// If we have memory from a past run, we should fire after adding
return o&&(n&&!e&&(u=o.length-1,a.push(n)),function r(e){ct.each(e,function(e,n){ct.isFunction(n)?t.unique&&l.has(n)||o.push(n):n&&n.length&&"string"!==ct.type(n)&&
// Inspect recursively
r(n)})}(arguments),n&&!e&&s()),this},
// Remove a callback from the list
remove:function(){return ct.each(arguments,function(t,e){for(var n;(n=ct.inArray(e,o,n))>-1;)o.splice(n,1),
// Handle firing indexes
n<=u&&u--}),this},
// Check if a given callback is in the list.
// If no argument is given, return whether or not list has callbacks attached.
has:function(t){return t?ct.inArray(t,o)>-1:o.length>0},
// Remove all callbacks from the list
empty:function(){return o&&(o=[]),this},
// Disable .fire and .add
// Abort any current/pending executions
// Clear all callbacks and values
disable:function(){return i=a=[],o=n="",this},disabled:function(){return!o},
// Disable .fire
// Also disable .add unless we have memory (since it would have no effect)
// Abort any pending executions
lock:function(){return i=a=[],n||(o=n=""),this},locked:function(){return!!i},
// Call all callbacks with the given context and arguments
fireWith:function(t,n){return i||(n=n||[],n=[t,n.slice?n.slice():n],a.push(n),e||s()),this},
// Call all the callbacks with the given arguments
fire:function(){return l.fireWith(this,arguments),this},
// To know if the callbacks have already been called at least once
fired:function(){return!!r}};return l},ct.extend({Deferred:function(t){var e=[
// action, add listener, listener list, final state
["resolve","done",ct.Callbacks("once memory"),"resolved"],["reject","fail",ct.Callbacks("once memory"),"rejected"],["notify","progress",ct.Callbacks("memory")]],n="pending",r={state:function(){return n},always:function(){return i.done(arguments).fail(arguments),this},then:function(){var t=arguments;return ct.Deferred(function(n){ct.each(e,function(e,o){var a=ct.isFunction(t[e])&&t[e];
// deferred[ done | fail | progress ] for forwarding actions to newDefer
i[o[1]](function(){var t=a&&a.apply(this,arguments);t&&ct.isFunction(t.promise)?t.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[o[0]+"With"](this===r?n.promise():this,a?[t]:arguments)})}),t=null}).promise()},
// Get a promise for this deferred
// If obj is provided, the promise aspect is added to the object
promise:function(t){return null!=t?ct.extend(t,r):r}},i={};
// All done!
// Keep pipe for back-compat
// Add list-specific methods
// Make the deferred a promise
// Call given func if any
return r.pipe=r.then,ct.each(e,function(t,o){var a=o[2],u=o[3];
// promise[ done | fail | progress ] = list.add
r[o[1]]=a.add,
// Handle state
u&&a.add(function(){
// state = [ resolved | rejected ]
n=u},e[1^t][2].disable,e[2][2].lock),
// deferred[ resolve | reject | notify ]
i[o[0]]=function(){return i[o[0]+"With"](this===i?r:this,arguments),this},i[o[0]+"With"]=a.fireWith}),r.promise(i),t&&t.call(i,i),i},
// Deferred helper
when:function(t){var e,n,r,i=0,o=tt.call(arguments),a=o.length,
// the count of uncompleted subordinates
u=1!==a||t&&ct.isFunction(t.promise)?a:0,
// the master Deferred.
// If resolveValues consist of only a single Deferred, just use that.
s=1===u?t:ct.Deferred(),
// Update function for both resolve and progress values
c=function(t,n,r){return function(i){n[t]=this,r[t]=arguments.length>1?tt.call(arguments):i,r===e?s.notifyWith(n,r):--u||s.resolveWith(n,r)}};
// Add listeners to Deferred subordinates; treat others as resolved
if(a>1)for(e=new Array(a),n=new Array(a),r=new Array(a);i<a;i++)o[i]&&ct.isFunction(o[i].promise)?o[i].promise().progress(c(i,n,e)).done(c(i,r,o)).fail(s.reject):--u;
// If we're not waiting on anything, resolve the master
return u||s.resolveWith(r,o),s.promise()}});
// The deferred used on DOM ready
var At;ct.fn.ready=function(t){
// Add the callback
return ct.ready.promise().done(t),this},ct.extend({
// Is the DOM ready to be used? Set to true once it occurs.
isReady:!1,
// A counter to track how many items to wait for before
// the ready event fires. See #6781
readyWait:1,
// Hold (or release) the ready event
holdReady:function(t){t?ct.readyWait++:ct.ready(!0)},
// Handle when the DOM is ready
ready:function(t){
// Abort if there are pending holds or we're already ready
(t===!0?--ct.readyWait:ct.isReady)||(
// Remember that the DOM is ready
ct.isReady=!0,
// If a normal DOM Ready event fired, decrement, and wait if need be
t!==!0&&--ct.readyWait>0||(
// If there are functions bound, to execute
At.resolveWith(Q,[ct]),
// Trigger any bound ready events
ct.fn.triggerHandler&&(ct(Q).triggerHandler("ready"),ct(Q).off("ready"))))}}),ct.ready.promise=function(t){
// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE9-10 only
// Older IE sometimes signals "interactive" too soon
// Handle it asynchronously to allow scripts the opportunity to delay ready
// Use the handy event callback
// A fallback to window.onload, that will always work
return At||(At=ct.Deferred(),"complete"===Q.readyState||"loading"!==Q.readyState&&!Q.documentElement.doScroll?n.setTimeout(ct.ready):(Q.addEventListener("DOMContentLoaded",l),n.addEventListener("load",l))),At.promise(t)},
// Kick off the DOM ready check even if the user does not
ct.ready.promise();
// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var Et=function(t,e,n,r,i,o,a){var u=0,s=t.length,c=null==n;
// Sets many values
if("object"===ct.type(n)){i=!0;for(u in n)Et(t,e,u,n[u],!0,o,a)}else if(void 0!==r&&(i=!0,ct.isFunction(r)||(a=!0),c&&(
// Bulk operations run against the entire set
a?(e.call(t,r),e=null):(c=e,e=function(t,e,n){return c.call(ct(t),n)})),e))for(;u<s;u++)e(t[u],n,a?r:r.call(t[u],u,e(t[u],n)));
// Gets
return i?t:c?e.call(t):s?e(t[0],n):o},kt=function(t){
// Accepts only:
//  - Node
//    - Node.ELEMENT_NODE
//    - Node.DOCUMENT_NODE
//  - Object
//    - Any
/* jshint -W018 */
return 1===t.nodeType||9===t.nodeType||!+t.nodeType};f.uid=1,f.prototype={register:function(t,e){var n=e||{};
// If it is a node unlikely to be stringify-ed or looped over
// use plain assignment
return t.nodeType?t[this.expando]=n:Object.defineProperty(t,this.expando,{value:n,writable:!0,configurable:!0}),t[this.expando]},cache:function(t){
// We can accept data for non-element nodes in modern browsers,
// but we should not, see #8335.
// Always return an empty object.
if(!kt(t))return{};
// Check if the owner object already has a cache
var e=t[this.expando];
// If not, create one
// We can accept data for non-element nodes in modern browsers,
// but we should not, see #8335.
// Always return an empty object.
// If it is a node unlikely to be stringify-ed or looped over
// use plain assignment
return e||(e={},kt(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,n){var r,i=this.cache(t);
// Handle: [ owner, key, value ] args
if("string"==typeof e)i[e]=n;else
// Copy the properties one-by-one to the cache object
for(r in e)i[r]=e[r];return i},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][e]},access:function(t,e,n){var r;
// In cases where either:
//
//   1. No key was specified
//   2. A string key was specified, but no value provided
//
// Take the "read" path and allow the get method to determine
// which value to return, respectively either:
//
//   1. The entire cache object
//   2. The data stored at the key
//
// In cases where either:
//
//   1. No key was specified
//   2. A string key was specified, but no value provided
//
// Take the "read" path and allow the get method to determine
// which value to return, respectively either:
//
//   1. The entire cache object
//   2. The data stored at the key
//
// When the key is not a string, or both a key and value
// are specified, set or extend (existing objects) with either:
//
//   1. An object of properties
//   2. A key and value
//
return void 0===e||e&&"string"==typeof e&&void 0===n?(r=this.get(t,e),void 0!==r?r:this.get(t,ct.camelCase(e))):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,r,i,o=t[this.expando];if(void 0!==o){if(void 0===e)this.register(t);else{
// Support array or space separated string of keys
ct.isArray(e)?
// If "name" is an array of keys...
// When data is initially created, via ("key", "val") signature,
// keys will be converted to camelCase.
// Since there is no way to tell _how_ a key was added, remove
// both plain key and camelCase key. #12786
// This will only penalize the array argument path.
r=e.concat(e.map(ct.camelCase)):(i=ct.camelCase(e),
// Try the string as a key before any manipulation
e in o?r=[e,i]:(
// If a key with the spaces exists, use it.
// Otherwise, create an array by matching non-whitespace
r=i,r=r in o?[r]:r.match(St)||[])),n=r.length;for(;n--;)delete o[r[n]]}
// Remove the expando if there's no more data
(void 0===e||ct.isEmptyObject(o))&&(
// Support: Chrome <= 35-45+
// Webkit & Blink performance suffers when deleting properties
// from DOM nodes, so set to undefined instead
// https://code.google.com/p/chromium/issues/detail?id=378607
t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!ct.isEmptyObject(e)}};var Tt=new f,Ot=new f,Rt=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,jt=/[A-Z]/g;ct.extend({hasData:function(t){return Ot.hasData(t)||Tt.hasData(t)},data:function(t,e,n){return Ot.access(t,e,n)},removeData:function(t,e){Ot.remove(t,e)},
// TODO: Now that all calls to _data and _removeData have been replaced
// with direct calls to dataPriv methods, these can be deprecated.
_data:function(t,e,n){return Tt.access(t,e,n)},_removeData:function(t,e){Tt.remove(t,e)}}),ct.fn.extend({data:function(t,e){var n,r,i,o=this[0],a=o&&o.attributes;
// Gets all values
if(void 0===t){if(this.length&&(i=Ot.get(o),1===o.nodeType&&!Tt.get(o,"hasDataAttrs"))){for(n=a.length;n--;)
// Support: IE11+
// The attrs elements can be null (#14894)
a[n]&&(r=a[n].name,0===r.indexOf("data-")&&(r=ct.camelCase(r.slice(5)),h(o,r,i[r])));Tt.set(o,"hasDataAttrs",!0)}return i}
// Sets multiple values
// Sets multiple values
return"object"==typeof t?this.each(function(){Ot.set(this,t)}):Et(this,function(e){var n,r;
// The calling jQuery object (element matches) is not empty
// (and therefore has an element appears at this[ 0 ]) and the
// `value` parameter was not undefined. An empty jQuery object
// will result in `undefined` for elem = this[ 0 ] which will
// throw an exception if an attempt to read a data cache is made.
if(o&&void 0===e){if(
// Attempt to get data from the cache
// with the key as-is
n=Ot.get(o,t)||
// Try to find dashed key if it exists (gh-2779)
// This is for 2.2.x only
Ot.get(o,t.replace(jt,"-$&").toLowerCase()),void 0!==n)return n;if(r=ct.camelCase(t),
// Attempt to get data from the cache
// with the key camelized
n=Ot.get(o,r),void 0!==n)return n;if(
// Attempt to "discover" the data in
// HTML5 custom data-* attrs
n=h(o,r,void 0),void 0!==n)return n}else
// Set the data...
r=ct.camelCase(t),this.each(function(){
// First, attempt to store a copy or reference of any
// data that might've been store with a camelCased key.
var n=Ot.get(this,r);
// For HTML5 data-* attribute interop, we have to
// store property names with dashes in a camelCase form.
// This might not apply to all properties...*
Ot.set(this,r,e),
// *... In the case of properties that might _actually_
// have dashes, we need to also store a copy of that
// unchanged property.
t.indexOf("-")>-1&&void 0!==n&&Ot.set(this,t,e)})},null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each(function(){Ot.remove(this,t)})}}),ct.extend({queue:function(t,e,n){var r;if(t)
// Speed up dequeue by getting out quickly if this is just a lookup
return e=(e||"fx")+"queue",r=Tt.get(t,e),n&&(!r||ct.isArray(n)?r=Tt.access(t,e,ct.makeArray(n)):r.push(n)),r||[]},dequeue:function(t,e){e=e||"fx";var n=ct.queue(t,e),r=n.length,i=n.shift(),o=ct._queueHooks(t,e),a=function(){ct.dequeue(t,e)};
// If the fx queue is dequeued, always remove the progress sentinel
"inprogress"===i&&(i=n.shift(),r--),i&&(
// Add a progress sentinel to prevent the fx queue from being
// automatically dequeued
"fx"===e&&n.unshift("inprogress"),
// Clear up the last queue stop function
delete o.stop,i.call(t,a,o)),!r&&o&&o.empty.fire()},
// Not public - generate a queueHooks object, or return the current one
_queueHooks:function(t,e){var n=e+"queueHooks";return Tt.get(t,n)||Tt.access(t,n,{empty:ct.Callbacks("once memory").add(function(){Tt.remove(t,[e+"queue",n])})})}}),ct.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?ct.queue(this[0],t):void 0===e?this:this.each(function(){var n=ct.queue(this,t,e);
// Ensure a hooks for this queue
ct._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&ct.dequeue(this,t)})},dequeue:function(t){return this.each(function(){ct.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},
// Get a promise resolved when queues of a certain type
// are emptied (fx is the type by default)
promise:function(t,e){var n,r=1,i=ct.Deferred(),o=this,a=this.length,u=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";a--;)n=Tt.get(o[a],t+"queueHooks"),n&&n.empty&&(r++,n.empty.add(u));return u(),i.promise(e)}});var Nt=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Pt=new RegExp("^(?:([+-])=|)("+Nt+")([a-z%]*)$","i"),Dt=["Top","Right","Bottom","Left"],Mt=function(t,e){
// isHidden might be called from jQuery#filter function;
// in that case, element will be second argument
return t=e||t,"none"===ct.css(t,"display")||!ct.contains(t.ownerDocument,t)},It=/^(?:checkbox|radio)$/i,Lt=/<([\w:-]+)/,qt=/^$|\/(?:java|ecma)script/i,Ut={
// Support: IE9
option:[1,"<select multiple='multiple'>","</select>"],
// XHTML parsers do not magically insert elements in the
// same way that tag soup parsers do. So we cannot shorten
// this by omitting <tbody> or other required elements.
thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};
// Support: IE9
Ut.optgroup=Ut.option,Ut.tbody=Ut.tfoot=Ut.colgroup=Ut.caption=Ut.thead,Ut.th=Ut.td;var Ft=/<|&#?\w+;/;!function(){var t=Q.createDocumentFragment(),e=t.appendChild(Q.createElement("div")),n=Q.createElement("input");
// Support: Android 4.0-4.3, Safari<=5.1
// Check state lost if the name is set (#11217)
// Support: Windows Web Apps (WWA)
// `name` and `type` must use .setAttribute for WWA (#14901)
n.setAttribute("type","radio"),n.setAttribute("checked","checked"),n.setAttribute("name","t"),e.appendChild(n),
// Support: Safari<=5.1, Android<4.2
// Older WebKit doesn't clone checked state correctly in fragments
ut.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,
// Support: IE<=11+
// Make sure textarea (and checkbox) defaultValue is properly cloned
e.innerHTML="<textarea>x</textarea>",ut.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue}();var Vt=/^key/,Ht=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Bt=/^([^.]*)(?:\.(.+)|)/;/*
	 * Helper functions for managing events -- not part of the public interface.
	 * Props to Dean Edwards' addEvent library for many of the ideas.
	 */
ct.event={global:{},add:function(t,e,n,r,i){var o,a,u,s,c,l,f,h,p,d,v,g=Tt.get(t);
// Don't attach events to noData or text/comment nodes (but allow plain objects)
if(g)for(
// Caller can pass in an object of custom data in lieu of the handler
n.handler&&(o=n,n=o.handler,i=o.selector),
// Make sure that the handler has a unique ID, used to find/remove it later
n.guid||(n.guid=ct.guid++),
// Init the element's event structure and main handler, if this is the first
(s=g.events)||(s=g.events={}),(a=g.handle)||(a=g.handle=function(e){
// Discard the second event of a jQuery.event.trigger() and
// when an event is called after a page has unloaded
return"undefined"!=typeof ct&&ct.event.triggered!==e.type?ct.event.dispatch.apply(t,arguments):void 0}),
// Handle multiple events separated by a space
e=(e||"").match(St)||[""],c=e.length;c--;)u=Bt.exec(e[c])||[],p=v=u[1],d=(u[2]||"").split(".").sort(),
// There *must* be a type, no attaching namespace-only handlers
p&&(
// If event changes its type, use the special event handlers for the changed type
f=ct.event.special[p]||{},
// If selector defined, determine special event api type, otherwise given type
p=(i?f.delegateType:f.bindType)||p,
// Update special based on newly reset type
f=ct.event.special[p]||{},
// handleObj is passed to all event handlers
l=ct.extend({type:p,origType:v,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&ct.expr.match.needsContext.test(i),namespace:d.join(".")},o),
// Init the event handler queue if we're the first
(h=s[p])||(h=s[p]=[],h.delegateCount=0,
// Only use addEventListener if the special events handler returns false
f.setup&&f.setup.call(t,r,d,a)!==!1||t.addEventListener&&t.addEventListener(p,a)),f.add&&(f.add.call(t,l),l.handler.guid||(l.handler.guid=n.guid)),
// Add to the element's handler list, delegates in front
i?h.splice(h.delegateCount++,0,l):h.push(l),
// Keep track of which events have ever been used, for event optimization
ct.event.global[p]=!0)},
// Detach an event or set of events from an element
remove:function(t,e,n,r,i){var o,a,u,s,c,l,f,h,p,d,v,g=Tt.hasData(t)&&Tt.get(t);if(g&&(s=g.events)){for(
// Once for each type.namespace in types; type may be omitted
e=(e||"").match(St)||[""],c=e.length;c--;)
// Unbind all events (on this namespace, if provided) for the element
if(u=Bt.exec(e[c])||[],p=v=u[1],d=(u[2]||"").split(".").sort(),p){for(f=ct.event.special[p]||{},p=(r?f.delegateType:f.bindType)||p,h=s[p]||[],u=u[2]&&new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"),
// Remove matching events
a=o=h.length;o--;)l=h[o],!i&&v!==l.origType||n&&n.guid!==l.guid||u&&!u.test(l.namespace)||r&&r!==l.selector&&("**"!==r||!l.selector)||(h.splice(o,1),l.selector&&h.delegateCount--,f.remove&&f.remove.call(t,l));
// Remove generic event handler if we removed something and no more handlers exist
// (avoids potential for endless recursion during removal of special event handlers)
a&&!h.length&&(f.teardown&&f.teardown.call(t,d,g.handle)!==!1||ct.removeEvent(t,p,g.handle),delete s[p])}else for(p in s)ct.event.remove(t,p+e[c],n,r,!0);
// Remove data and the expando if it's no longer used
ct.isEmptyObject(s)&&Tt.remove(t,"handle events")}},dispatch:function(t){
// Make a writable jQuery.Event from the native event object
t=ct.event.fix(t);var e,n,r,i,o,a=[],u=tt.call(arguments),s=(Tt.get(this,"events")||{})[t.type]||[],c=ct.event.special[t.type]||{};
// Call the preDispatch hook for the mapped type, and let it bail if desired
if(
// Use the fix-ed jQuery.Event rather than the (read-only) native event
u[0]=t,t.delegateTarget=this,!c.preDispatch||c.preDispatch.call(this,t)!==!1){for(
// Determine handlers
a=ct.event.handlers.call(this,t,s),
// Run delegates first; they may want to stop propagation beneath us
e=0;(i=a[e++])&&!t.isPropagationStopped();)for(t.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!t.isImmediatePropagationStopped();)
// Triggered event must either 1) have no namespace, or 2) have namespace(s)
// a subset or equal to those in the bound event (both can have no namespace).
t.rnamespace&&!t.rnamespace.test(o.namespace)||(t.handleObj=o,t.data=o.data,r=((ct.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,u),void 0!==r&&(t.result=r)===!1&&(t.preventDefault(),t.stopPropagation()));
// Call the postDispatch hook for the mapped type
return c.postDispatch&&c.postDispatch.call(this,t),t.result}},handlers:function(t,e){var n,r,i,o,a=[],u=e.delegateCount,s=t.target;
// Support (at least): Chrome, IE9
// Find delegate handlers
// Black-hole SVG <use> instance trees (#13180)
//
// Support: Firefox<=42+
// Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)
if(u&&s.nodeType&&("click"!==t.type||isNaN(t.button)||t.button<1))for(;s!==this;s=s.parentNode||this)
// Don't check non-elements (#13208)
// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
if(1===s.nodeType&&(s.disabled!==!0||"click"!==t.type)){for(r=[],n=0;n<u;n++)o=e[n],
// Don't conflict with Object.prototype properties (#13203)
i=o.selector+" ",void 0===r[i]&&(r[i]=o.needsContext?ct(i,this).index(s)>-1:ct.find(i,this,null,[s]).length),r[i]&&r.push(o);r.length&&a.push({elem:s,handlers:r})}
// Add the remaining (directly-bound) handlers
return u<e.length&&a.push({elem:this,handlers:e.slice(u)}),a},
// Includes some event props shared by KeyEvent and MouseEvent
props:"altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(t,e){
// Add which for key events
return null==t.which&&(t.which=null!=e.charCode?e.charCode:e.keyCode),t}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(t,e){var n,r,i,o=e.button;
// Calculate pageX/Y if missing and clientX/Y available
// Add which for click: 1 === left; 2 === middle; 3 === right
// Note: button is not normalized, so don't use it
return null==t.pageX&&null!=e.clientX&&(n=t.target.ownerDocument||Q,r=n.documentElement,i=n.body,t.pageX=e.clientX+(r&&r.scrollLeft||i&&i.scrollLeft||0)-(r&&r.clientLeft||i&&i.clientLeft||0),t.pageY=e.clientY+(r&&r.scrollTop||i&&i.scrollTop||0)-(r&&r.clientTop||i&&i.clientTop||0)),t.which||void 0===o||(t.which=1&o?1:2&o?3:4&o?2:0),t}},fix:function(t){if(t[ct.expando])return t;
// Create a writable copy of the event object and normalize some properties
var e,n,r,i=t.type,o=t,a=this.fixHooks[i];for(a||(this.fixHooks[i]=a=Ht.test(i)?this.mouseHooks:Vt.test(i)?this.keyHooks:{}),r=a.props?this.props.concat(a.props):this.props,t=new ct.Event(o),e=r.length;e--;)n=r[e],t[n]=o[n];
// Support: Cordova 2.5 (WebKit) (#13255)
// All events should have a target; Cordova deviceready doesn't
// Support: Safari 6.0+, Chrome<28
// Target should not be a text node (#504, #13143)
return t.target||(t.target=Q),3===t.target.nodeType&&(t.target=t.target.parentNode),a.filter?a.filter(t,o):t},special:{load:{
// Prevent triggered image.load events from bubbling to window.load
noBubble:!0},focus:{
// Fire native event if possible so blur/focus sequence is correct
trigger:function(){if(this!==$()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===$()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{
// For checkbox, fire native event so checked state will be right
trigger:function(){if("checkbox"===this.type&&this.click&&ct.nodeName(this,"input"))return this.click(),!1},
// For cross-browser consistency, don't fire native .click() on links
_default:function(t){return ct.nodeName(t.target,"a")}},beforeunload:{postDispatch:function(t){
// Support: Firefox 20+
// Firefox doesn't alert if the returnValue field is not set.
void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},ct.removeEvent=function(t,e,n){
// This "if" is needed for plain objects
t.removeEventListener&&t.removeEventListener(e,n)},ct.Event=function(t,e){
// Allow instantiation without the 'new' keyword
// Allow instantiation without the 'new' keyword
// Event object
// Events bubbling up the document may have been marked as prevented
// by a handler lower down the tree; reflect the correct value.
// Support: Android<4.0
// Put explicitly provided properties onto the event object
// Create a timestamp if incoming event doesn't have one
// Mark it as fixed
return this instanceof ct.Event?(t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&t.returnValue===!1?m:y):this.type=t,e&&ct.extend(this,e),this.timeStamp=t&&t.timeStamp||ct.now(),void(this[ct.expando]=!0)):new ct.Event(t,e)},
// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
ct.Event.prototype={constructor:ct.Event,isDefaultPrevented:y,isPropagationStopped:y,isImmediatePropagationStopped:y,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=m,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=m,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=m,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},
// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://code.google.com/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
ct.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,e){ct.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,r=this,i=t.relatedTarget,o=t.handleObj;
// For mouseenter/leave call the handler if related is outside the target.
// NB: No relatedTarget if the mouse left/entered the browser window
return i&&(i===r||ct.contains(r,i))||(t.type=o.origType,n=o.handler.apply(this,arguments),t.type=e),n}}}),ct.fn.extend({on:function(t,e,n,r){return b(this,t,e,n,r)},one:function(t,e,n,r){return b(this,t,e,n,r,1)},off:function(t,e,n){var r,i;if(t&&t.preventDefault&&t.handleObj)
// ( event )  dispatched jQuery.Event
return r=t.handleObj,ct(t.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof t){
// ( types-object [, selector] )
for(i in t)this.off(i,e,t[i]);return this}
// ( types [, fn] )
return e!==!1&&"function"!=typeof e||(n=e,e=void 0),n===!1&&(n=y),this.each(function(){ct.event.remove(this,t,n,e)})}});var Wt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,
// Support: IE 10-11, Edge 10240+
// In IE/Edge using regex groups here causes severe slowdowns.
// See https://connect.microsoft.com/IE/feedback/details/1736512/
zt=/<script|<style|<link/i,
// checked="checked" or checked
Gt=/checked\s*(?:[^=]|=\s*.checked.)/i,Xt=/^true\/(.*)/,Jt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;ct.extend({htmlPrefilter:function(t){return t.replace(Wt,"<$1></$2>")},clone:function(t,e,n){var r,i,o,a,u=t.cloneNode(!0),s=ct.contains(t.ownerDocument,t);
// Fix IE cloning issues
if(!(ut.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||ct.isXMLDoc(t)))for(
// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
a=d(u),o=d(t),r=0,i=o.length;r<i;r++)S(o[r],a[r]);
// Copy the events from the original to the clone
if(e)if(n)for(o=o||d(t),a=a||d(u),r=0,i=o.length;r<i;r++)C(o[r],a[r]);else C(t,u);
// Return the cloned set
// Preserve script evaluation history
return a=d(u,"script"),a.length>0&&v(a,!s&&d(t,"script")),u},cleanData:function(t){for(var e,n,r,i=ct.event.special,o=0;void 0!==(n=t[o]);o++)if(kt(n)){if(e=n[Tt.expando]){if(e.events)for(r in e.events)i[r]?ct.event.remove(n,r):ct.removeEvent(n,r,e.handle);
// Support: Chrome <= 35-45+
// Assign undefined instead of using delete, see Data#remove
n[Tt.expando]=void 0}n[Ot.expando]&&(
// Support: Chrome <= 35-45+
// Assign undefined instead of using delete, see Data#remove
n[Ot.expando]=void 0)}}}),ct.fn.extend({
// Keep domManip exposed until 3.0 (gh-2225)
domManip:A,detach:function(t){return E(this,t,!0)},remove:function(t){return E(this,t)},text:function(t){return Et(this,function(t){return void 0===t?ct.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return A(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=w(this,t);e.appendChild(t)}})},prepend:function(){return A(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=w(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return A(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return A(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(
// Prevent memory leaks
ct.cleanData(d(t,!1)),
// Remove any remaining nodes
t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map(function(){return ct.clone(this,t,e)})},html:function(t){return Et(this,function(t){var e=this[0]||{},n=0,r=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;
// See if we can take a shortcut and just use innerHTML
if("string"==typeof t&&!zt.test(t)&&!Ut[(Lt.exec(t)||["",""])[1].toLowerCase()]){t=ct.htmlPrefilter(t);try{for(;n<r;n++)e=this[n]||{},
// Remove element nodes and prevent memory leaks
1===e.nodeType&&(ct.cleanData(d(e,!1)),e.innerHTML=t);e=0}catch(i){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=[];
// Make the changes, replacing each non-ignored context element with the new content
return A(this,arguments,function(e){var n=this.parentNode;ct.inArray(this,t)<0&&(ct.cleanData(d(this)),n&&n.replaceChild(e,this))},t)}}),ct.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,e){ct.fn[t]=function(t){for(var n,r=[],i=ct(t),o=i.length-1,a=0;a<=o;a++)n=a===o?this:this.clone(!0),ct(i[a])[e](n),
// Support: QtWebKit
// .get() because push.apply(_, arraylike) throws
nt.apply(r,n.get());return this.pushStack(r)}});var Yt,Kt={
// Support: Firefox
// We have to pre-define these values for FF (#10227)
HTML:"block",BODY:"block"},Zt=/^margin/,Qt=new RegExp("^("+Nt+")(?!px)[a-z%]+$","i"),te=function(t){
// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
// IE throws on elements created in popups
// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
var e=t.ownerDocument.defaultView;return e&&e.opener||(e=n),e.getComputedStyle(t)},ee=function(t,e,n,r){var i,o,a={};
// Remember the old values, and insert the new ones
for(o in e)a[o]=t.style[o],t.style[o]=e[o];i=n.apply(t,r||[]);
// Revert the old values
for(o in e)t.style[o]=a[o];return i},ne=Q.documentElement;!function(){
// Executing both pixelPosition & boxSizingReliable tests require only one layout
// so they're executed at the same time to save the second computation.
function t(){u.style.cssText=
// Support: Firefox<29, Android 2.3
// Vendor-prefix box-sizing
"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",u.innerHTML="",ne.appendChild(a);var t=n.getComputedStyle(u);e="1%"!==t.top,o="2px"===t.marginLeft,r="4px"===t.width,
// Support: Android 4.0 - 4.3 only
// Some styles come back with percentage values, even though they shouldn't
u.style.marginRight="50%",i="4px"===t.marginRight,ne.removeChild(a)}var e,r,i,o,a=Q.createElement("div"),u=Q.createElement("div");
// Finish early in limited (non-browser) environments
u.style&&(
// Support: IE9-11+
// Style of cloned element affects source element cloned (#8908)
u.style.backgroundClip="content-box",u.cloneNode(!0).style.backgroundClip="",ut.clearCloneStyle="content-box"===u.style.backgroundClip,a.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",a.appendChild(u),ct.extend(ut,{pixelPosition:function(){
// This test is executed only once but we still do memoizing
// since we can use the boxSizingReliable pre-computing.
// No need to check if the test was already performed, though.
return t(),e},boxSizingReliable:function(){return null==r&&t(),r},pixelMarginRight:function(){
// Support: Android 4.0-4.3
// We're checking for boxSizingReliableVal here instead of pixelMarginRightVal
// since that compresses better and they're computed together anyway.
return null==r&&t(),i},reliableMarginLeft:function(){
// Support: IE <=8 only, Android 4.0 - 4.3 only, Firefox <=3 - 37
return null==r&&t(),o},reliableMarginRight:function(){
// Support: Android 2.3
// Check if div with explicit width and no margin-right incorrectly
// gets computed margin-right based on width of container. (#3333)
// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
// This support function is only executed once so no memoizing is needed.
var t,e=u.appendChild(Q.createElement("div"));
// Reset CSS: box-sizing; display; margin; border; padding
// Support: Android 2.3
// Vendor-prefix box-sizing
return e.style.cssText=u.style.cssText="-webkit-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",e.style.marginRight=e.style.width="0",u.style.width="1px",ne.appendChild(a),t=!parseFloat(n.getComputedStyle(e).marginRight),ne.removeChild(a),u.removeChild(e),t}}))}();var
// Swappable if display is none or starts with table
// except "table", "table-cell", or "table-caption"
// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
re=/^(none|table(?!-c[ea]).+)/,ie={position:"absolute",visibility:"hidden",display:"block"},oe={letterSpacing:"0",fontWeight:"400"},ae=["Webkit","O","Moz","ms"],ue=Q.createElement("div").style;ct.extend({
// Add in style property hooks for overriding the default
// behavior of getting and setting a style property
cssHooks:{opacity:{get:function(t,e){if(e){
// We should always get a number back from opacity
var n=O(t,"opacity");return""===n?"1":n}}}},
// Don't automatically add "px" to these possibly-unitless properties
cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},
// Add in properties whose names you wish to fix before
// setting or getting the value
cssProps:{"float":"cssFloat"},
// Get and set the style property on a DOM Node
style:function(t,e,n,r){
// Don't set styles on text and comment nodes
if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){
// Make sure that we're working with the right name
var i,o,a,u=ct.camelCase(e),s=t.style;
// Check if we're setting a value
// Gets hook for the prefixed version, then unprefixed version
// Check if we're setting a value
// If a hook was provided get the non-computed value from there
// Convert "+=" or "-=" to relative numbers (#7345)
// Fixes bug #9237
// Make sure that null and NaN values aren't set (#7116)
// If a number was passed in, add the unit (except for certain CSS properties)
// Support: IE9-11+
// background-* props affect original clone's values
// If a hook was provided, use that value, otherwise just set the specified value
return e=ct.cssProps[u]||(ct.cssProps[u]=j(u)||u),a=ct.cssHooks[e]||ct.cssHooks[u],void 0===n?a&&"get"in a&&void 0!==(i=a.get(t,!1,r))?i:s[e]:(o=typeof n,"string"===o&&(i=Pt.exec(n))&&i[1]&&(n=p(t,e,i),o="number"),null!=n&&n===n&&("number"===o&&(n+=i&&i[3]||(ct.cssNumber[u]?"":"px")),ut.clearCloneStyle||""!==n||0!==e.indexOf("background")||(s[e]="inherit"),a&&"set"in a&&void 0===(n=a.set(t,n,r))||(s[e]=n)),void 0)}},css:function(t,e,n,r){var i,o,a,u=ct.camelCase(e);
// Make numeric if forced or a qualifier was provided and val looks numeric
// Make sure that we're working with the right name
// Try prefixed name followed by the unprefixed name
// If a hook was provided get the computed value from there
// Otherwise, if a way to get the computed value exists, use that
// Convert "normal" to computed value
// Make numeric if forced or a qualifier was provided and val looks numeric
return e=ct.cssProps[u]||(ct.cssProps[u]=j(u)||u),a=ct.cssHooks[e]||ct.cssHooks[u],a&&"get"in a&&(i=a.get(t,!0,n)),void 0===i&&(i=O(t,e,r)),"normal"===i&&e in oe&&(i=oe[e]),""===n||n?(o=parseFloat(i),n===!0||isFinite(o)?o||0:i):i}}),ct.each(["height","width"],function(t,e){ct.cssHooks[e]={get:function(t,n,r){if(n)
// Certain elements can have dimension info if we invisibly show them
// but it must have a current display style that would benefit
return re.test(ct.css(t,"display"))&&0===t.offsetWidth?ee(t,ie,function(){return D(t,e,r)}):D(t,e,r)},set:function(t,n,r){var i,o=r&&te(t),a=r&&P(t,e,r,"border-box"===ct.css(t,"boxSizing",!1,o),o);
// Convert to pixels if value adjustment is needed
return a&&(i=Pt.exec(n))&&"px"!==(i[3]||"px")&&(t.style[e]=n,n=ct.css(t,e)),N(t,n,a)}}}),ct.cssHooks.marginLeft=R(ut.reliableMarginLeft,function(t,e){if(e)return(parseFloat(O(t,"marginLeft"))||t.getBoundingClientRect().left-ee(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}))+"px"}),
// Support: Android 2.3
ct.cssHooks.marginRight=R(ut.reliableMarginRight,function(t,e){if(e)return ee(t,{display:"inline-block"},O,[t,"marginRight"])}),
// These hooks are used by animate to expand properties
ct.each({margin:"",padding:"",border:"Width"},function(t,e){ct.cssHooks[t+e]={expand:function(n){for(var r=0,i={},
// Assumes a single number if not a string
o="string"==typeof n?n.split(" "):[n];r<4;r++)i[t+Dt[r]+e]=o[r]||o[r-2]||o[0];return i}},Zt.test(t)||(ct.cssHooks[t+e].set=N)}),ct.fn.extend({css:function(t,e){return Et(this,function(t,e,n){var r,i,o={},a=0;if(ct.isArray(e)){for(r=te(t),i=e.length;a<i;a++)o[e[a]]=ct.css(t,e[a],!1,r);return o}return void 0!==n?ct.style(t,e,n):ct.css(t,e)},t,e,arguments.length>1)},show:function(){return M(this,!0)},hide:function(){return M(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){Mt(this)?ct(this).show():ct(this).hide()})}}),ct.Tween=I,I.prototype={constructor:I,init:function(t,e,n,r,i,o){this.elem=t,this.prop=n,this.easing=i||ct.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=r,this.unit=o||(ct.cssNumber[n]?"":"px")},cur:function(){var t=I.propHooks[this.prop];return t&&t.get?t.get(this):I.propHooks._default.get(this)},run:function(t){var e,n=I.propHooks[this.prop];return this.options.duration?this.pos=e=ct.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):I.propHooks._default.set(this),this}},I.prototype.init.prototype=I.prototype,I.propHooks={_default:{get:function(t){var e;
// Use a property on the element directly when it is not a DOM element,
// or when there is no matching style property that exists.
// Use a property on the element directly when it is not a DOM element,
// or when there is no matching style property that exists.
// Passing an empty string as a 3rd parameter to .css will automatically
// attempt a parseFloat and fallback to a string if the parse fails.
// Simple values such as "10px" are parsed to Float;
// complex values such as "rotate(1rad)" are returned as-is.
return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=ct.css(t.elem,t.prop,""),e&&"auto"!==e?e:0)},set:function(t){
// Use step hook for back compat.
// Use cssHook if its there.
// Use .style if available and use plain properties where available.
ct.fx.step[t.prop]?ct.fx.step[t.prop](t):1!==t.elem.nodeType||null==t.elem.style[ct.cssProps[t.prop]]&&!ct.cssHooks[t.prop]?t.elem[t.prop]=t.now:ct.style(t.elem,t.prop,t.now+t.unit)}}},
// Support: IE9
// Panic based approach to setting things on disconnected nodes
I.propHooks.scrollTop=I.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},ct.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},ct.fx=I.prototype.init,
// Back Compat <1.8 extension point
ct.fx.step={};var se,ce,le=/^(?:toggle|show|hide)$/,fe=/queueHooks$/;ct.Animation=ct.extend(H,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);return p(n.elem,t,Pt.exec(e),n),n}]},tweener:function(t,e){ct.isFunction(t)?(e=t,t=["*"]):t=t.match(St);for(var n,r=0,i=t.length;r<i;r++)n=t[r],H.tweeners[n]=H.tweeners[n]||[],H.tweeners[n].unshift(e)},prefilters:[F],prefilter:function(t,e){e?H.prefilters.unshift(t):H.prefilters.push(t)}}),ct.speed=function(t,e,n){var r=t&&"object"==typeof t?ct.extend({},t):{complete:n||!n&&e||ct.isFunction(t)&&t,duration:t,easing:n&&e||e&&!ct.isFunction(e)&&e};
// Normalize opt.queue - true/undefined/null -> "fx"
// Queueing
return r.duration=ct.fx.off?0:"number"==typeof r.duration?r.duration:r.duration in ct.fx.speeds?ct.fx.speeds[r.duration]:ct.fx.speeds._default,null!=r.queue&&r.queue!==!0||(r.queue="fx"),r.old=r.complete,r.complete=function(){ct.isFunction(r.old)&&r.old.call(this),r.queue&&ct.dequeue(this,r.queue)},r},ct.fn.extend({fadeTo:function(t,e,n,r){
// Show any hidden elements after setting opacity to 0
return this.filter(Mt).css("opacity",0).show().end().animate({opacity:e},t,n,r)},animate:function(t,e,n,r){var i=ct.isEmptyObject(t),o=ct.speed(e,n,r),a=function(){
// Operate on a copy of prop so per-property easing won't be lost
var e=H(this,ct.extend({},t),o);
// Empty animations, or finishing resolves immediately
(i||Tt.get(this,"finish"))&&e.stop(!0)};return a.finish=a,i||o.queue===!1?this.each(a):this.queue(o.queue,a)},stop:function(t,e,n){var r=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&t!==!1&&this.queue(t||"fx",[]),this.each(function(){var e=!0,i=null!=t&&t+"queueHooks",o=ct.timers,a=Tt.get(this);if(i)a[i]&&a[i].stop&&r(a[i]);else for(i in a)a[i]&&a[i].stop&&fe.test(i)&&r(a[i]);for(i=o.length;i--;)o[i].elem!==this||null!=t&&o[i].queue!==t||(o[i].anim.stop(n),e=!1,o.splice(i,1));
// Start the next in the queue if the last step wasn't forced.
// Timers currently will call their complete callbacks, which
// will dequeue but only if they were gotoEnd.
!e&&n||ct.dequeue(this,t)})},finish:function(t){return t!==!1&&(t=t||"fx"),this.each(function(){var e,n=Tt.get(this),r=n[t+"queue"],i=n[t+"queueHooks"],o=ct.timers,a=r?r.length:0;
// Look for any active animations, and finish them
for(
// Enable finishing flag on private data
n.finish=!0,
// Empty the queue first
ct.queue(this,t,[]),i&&i.stop&&i.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===t&&(o[e].anim.stop(!0),o.splice(e,1));
// Look for any animations in the old queue and finish them
for(e=0;e<a;e++)r[e]&&r[e].finish&&r[e].finish.call(this);
// Turn off finishing flag
delete n.finish})}}),ct.each(["toggle","show","hide"],function(t,e){var n=ct.fn[e];ct.fn[e]=function(t,r,i){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(q(e,!0),t,r,i)}}),
// Generate shortcuts for custom animations
ct.each({slideDown:q("show"),slideUp:q("hide"),slideToggle:q("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,e){ct.fn[t]=function(t,n,r){return this.animate(e,t,n,r)}}),ct.timers=[],ct.fx.tick=function(){var t,e=0,n=ct.timers;for(se=ct.now();e<n.length;e++)t=n[e],
// Checks the timer has not already been removed
t()||n[e]!==t||n.splice(e--,1);n.length||ct.fx.stop(),se=void 0},ct.fx.timer=function(t){ct.timers.push(t),t()?ct.fx.start():ct.timers.pop()},ct.fx.interval=13,ct.fx.start=function(){ce||(ce=n.setInterval(ct.fx.tick,ct.fx.interval))},ct.fx.stop=function(){n.clearInterval(ce),ce=null},ct.fx.speeds={slow:600,fast:200,
// Default speed
_default:400},
// Based off of the plugin by Clint Helfers, with permission.
// http://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
ct.fn.delay=function(t,e){return t=ct.fx?ct.fx.speeds[t]||t:t,e=e||"fx",this.queue(e,function(e,r){var i=n.setTimeout(e,t);r.stop=function(){n.clearTimeout(i)}})},function(){var t=Q.createElement("input"),e=Q.createElement("select"),n=e.appendChild(Q.createElement("option"));t.type="checkbox",
// Support: iOS<=5.1, Android<=4.2+
// Default value for a checkbox should be "on"
ut.checkOn=""!==t.value,
// Support: IE<=11+
// Must access selectedIndex to make default options select
ut.optSelected=n.selected,
// Support: Android<=2.3
// Options inside disabled selects are incorrectly marked as disabled
e.disabled=!0,ut.optDisabled=!n.disabled,
// Support: IE<=11+
// An input loses its value after becoming a radio
t=Q.createElement("input"),t.value="t",t.type="radio",ut.radioValue="t"===t.value}();var he,pe=ct.expr.attrHandle;ct.fn.extend({attr:function(t,e){return Et(this,ct.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){ct.removeAttr(this,t)})}}),ct.extend({attr:function(t,e,n){var r,i,o=t.nodeType;
// Don't get/set attributes on text, comment and attribute nodes
if(3!==o&&8!==o&&2!==o)
// Fallback to prop when attributes are not supported
// Fallback to prop when attributes are not supported
// All attributes are lowercase
// Grab necessary hook if one is defined
return"undefined"==typeof t.getAttribute?ct.prop(t,e,n):(1===o&&ct.isXMLDoc(t)||(e=e.toLowerCase(),i=ct.attrHooks[e]||(ct.expr.match.bool.test(e)?he:void 0)),void 0!==n?null===n?void ct.removeAttr(t,e):i&&"set"in i&&void 0!==(r=i.set(t,n,e))?r:(t.setAttribute(e,n+""),n):i&&"get"in i&&null!==(r=i.get(t,e))?r:(r=ct.find.attr(t,e),null==r?void 0:r))},attrHooks:{type:{set:function(t,e){if(!ut.radioValue&&"radio"===e&&ct.nodeName(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}},removeAttr:function(t,e){var n,r,i=0,o=e&&e.match(St);if(o&&1===t.nodeType)for(;n=o[i++];)r=ct.propFix[n]||n,
// Boolean attributes get special treatment (#10870)
ct.expr.match.bool.test(n)&&(
// Set corresponding property to false
t[r]=!1),t.removeAttribute(n)}}),
// Hooks for boolean attributes
he={set:function(t,e,n){
// Remove boolean attributes when set to false
return e===!1?ct.removeAttr(t,n):t.setAttribute(n,n),n}},ct.each(ct.expr.match.bool.source.match(/\w+/g),function(t,e){var n=pe[e]||ct.find.attr;pe[e]=function(t,e,r){var i,o;
// Avoid an infinite loop by temporarily removing this function from the getter
return r||(o=pe[e],pe[e]=i,i=null!=n(t,e,r)?e.toLowerCase():null,pe[e]=o),i}});var de=/^(?:input|select|textarea|button)$/i,ve=/^(?:a|area)$/i;ct.fn.extend({prop:function(t,e){return Et(this,ct.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each(function(){delete this[ct.propFix[t]||t]})}}),ct.extend({prop:function(t,e,n){var r,i,o=t.nodeType;
// Don't get/set properties on text, comment and attribute nodes
if(3!==o&&8!==o&&2!==o)
// Fix name and attach hooks
return 1===o&&ct.isXMLDoc(t)||(e=ct.propFix[e]||e,i=ct.propHooks[e]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(t,n,e))?r:t[e]=n:i&&"get"in i&&null!==(r=i.get(t,e))?r:t[e]},propHooks:{tabIndex:{get:function(t){
// elem.tabIndex doesn't always return the
// correct value when it hasn't been explicitly set
// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
// Use proper attribute retrieval(#12072)
var e=ct.find.attr(t,"tabindex");return e?parseInt(e,10):de.test(t.nodeName)||ve.test(t.nodeName)&&t.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),
// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
ut.optSelected||(ct.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),ct.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){ct.propFix[this.toLowerCase()]=this});var ge=/[\t\r\n\f]/g;ct.fn.extend({addClass:function(t){var e,n,r,i,o,a,u,s=0;if(ct.isFunction(t))return this.each(function(e){ct(this).addClass(t.call(this,e,B(this)))});if("string"==typeof t&&t)for(e=t.match(St)||[];n=this[s++];)if(i=B(n),r=1===n.nodeType&&(" "+i+" ").replace(ge," ")){for(a=0;o=e[a++];)r.indexOf(" "+o+" ")<0&&(r+=o+" ");
// Only assign if different to avoid unneeded rendering.
u=ct.trim(r),i!==u&&n.setAttribute("class",u)}return this},removeClass:function(t){var e,n,r,i,o,a,u,s=0;if(ct.isFunction(t))return this.each(function(e){ct(this).removeClass(t.call(this,e,B(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof t&&t)for(e=t.match(St)||[];n=this[s++];)if(i=B(n),
// This expression is here for better compressibility (see addClass)
r=1===n.nodeType&&(" "+i+" ").replace(ge," ")){for(a=0;o=e[a++];)
// Remove *all* instances
for(;r.indexOf(" "+o+" ")>-1;)r=r.replace(" "+o+" "," ");
// Only assign if different to avoid unneeded rendering.
u=ct.trim(r),i!==u&&n.setAttribute("class",u)}return this},toggleClass:function(t,e){var n=typeof t;return"boolean"==typeof e&&"string"===n?e?this.addClass(t):this.removeClass(t):ct.isFunction(t)?this.each(function(n){ct(this).toggleClass(t.call(this,n,B(this),e),e)}):this.each(function(){var e,r,i,o;if("string"===n)for(
// Toggle individual class names
r=0,i=ct(this),o=t.match(St)||[];e=o[r++];)
// Check each className given, space separated list
i.hasClass(e)?i.removeClass(e):i.addClass(e);else void 0!==t&&"boolean"!==n||(e=B(this),e&&
// Store className if set
Tt.set(this,"__className__",e),
// If the element has a class name or if we're passed `false`,
// then remove the whole classname (if there was one, the above saved it).
// Otherwise bring back whatever was previously saved (if anything),
// falling back to the empty string if nothing was stored.
this.setAttribute&&this.setAttribute("class",e||t===!1?"":Tt.get(this,"__className__")||""))})},hasClass:function(t){var e,n,r=0;for(e=" "+t+" ";n=this[r++];)if(1===n.nodeType&&(" "+B(n)+" ").replace(ge," ").indexOf(e)>-1)return!0;return!1}});var me=/\r/g,ye=/[\x20\t\r\n\f]+/g;ct.fn.extend({val:function(t){var e,n,r,i=this[0];{if(arguments.length)return r=ct.isFunction(t),this.each(function(n){var i;1===this.nodeType&&(i=r?t.call(this,n,ct(this).val()):t,
// Treat null/undefined as ""; convert numbers to string
null==i?i="":"number"==typeof i?i+="":ct.isArray(i)&&(i=ct.map(i,function(t){return null==t?"":t+""})),e=ct.valHooks[this.type]||ct.valHooks[this.nodeName.toLowerCase()],
// If set returns undefined, fall back to normal setting
e&&"set"in e&&void 0!==e.set(this,i,"value")||(this.value=i))});if(i)
// Handle most common string cases
// Handle cases where value is null/undef or number
return e=ct.valHooks[i.type]||ct.valHooks[i.nodeName.toLowerCase()],e&&"get"in e&&void 0!==(n=e.get(i,"value"))?n:(n=i.value,"string"==typeof n?n.replace(me,""):null==n?"":n)}}}),ct.extend({valHooks:{option:{get:function(t){var e=ct.find.attr(t,"value");
// Support: IE10-11+
// option.text throws exceptions (#14686, #14858)
// Strip and collapse whitespace
// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
return null!=e?e:ct.trim(ct.text(t)).replace(ye," ")}},select:{get:function(t){
// Loop through all the selected options
for(var e,n,r=t.options,i=t.selectedIndex,o="select-one"===t.type||i<0,a=o?null:[],u=o?i+1:r.length,s=i<0?u:o?i:0;s<u;s++)
// IE8-9 doesn't update selected after form reset (#2551)
if(n=r[s],(n.selected||s===i)&&(
// Don't return options that are disabled or in a disabled optgroup
ut.optDisabled?!n.disabled:null===n.getAttribute("disabled"))&&(!n.parentNode.disabled||!ct.nodeName(n.parentNode,"optgroup"))){
// We don't need an array for one selects
if(
// Get the specific value for the option
e=ct(n).val(),o)return e;
// Multi-Selects return an array
a.push(e)}return a},set:function(t,e){for(var n,r,i=t.options,o=ct.makeArray(e),a=i.length;a--;)r=i[a],(r.selected=ct.inArray(ct.valHooks.option.get(r),o)>-1)&&(n=!0);
// Force browsers to behave consistently when non-matching value is set
return n||(t.selectedIndex=-1),o}}}}),
// Radios and checkboxes getter/setter
ct.each(["radio","checkbox"],function(){ct.valHooks[this]={set:function(t,e){if(ct.isArray(e))return t.checked=ct.inArray(ct(t).val(),e)>-1}},ut.checkOn||(ct.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})});
// Return jQuery for attributes-only inclusion
var $e=/^(?:focusinfocus|focusoutblur)$/;ct.extend(ct.event,{trigger:function(t,e,r,i){var o,a,u,s,c,l,f,h=[r||Q],p=at.call(t,"type")?t.type:t,d=at.call(t,"namespace")?t.namespace.split("."):[];
// Don't do events on text and comment nodes
if(a=u=r=r||Q,3!==r.nodeType&&8!==r.nodeType&&!$e.test(p+ct.event.triggered)&&(p.indexOf(".")>-1&&(
// Namespaced trigger; create a regexp to match event type in handle()
d=p.split("."),p=d.shift(),d.sort()),c=p.indexOf(":")<0&&"on"+p,
// Caller can pass in a jQuery.Event object, Object, or just an event type string
t=t[ct.expando]?t:new ct.Event(p,"object"==typeof t&&t),
// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
t.isTrigger=i?2:3,t.namespace=d.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,
// Clean up the event in case it is being reused
t.result=void 0,t.target||(t.target=r),
// Clone any incoming data and prepend the event, creating the handler arg list
e=null==e?[t]:ct.makeArray(e,[t]),
// Allow special events to draw outside the lines
f=ct.event.special[p]||{},i||!f.trigger||f.trigger.apply(r,e)!==!1)){
// Determine event propagation path in advance, per W3C events spec (#9951)
// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
if(!i&&!f.noBubble&&!ct.isWindow(r)){for(s=f.delegateType||p,$e.test(s+p)||(a=a.parentNode);a;a=a.parentNode)h.push(a),u=a;
// Only add window if we got to document (e.g., not plain obj or detached DOM)
u===(r.ownerDocument||Q)&&h.push(u.defaultView||u.parentWindow||n)}for(
// Fire handlers on the event path
o=0;(a=h[o++])&&!t.isPropagationStopped();)t.type=o>1?s:f.bindType||p,
// jQuery handler
l=(Tt.get(a,"events")||{})[t.type]&&Tt.get(a,"handle"),l&&l.apply(a,e),
// Native handler
l=c&&a[c],l&&l.apply&&kt(a)&&(t.result=l.apply(a,e),t.result===!1&&t.preventDefault());
// If nobody prevented the default action, do it now
// Call a native DOM method on the target with the same name name as the event.
// Don't do default actions on window, that's where global variables be (#6170)
// Don't re-trigger an onFOO event when we call its FOO() method
// Prevent re-triggering of the same event, since we already bubbled it above
return t.type=p,i||t.isDefaultPrevented()||f._default&&f._default.apply(h.pop(),e)!==!1||!kt(r)||c&&ct.isFunction(r[p])&&!ct.isWindow(r)&&(u=r[c],u&&(r[c]=null),ct.event.triggered=p,r[p](),ct.event.triggered=void 0,u&&(r[c]=u)),t.result}},
// Piggyback on a donor event to simulate a different one
// Used only for `focus(in | out)` events
simulate:function(t,e,n){var r=ct.extend(new ct.Event,n,{type:t,isSimulated:!0});ct.event.trigger(r,null,e)}}),ct.fn.extend({trigger:function(t,e){return this.each(function(){ct.event.trigger(t,e,this)})},triggerHandler:function(t,e){var n=this[0];if(n)return ct.event.trigger(t,e,n,!0)}}),ct.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(t,e){
// Handle event binding
ct.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}}),ct.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),ut.focusin="onfocusin"in n,
// Support: Firefox
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome, Safari
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://code.google.com/p/chromium/issues/detail?id=449857
ut.focusin||ct.each({focus:"focusin",blur:"focusout"},function(t,e){
// Attach a single capturing handler on the document while someone wants focusin/focusout
var n=function(t){ct.event.simulate(e,t.target,ct.event.fix(t))};ct.event.special[e]={setup:function(){var r=this.ownerDocument||this,i=Tt.access(r,e);i||r.addEventListener(t,n,!0),Tt.access(r,e,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=Tt.access(r,e)-1;i?Tt.access(r,e,i):(r.removeEventListener(t,n,!0),Tt.remove(r,e))}}});var be=n.location,we=ct.now(),xe=/\?/;
// Support: Android 2.3
// Workaround failure to string-cast null input
ct.parseJSON=function(t){return JSON.parse(t+"")},
// Cross-browser xml parsing
ct.parseXML=function(t){var e;if(!t||"string"!=typeof t)return null;
// Support: IE9
try{e=(new n.DOMParser).parseFromString(t,"text/xml")}catch(r){e=void 0}return e&&!e.getElementsByTagName("parsererror").length||ct.error("Invalid XML: "+t),e};var _e=/#.*$/,Ce=/([?&])_=[^&]*/,Se=/^(.*?):[ \t]*([^\r\n]*)$/gm,
// #7653, #8125, #8152: local protocol detection
Ae=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Ee=/^(?:GET|HEAD)$/,ke=/^\/\//,/* Prefilters
		 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
		 * 2) These are called:
		 *    - BEFORE asking for a transport
		 *    - AFTER param serialization (s.data is a string if s.processData is true)
		 * 3) key is the dataType
		 * 4) the catchall symbol "*" can be used
		 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
		 */
Te={},/* Transports bindings
		 * 1) key is the dataType
		 * 2) the catchall symbol "*" can be used
		 * 3) selection will start with transport dataType and THEN go to "*" if needed
		 */
Oe={},
// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
Re="*/".concat("*"),
// Anchor tag for parsing the document origin
je=Q.createElement("a");je.href=be.href,ct.extend({
// Counter for holding the number of active queries
active:0,
// Last-Modified header cache for next request
lastModified:{},etag:{},ajaxSettings:{url:be.href,type:"GET",isLocal:Ae.test(be.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",/*
			timeout: 0,
			data: null,
			dataType: null,
			username: null,
			password: null,
			cache: null,
			throws: false,
			traditional: false,
			headers: {},
			*/
accepts:{"*":Re,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},
// Data converters
// Keys separate source (or catchall "*") and destination types with a single space
converters:{
// Convert anything to text
"* text":String,
// Text to html (true = no transformation)
"text html":!0,
// Evaluate text as a json expression
"text json":ct.parseJSON,
// Parse text as xml
"text xml":ct.parseXML},
// For options that shouldn't be deep extended:
// you can add your own custom options here if
// and when you create one that shouldn't be
// deep extended (see ajaxExtend)
flatOptions:{url:!0,context:!0}},
// Creates a full fledged settings object into target
// with both ajaxSettings and settings fields.
// If target is omitted, writes into ajaxSettings.
ajaxSetup:function(t,e){
// Building a settings object
// Extending ajaxSettings
return e?G(G(t,ct.ajaxSettings),e):G(ct.ajaxSettings,t)},ajaxPrefilter:W(Te),ajaxTransport:W(Oe),
// Main method
ajax:function(t,e){
// Callback for when everything is done
function r(t,e,r,u){var c,f,y,$,w,_=e;
// Called once
2!==b&&(
// State is "done" now
b=2,
// Clear timeout if it exists
s&&n.clearTimeout(s),
// Dereference transport for early garbage collection
// (no matter how long the jqXHR object will be used)
i=void 0,
// Cache response headers
a=u||"",
// Set readyState
x.readyState=t>0?4:0,
// Determine if successful
c=t>=200&&t<300||304===t,
// Get response data
r&&($=X(h,x,r)),
// Convert no matter what (that way responseXXX fields are always set)
$=J(h,$,x,c),
// If successful, handle type chaining
c?(
// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
h.ifModified&&(w=x.getResponseHeader("Last-Modified"),w&&(ct.lastModified[o]=w),w=x.getResponseHeader("etag"),w&&(ct.etag[o]=w)),
// if no content
204===t||"HEAD"===h.type?_="nocontent":304===t?_="notmodified":(_=$.state,f=$.data,y=$.error,c=!y)):(
// Extract error from statusText and normalize for non-aborts
y=_,!t&&_||(_="error",t<0&&(t=0))),
// Set data for the fake xhr object
x.status=t,x.statusText=(e||_)+"",
// Success/Error
c?v.resolveWith(p,[f,_,x]):v.rejectWith(p,[x,_,y]),
// Status-dependent callbacks
x.statusCode(m),m=void 0,l&&d.trigger(c?"ajaxSuccess":"ajaxError",[x,h,c?f:y]),
// Complete
g.fireWith(p,[x,_]),l&&(d.trigger("ajaxComplete",[x,h]),
// Handle the global AJAX counter
--ct.active||ct.event.trigger("ajaxStop")))}
// If url is an object, simulate pre-1.5 signature
"object"==typeof t&&(e=t,t=void 0),
// Force options to be an object
e=e||{};var i,
// URL without anti-cache param
o,
// Response headers
a,u,
// timeout handle
s,
// Url cleanup var
c,
// To know if global events are to be dispatched
l,
// Loop variable
f,
// Create the final options object
h=ct.ajaxSetup({},e),
// Callbacks context
p=h.context||h,
// Context for global events is callbackContext if it is a DOM node or jQuery collection
d=h.context&&(p.nodeType||p.jquery)?ct(p):ct.event,
// Deferreds
v=ct.Deferred(),g=ct.Callbacks("once memory"),
// Status-dependent callbacks
m=h.statusCode||{},
// Headers (they are sent all at once)
y={},$={},
// The jqXHR state
b=0,
// Default abort message
w="canceled",
// Fake xhr
x={readyState:0,
// Builds headers hashtable if needed
getResponseHeader:function(t){var e;if(2===b){if(!u)for(u={};e=Se.exec(a);)u[e[1].toLowerCase()]=e[2];e=u[t.toLowerCase()]}return null==e?null:e},
// Raw string
getAllResponseHeaders:function(){return 2===b?a:null},
// Caches the header
setRequestHeader:function(t,e){var n=t.toLowerCase();return b||(t=$[n]=$[n]||t,y[t]=e),this},
// Overrides response content-type header
overrideMimeType:function(t){return b||(h.mimeType=t),this},
// Status-dependent callbacks
statusCode:function(t){var e;if(t)if(b<2)for(e in t)
// Lazy-add the new callback in a way that preserves old ones
m[e]=[m[e],t[e]];else
// Execute the appropriate callbacks
x.always(t[x.status]);return this},
// Cancel the request
abort:function(t){var e=t||w;return i&&i.abort(e),r(0,e),this}};
// A cross-domain request is in order when the origin doesn't match the current origin.
if(
// Attach deferreds
v.promise(x).complete=g.add,x.success=x.done,x.error=x.fail,
// Remove hash character (#7531: and string promotion)
// Add protocol if not provided (prefilters might expect it)
// Handle falsy url in the settings object (#10093: consistency with old signature)
// We also use the url parameter if available
h.url=((t||h.url||be.href)+"").replace(_e,"").replace(ke,be.protocol+"//"),
// Alias method option to type as per ticket #12004
h.type=e.method||e.type||h.method||h.type,
// Extract dataTypes list
h.dataTypes=ct.trim(h.dataType||"*").toLowerCase().match(St)||[""],null==h.crossDomain){c=Q.createElement("a");
// Support: IE8-11+
// IE throws exception if url is malformed, e.g. http://example.com:80x/
try{c.href=h.url,
// Support: IE8-11+
// Anchor's host property isn't correctly set when s.url is relative
c.href=c.href,h.crossDomain=je.protocol+"//"+je.host!=c.protocol+"//"+c.host}catch(_){
// If there is an error parsing the URL, assume it is crossDomain,
// it can be rejected by the transport if it is invalid
h.crossDomain=!0}}
// If request was aborted inside a prefilter, stop there
if(
// Convert data if not already a string
h.data&&h.processData&&"string"!=typeof h.data&&(h.data=ct.param(h.data,h.traditional)),
// Apply prefilters
z(Te,h,e,x),2===b)return x;
// We can fire global events as of now if asked to
// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
l=ct.event&&h.global,
// Watch for a new set of requests
l&&0===ct.active++&&ct.event.trigger("ajaxStart"),
// Uppercase the type
h.type=h.type.toUpperCase(),
// Determine if request has content
h.hasContent=!Ee.test(h.type),
// Save the URL in case we're toying with the If-Modified-Since
// and/or If-None-Match header later on
o=h.url,
// More options handling for requests with no content
h.hasContent||(
// If data is available, append data to url
h.data&&(o=h.url+=(xe.test(o)?"&":"?")+h.data,
// #9682: remove data so that it's not used in an eventual retry
delete h.data),
// Add anti-cache in url if needed
h.cache===!1&&(h.url=Ce.test(o)?
// If there is already a '_' parameter, set its value
o.replace(Ce,"$1_="+we++):
// Otherwise add one to the end
o+(xe.test(o)?"&":"?")+"_="+we++)),
// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
h.ifModified&&(ct.lastModified[o]&&x.setRequestHeader("If-Modified-Since",ct.lastModified[o]),ct.etag[o]&&x.setRequestHeader("If-None-Match",ct.etag[o])),
// Set the correct header, if data is being sent
(h.data&&h.hasContent&&h.contentType!==!1||e.contentType)&&x.setRequestHeader("Content-Type",h.contentType),
// Set the Accepts header for the server, depending on the dataType
x.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+Re+"; q=0.01":""):h.accepts["*"]);
// Check for headers option
for(f in h.headers)x.setRequestHeader(f,h.headers[f]);
// Allow custom headers/mimetypes and early abort
if(h.beforeSend&&(h.beforeSend.call(p,x,h)===!1||2===b))
// Abort if not done already and return
return x.abort();
// Aborting is no longer a cancellation
w="abort";
// Install callbacks on deferreds
for(f in{success:1,error:1,complete:1})x[f](h[f]);
// If no transport, we auto-abort
if(
// Get transport
i=z(Oe,h,e,x)){
// If request was aborted inside ajaxSend, stop there
if(x.readyState=1,
// Send global event
l&&d.trigger("ajaxSend",[x,h]),2===b)return x;
// Timeout
h.async&&h.timeout>0&&(s=n.setTimeout(function(){x.abort("timeout")},h.timeout));try{b=1,i.send(y,r)}catch(_){
// Propagate exception as error if not done
if(!(b<2))throw _;r(-1,_)}}else r(-1,"No Transport");return x},getJSON:function(t,e,n){return ct.get(t,e,n,"json")},getScript:function(t,e){return ct.get(t,void 0,e,"script")}}),ct.each(["get","post"],function(t,e){ct[e]=function(t,n,r,i){
// The url can be an options object (which then must have .url)
// Shift arguments if data argument was omitted
return ct.isFunction(n)&&(i=i||r,r=n,n=void 0),ct.ajax(ct.extend({url:t,type:e,dataType:i,data:n,success:r},ct.isPlainObject(t)&&t))}}),ct._evalUrl=function(t){return ct.ajax({url:t,
// Make this explicit, since user can override this through ajaxSetup (#11264)
type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},ct.fn.extend({wrapAll:function(t){var e;
// The elements to wrap the target around
return ct.isFunction(t)?this.each(function(e){ct(this).wrapAll(t.call(this,e))}):(this[0]&&(e=ct(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this)},wrapInner:function(t){return ct.isFunction(t)?this.each(function(e){ct(this).wrapInner(t.call(this,e))}):this.each(function(){var e=ct(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)})},wrap:function(t){var e=ct.isFunction(t);return this.each(function(n){ct(this).wrapAll(e?t.call(this,n):t)})},unwrap:function(){return this.parent().each(function(){ct.nodeName(this,"body")||ct(this).replaceWith(this.childNodes)}).end()}}),ct.expr.filters.hidden=function(t){return!ct.expr.filters.visible(t)},ct.expr.filters.visible=function(t){
// Support: Opera <= 12.12
// Opera reports offsetWidths and offsetHeights less than zero on some elements
// Use OR instead of AND as the element is not visible if either is true
// See tickets #10406 and #13132
return t.offsetWidth>0||t.offsetHeight>0||t.getClientRects().length>0};var Ne=/%20/g,Pe=/\[\]$/,De=/\r?\n/g,Me=/^(?:submit|button|image|reset|file)$/i,Ie=/^(?:input|select|textarea|keygen)/i;
// Serialize an array of form elements or a set of
// key/values into a query string
ct.param=function(t,e){var n,r=[],i=function(t,e){
// If value is a function, invoke it and return its value
e=ct.isFunction(e)?e():null==e?"":e,r[r.length]=encodeURIComponent(t)+"="+encodeURIComponent(e)};
// If an array was passed in, assume that it is an array of form elements.
if(
// Set traditional to true for jQuery <= 1.3.2 behavior.
void 0===e&&(e=ct.ajaxSettings&&ct.ajaxSettings.traditional),ct.isArray(t)||t.jquery&&!ct.isPlainObject(t))
// Serialize the form elements
ct.each(t,function(){i(this.name,this.value)});else
// If traditional, encode the "old" way (the way 1.3.2 or older
// did it), otherwise encode params recursively.
for(n in t)Y(n,t[n],e,i);
// Return the resulting serialization
return r.join("&").replace(Ne,"+")},ct.fn.extend({serialize:function(){return ct.param(this.serializeArray())},serializeArray:function(){return this.map(function(){
// Can add propHook for "elements" to filter or add form elements
var t=ct.prop(this,"elements");return t?ct.makeArray(t):this}).filter(function(){var t=this.type;
// Use .is( ":disabled" ) so that fieldset[disabled] works
return this.name&&!ct(this).is(":disabled")&&Ie.test(this.nodeName)&&!Me.test(t)&&(this.checked||!It.test(t))}).map(function(t,e){var n=ct(this).val();return null==n?null:ct.isArray(n)?ct.map(n,function(t){return{name:e.name,value:t.replace(De,"\r\n")}}):{name:e.name,value:n.replace(De,"\r\n")}}).get()}}),ct.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(t){}};var Le={
// File protocol always yields status code 0, assume 200
0:200,
// Support: IE9
// #1450: sometimes IE returns 1223 when it should be 204
1223:204},qe=ct.ajaxSettings.xhr();ut.cors=!!qe&&"withCredentials"in qe,ut.ajax=qe=!!qe,ct.ajaxTransport(function(t){var e,r;
// Cross domain only allowed if supported through XMLHttpRequest
if(ut.cors||qe&&!t.crossDomain)return{send:function(i,o){var a,u=t.xhr();
// Apply custom fields if provided
if(u.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(a in t.xhrFields)u[a]=t.xhrFields[a];
// Override mime type if needed
t.mimeType&&u.overrideMimeType&&u.overrideMimeType(t.mimeType),
// X-Requested-With header
// For cross-domain requests, seeing as conditions for a preflight are
// akin to a jigsaw puzzle, we simply never set it to be sure.
// (it can always be set on a per-request basis or even using ajaxSetup)
// For same-domain requests, won't change header if already provided.
t.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest");
// Set headers
for(a in i)u.setRequestHeader(a,i[a]);
// Callback
e=function(t){return function(){e&&(e=r=u.onload=u.onerror=u.onabort=u.onreadystatechange=null,"abort"===t?u.abort():"error"===t?
// Support: IE9
// On a manual native abort, IE9 throws
// errors on any property access that is not readyState
"number"!=typeof u.status?o(0,"error"):o(
// File: protocol always yields status 0; see #8605, #14207
u.status,u.statusText):o(Le[u.status]||u.status,u.statusText,
// Support: IE9 only
// IE9 has no XHR2 but throws on binary (trac-11426)
// For XHR2 non-text, let the caller handle it (gh-2498)
"text"!==(u.responseType||"text")||"string"!=typeof u.responseText?{binary:u.response}:{text:u.responseText},u.getAllResponseHeaders()))}},
// Listen to events
u.onload=e(),r=u.onerror=e("error"),
// Support: IE9
// Use onreadystatechange to replace onabort
// to handle uncaught aborts
void 0!==u.onabort?u.onabort=r:u.onreadystatechange=function(){
// Check readyState before timeout as it changes
4===u.readyState&&
// Allow onerror to be called first,
// but that will not handle a native abort
// Also, save errorCallback to a variable
// as xhr.onerror cannot be accessed
n.setTimeout(function(){e&&r()})},
// Create the abort callback
e=e("abort");try{
// Do send the request (this may raise an exception)
u.send(t.hasContent&&t.data||null)}catch(s){
// #14683: Only rethrow if this hasn't been notified as an error yet
if(e)throw s}},abort:function(){e&&e()}}}),
// Install script dataType
ct.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return ct.globalEval(t),t}}}),
// Handle cache's special case and crossDomain
ct.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),
// Bind script tag hack transport
ct.ajaxTransport("script",function(t){
// This transport only deals with cross domain requests
if(t.crossDomain){var e,n;return{send:function(r,i){e=ct("<script>").prop({charset:t.scriptCharset,src:t.url}).on("load error",n=function(t){e.remove(),n=null,t&&i("error"===t.type?404:200,t.type)}),
// Use native DOM manipulation to avoid our domManip AJAX trickery
Q.head.appendChild(e[0])},abort:function(){n&&n()}}}});var Ue=[],Fe=/(=)\?(?=&|$)|\?\?/;
// Default jsonp settings
ct.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Ue.pop()||ct.expando+"_"+we++;return this[t]=!0,t}}),
// Detect, normalize options and install callbacks for jsonp requests
ct.ajaxPrefilter("json jsonp",function(t,e,r){var i,o,a,u=t.jsonp!==!1&&(Fe.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Fe.test(t.data)&&"data");
// Handle iff the expected data type is "jsonp" or we have a parameter to set
if(u||"jsonp"===t.dataTypes[0])
// Delegate to script
// Get callback name, remembering preexisting value associated with it
// Insert callback into url or form data
// Use data converter to retrieve json after script execution
// Force json dataType
// Install callback
// Clean-up function (fires after converters)
return i=t.jsonpCallback=ct.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,u?t[u]=t[u].replace(Fe,"$1"+i):t.jsonp!==!1&&(t.url+=(xe.test(t.url)?"&":"?")+t.jsonp+"="+i),t.converters["script json"]=function(){return a||ct.error(i+" was not called"),a[0]},t.dataTypes[0]="json",o=n[i],n[i]=function(){a=arguments},r.always(function(){
// If previous value didn't exist - remove it
void 0===o?ct(n).removeProp(i):n[i]=o,
// Save back as free
t[i]&&(
// Make sure that re-using the options doesn't screw things around
t.jsonpCallback=e.jsonpCallback,
// Save the callback name for future use
Ue.push(i)),
// Call if it was a function and we have a response
a&&ct.isFunction(o)&&o(a[0]),a=o=void 0}),"script"}),
// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
ct.parseHTML=function(t,e,n){if(!t||"string"!=typeof t)return null;"boolean"==typeof e&&(n=e,e=!1),e=e||Q;var r=yt.exec(t),i=!n&&[];
// Single tag
// Single tag
return r?[e.createElement(r[1])]:(r=g([t],e,i),i&&i.length&&ct(i).remove(),ct.merge([],r.childNodes))};
// Keep a copy of the old load method
var Ve=ct.fn.load;/**
	 * Load a url into a page
	 */
ct.fn.load=function(t,e,n){if("string"!=typeof t&&Ve)return Ve.apply(this,arguments);var r,i,o,a=this,u=t.indexOf(" ");
// If it's a function
// We assume that it's the callback
// If we have elements to modify, make the request
return u>-1&&(r=ct.trim(t.slice(u)),t=t.slice(0,u)),ct.isFunction(e)?(n=e,e=void 0):e&&"object"==typeof e&&(i="POST"),a.length>0&&ct.ajax({url:t,
// If "type" variable is undefined, then "GET" method will be used.
// Make value of this field explicit since
// user can override it through ajaxSetup method
type:i||"GET",dataType:"html",data:e}).done(function(t){
// Save response for use in complete callback
o=arguments,a.html(r?
// If a selector was specified, locate the right elements in a dummy div
// Exclude scripts to avoid IE 'Permission Denied' errors
ct("<div>").append(ct.parseHTML(t)).find(r):
// Otherwise use the full result
t)}).always(n&&function(t,e){a.each(function(){n.apply(this,o||[t.responseText,e,t])})}),this},
// Attach a bunch of functions for handling common AJAX events
ct.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){ct.fn[e]=function(t){return this.on(e,t)}}),ct.expr.filters.animated=function(t){return ct.grep(ct.timers,function(e){return t===e.elem}).length},ct.offset={setOffset:function(t,e,n){var r,i,o,a,u,s,c,l=ct.css(t,"position"),f=ct(t),h={};
// Set position first, in-case top/left are set even on static elem
"static"===l&&(t.style.position="relative"),u=f.offset(),o=ct.css(t,"top"),s=ct.css(t,"left"),c=("absolute"===l||"fixed"===l)&&(o+s).indexOf("auto")>-1,
// Need to be able to calculate position if either
// top or left is auto and position is either absolute or fixed
c?(r=f.position(),a=r.top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(s)||0),ct.isFunction(e)&&(
// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
e=e.call(t,n,ct.extend({},u))),null!=e.top&&(h.top=e.top-u.top+a),null!=e.left&&(h.left=e.left-u.left+i),"using"in e?e.using.call(t,h):f.css(h)}},ct.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){ct.offset.setOffset(this,t,e)});var e,n,r=this[0],i={top:0,left:0},o=r&&r.ownerDocument;if(o)
// Make sure it's not a disconnected DOM node
// Make sure it's not a disconnected DOM node
return e=o.documentElement,ct.contains(e,r)?(i=r.getBoundingClientRect(),n=K(o),{top:i.top+n.pageYOffset-e.clientTop,left:i.left+n.pageXOffset-e.clientLeft}):i},position:function(){if(this[0]){var t,e,n=this[0],r={top:0,left:0};
// Subtract parent offsets and element margins
// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
// because it is its only offset parent
// Assume getBoundingClientRect is there when computed position is fixed
// Get *real* offsetParent
// Get correct offsets
// Add offsetParent borders
return"fixed"===ct.css(n,"position")?e=n.getBoundingClientRect():(t=this.offsetParent(),e=this.offset(),ct.nodeName(t[0],"html")||(r=t.offset()),r.top+=ct.css(t[0],"borderTopWidth",!0),r.left+=ct.css(t[0],"borderLeftWidth",!0)),{top:e.top-r.top-ct.css(n,"marginTop",!0),left:e.left-r.left-ct.css(n,"marginLeft",!0)}}},
// This method will return documentElement in the following cases:
// 1) For the element inside the iframe without offsetParent, this method will return
//    documentElement of the parent window
// 2) For the hidden or detached element
// 3) For body or html element, i.e. in case of the html node - it will return itself
//
// but those exceptions were never presented as a real life use-cases
// and might be considered as more preferable results.
//
// This logic, however, is not guaranteed and can change at any point in the future
offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&"static"===ct.css(t,"position");)t=t.offsetParent;return t||ne})}}),
// Create scrollLeft and scrollTop methods
ct.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,e){var n="pageYOffset"===e;ct.fn[t]=function(r){return Et(this,function(t,r,i){var o=K(t);return void 0===i?o?o[e]:t[r]:void(o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):t[r]=i)},t,r,arguments.length)}}),
// Support: Safari<7-8+, Chrome<37-44+
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
ct.each(["top","left"],function(t,e){ct.cssHooks[e]=R(ut.pixelPosition,function(t,n){if(n)
// If curCSS returns percentage, fallback to offset
return n=O(t,e),Qt.test(n)?ct(t).position()[e]+"px":n})}),
// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
ct.each({Height:"height",Width:"width"},function(t,e){ct.each({padding:"inner"+t,content:e,"":"outer"+t},function(n,r){
// Margin is only for outerHeight, outerWidth
ct.fn[r]=function(r,i){var o=arguments.length&&(n||"boolean"!=typeof r),a=n||(r===!0||i===!0?"margin":"border");return Et(this,function(e,n,r){var i;
// Get document width or height
// Get width or height on the element, requesting but not forcing parseFloat
// Set width or height on the element
return ct.isWindow(e)?e.document.documentElement["client"+t]:9===e.nodeType?(i=e.documentElement,Math.max(e.body["scroll"+t],i["scroll"+t],e.body["offset"+t],i["offset"+t],i["client"+t])):void 0===r?ct.css(e,n,a):ct.style(e,n,r,a)},e,o?r:void 0,o,null)}})}),ct.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,r){return this.on(e,t,n,r)},undelegate:function(t,e,n){
// ( namespace ) or ( selector, types [, fn] )
return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)},size:function(){return this.length}}),ct.fn.andSelf=ct.fn.addBack,r=[],i=function(){return ct}.apply(e,r),!(void 0!==i&&(t.exports=i));var
// Map over jQuery in case of overwrite
He=n.jQuery,
// Map over the $ in case of overwrite
Be=n.$;
// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
return ct.noConflict=function(t){return n.$===ct&&(n.$=Be),t&&n.jQuery===ct&&(n.jQuery=He),ct},o||(n.jQuery=n.$=ct),ct})},/* 7 */
/***/
function(t,e,n){/**
	 * Created by doguhanuluca on 1/21/16.
	 */
"use strict";n(8),t.exports="ngComponentRouter"},/* 8 */
/***/
function(t,e){!function(){
///<reference path="../typings/angularjs/angular.d.ts"/>
/**
	 * @name ngOutlet
	 *
	 * @description
	 * An ngOutlet is where resolved content goes.
	 *
	 * ## Use
	 *
	 * ```html
	 * <div ng-outlet="name"></div>
	 * ```
	 *
	 * The value for the `ngOutlet` attribute is optional.
	 */
function t(t,e,n){function r(n,r,a,u,s){var c=function(){function o(t,e){this.controller=t,this.router=e}return o.prototype.cleanupLastView=function(){var e=this;this.previousLeaveAnimation&&(t.cancel(this.previousLeaveAnimation),this.previousLeaveAnimation=null),this.currentScope&&(this.currentScope.$destroy(),this.currentScope=null),this.currentElement&&(this.previousLeaveAnimation=t.leave(this.currentElement),this.previousLeaveAnimation.then(function(){return e.previousLeaveAnimation=null}),this.currentElement=null)},o.prototype.reuse=function(t){var n=e.when(!0),r=this.currentInstruction;return this.currentInstruction=t,this.currentController&&this.currentController.$routerOnReuse&&(n=e.when(this.currentController.$routerOnReuse(this.currentInstruction,r))),n},o.prototype.routerCanReuse=function(t){var n;return n=!(!this.currentInstruction||this.currentInstruction.componentType!==t.componentType)&&(this.currentController&&this.currentController.$routerCanReuse?this.currentController.$routerCanReuse(t,this.currentInstruction):t===this.currentInstruction||angular.equals(t.params,this.currentInstruction.params)),e.when(n)},o.prototype.routerCanDeactivate=function(t){return this.currentController&&this.currentController.$routerCanDeactivate?e.when(this.currentController.$routerCanDeactivate(t,this.currentInstruction)):e.when(!0)},o.prototype.deactivate=function(t){return this.currentController&&this.currentController.$routerOnDeactivate?e.when(this.currentController.$routerOnDeactivate(t,this.currentInstruction)):e.when()},o.prototype.activate=function(o){var a=this;this.previousInstruction=this.currentInstruction,this.currentInstruction=o;var u=this.controller.$$componentName=o.componentType;if("string"!=typeof u)throw new Error("Component is not a string for "+o.urlPath);this.controller.$$template="<"+i(u)+' $router="::$$router"></'+i(u)+">",this.controller.$$router=this.router.childRouter(o.componentType),this.controller.$$outlet=this;var c=n.$new();c.$$router=this.controller.$$router,this.deferredActivation=e.defer();var l=s(c,function(e){t.enter(e,null,a.currentElement||r),a.cleanupLastView()});return this.currentElement=l,this.currentScope=c,this.deferredActivation.promise},o}(),l=u[0],f=u[1],h=l&&l.$$router||o;f.$$currentComponent=null,h.registerPrimaryOutlet(new c(f,h))}var o=n;return{restrict:"AE",transclude:"element",terminal:!0,priority:400,require:["?^^ngOutlet","ngOutlet"],link:r,controller:function(){function t(){}return t}(),controllerAs:"$$ngOutlet"}}/**
	 * This directive is responsible for compiling the contents of ng-outlet
	 */
function e(t){return{restrict:"EA",priority:-400,require:"ngOutlet",link:function(e,n,r,i){var o=i.$$template;n.html(o),t(n.contents())(e)}}}function n(t){return{require:"^ngOutlet",priority:-1e3,link:function(e,n,r,i){var o=t.when(),a=i.$$outlet,u=a.currentController=n.controller(i.$$componentName);u.$routerOnActivate&&(o=t.when(u.$routerOnActivate(a.currentInstruction,a.previousInstruction))),o.then(a.deferredActivation.resolve,a.deferredActivation.reject)}}}/**
	 * @name ngLink
	 * @description
	 * Lets you link to different parts of the app, and automatically generates hrefs.
	 *
	 * ## Use
	 * The directive uses a simple syntax: `ng-link="componentName({ param: paramValue })"`
	 *
	 * ### Example
	 *
	 * ```js
	 * angular.module('myApp', ['ngComponentRouter'])
	 *   .controller('AppController', ['$rootRouter', function($rootRouter) {
	 *     $rootRouter.config({ path: '/user/:id', component: 'user' });
	 *     this.user = { name: 'Brian', id: 123 };
	 *   });
	 * ```
	 *
	 * ```html
	 * <div ng-controller="AppController as app">
	 *   <a ng-link="user({id: app.user.id})">{{app.user.name}}</a>
	 * </div>
	 * ```
	 */
function r(t,e){function n(n,r,i,o){function a(e){s=u.generate(e),n.$watch(function(){return u.isRouteActive(s)},function(t){t?r.addClass("ng-link-active"):r.removeClass("ng-link-active")});var i=s.toLinkUrl();return t._location.prepareExternalUrl(i)}var u=o&&o.$$router||t;if(u){var s=null,c=i.ngLink||"",l=e(c);
// we can avoid adding a watcher if it's a literal
if(l.constant){var f=l();r.attr("href",a(f))}else n.$watch(function(){return l(n)},function(t){return r.attr("href",a(t))},!0);r.on("click",function(e){1===e.which&&s&&(t.navigateByInstruction(s),e.preventDefault())})}}return{require:"?^^ngOutlet",restrict:"A",link:n}}function i(t){return t.replace(/[A-Z]/g,function(t){return"-"+t.toLowerCase()})}function o(t){
// Get hold of the original hashPrefix method
var e=t.hashPrefix.bind(t),n=e();
// Override the helper so that we can read any changes to the prefix (after this monkey-patch)
t.hashPrefix=function(t){return angular.isDefined(t)&&(n=t),e(t)},
// Return the final hashPrefix as the value of this service
this.$get=function(){return n}}function a(t,e,n,r,i,o,a){
// When this file is processed, the line below is replaced with
// the contents of `../lib/facades.es5`.
function u(){return function(t){return t}}function s(t){return t}function c(t){return!!t}function l(t){return!t}function f(t){return"string"==typeof t}function h(t){return"function"==typeof t}function p(t){return"object"==typeof t&&null!==t}function d(t){return Array.isArray(t)}function v(t){return t.name||"Root"}
//TODO: implement?
// I think it's too heavy to ask 1.x users to bring in Rx for the router...
function g(){}function m(){}function y(t){return l(t)?null:t.toString()}function $(t){var e=[];return l(t)?[]:(U.forEach(t,function(t,n){e.push(t===!0?n:n+"="+t)}),e)}
// Convert an object of url parameters into a string that can be used in an URL
function b(t,e){return void 0===e&&(e="&"),$(t).join(e)}function w(t){for(var e=new J(t[t.length-1]),n=t.length-2;n>=0;n-=1)e=new J(t[n],e);return e}function x(t){var e=L.firstMatch(K,t);return c(e)?e[0]:""}function _(t){var e=L.firstMatch(Z,t);return c(e)?e[0]:""}function C(t,e){return e instanceof Type&&t.name in e.prototype}function S(t){for(var e=q.annotations(t),n=0;n<e.length;n+=1){var r=e[n];if(r instanceof rt.CanActivate)return r.fn}return null}/**
	 * Given a JS Object that represents a route config, returns a corresponding Route, AsyncRoute,
	 * AuxRoute or Redirect object.
	 *
	 * Also wraps an AsyncRoute's loader function to add the loaded component's route config to the
	 * `RouteRegistry`.
	 */
function A(t,e){if(t instanceof ft.AsyncRoute){var n=E(t.loader,e);return new ft.AsyncRoute({path:t.path,loader:n,name:t.name,data:t.data,useAsDefault:t.useAsDefault})}if(t instanceof ft.Route||t instanceof ft.Redirect||t instanceof ft.AuxRoute)return t;if(+!!t.component+ +!!t.redirectTo+ +!!t.loader!=1)throw new H('Route config should contain exactly one "component", "loader", or "redirectTo" property.');if(t.as&&t.name)throw new H('Route config should contain exactly one "as" or "name" property.');if(t.as&&(t.name=t.as),t.loader){var n=E(t.loader,e);return new ft.AsyncRoute({path:t.path,loader:n,name:t.name,data:t.data,useAsDefault:t.useAsDefault})}if(t.aux)return new ft.AuxRoute({path:t.aux,component:t.component,name:t.name});if(t.component){if("object"==typeof t.component){var r=t.component;if("constructor"==r.type)return new ft.Route({path:t.path,component:r.constructor,name:t.name,data:t.data,useAsDefault:t.useAsDefault});if("loader"==r.type)return new ft.AsyncRoute({path:t.path,loader:r.loader,name:t.name,data:t.data,useAsDefault:t.useAsDefault});throw new H('Invalid component type "'+r.type+'". Valid types are "constructor" and "loader".')}return new ft.Route(t)}return t.redirectTo?new ft.Redirect({path:t.path,redirectTo:t.redirectTo}):t}function E(t,e){return function(){return t().then(function(t){return e.configFromComponent(t),t})}}function k(t,e){if(!h(t))throw new H('Component for route "'+e+'" is not defined, or is not a class.')}function T(t){return l(t)?null:(t=V.replaceAll(t,It,"%25"),t=V.replaceAll(t,Lt,"%2F"),t=V.replaceAll(t,qt,"%28"),t=V.replaceAll(t,Ut,"%29"),t=V.replaceAll(t,Ft,"%3B"))}function O(t){return l(t)?null:(t=V.replaceAll(t,Vt,";"),t=V.replaceAll(t,Ht,")"),t=V.replaceAll(t,Bt,"("),t=V.replaceAll(t,Wt,"/"),t=V.replaceAll(t,zt,"%"))}/*
	 * Given: ['/a/b', {c: 2}]
	 * Returns: ['', 'a', 'b', {c: 2}]
	 */
function R(t){var e=[];return t.forEach(function(t){if(f(t)){var n=t;e=e.concat(n.split("/"))}else e.push(t)}),e}/*
	 * Given a list of instructions, returns the most specific instruction
	 */
function j(t){if(t=t.filter(function(t){return c(t)}),0==t.length)return null;if(1==t.length)return t[0];var e=t[0],n=t.slice(1);return n.reduce(function(t,e){return N(e.specificity,t.specificity)==-1?e:t},e)}/*
	 * Expects strings to be in the form of "[0-2]+"
	 * Returns -1 if string A should be sorted above string B, 1 if it should be sorted after,
	 * or 0 if they are the same.
	 */
function N(t,e){for(var n=Math.min(t.length,e.length),r=0;r<n;r+=1){var i=V.charCodeAt(t,r),o=V.charCodeAt(e,r),a=o-i;if(0!=a)return a}return t.length-e.length}function P(t,e){if(h(t)){var n=q.annotations(t);if(c(n))for(var r=0;r<n.length;r++){var i=n[r];if(i instanceof xt.RouteConfig)throw new H('Child routes are not allowed for "'+e+'". Use "..." on the parent\'s route path.')}}}function D(t,e){var n=se;return l(t.component)?n:(c(t.child)&&(n=D(t.child,c(e)?e.child:null)),n.then(function(n){if(0==n)return!1;if(t.component.reuse)return!0;var r=ue.getCanActivateHook(t.component.componentType);return!c(r)||r(t.component,c(e)?e.component:null)}))}function M(t){var e=t+"Directive";if(i.has(e)){var n=i.get(e);if(n.length>1)throw new H('too many directives named "'+t+'"');return n[0].controller}throw new H('directive "'+t+'" is not registered')}var I={resolve:function(e){return t.when(e)},reject:function(e){return t.reject(e)},catchError:function(t,e){return t.then(null,e)},all:function(e){return t.all(e)}},L={create:function(t,e){return e=e?e.replace(/g/g,""):"",new RegExp(t,e+"g")},firstMatch:function(t,e){return t.lastIndex=0,t.exec(e)},matcher:function(t,e){return t.lastIndex=0,{re:t,input:e}}},q={annotations:function(t){
//TODO: implement me
return t.annotations||[]}},U={create:function(){return{}},set:function(t,e,n){return t[e]=n},get:function(t,e){return t.hasOwnProperty(e)?t[e]:void 0},contains:function(t,e){return t.hasOwnProperty(e)},keys:function(t){return Object.keys(t)},isEmpty:function(t){for(var e in t)if(t.hasOwnProperty(e))return!1;return!0},"delete":function(t,e){delete t[e]},forEach:function(t,e){for(var n in t)t.hasOwnProperty(n)&&e(t[n],n)},equals:function(t,e){var n=Object.keys(t),r=Object.keys(e);if(n.length!=r.length)return!1;for(var i,o=0;o<n.length;o++)if(i=n[o],t[i]!==e[i])return!1;return!0},merge:function(t,e){var n={};for(var r in t)t.hasOwnProperty(r)&&(n[r]=t[r]);for(var r in e)e.hasOwnProperty(r)&&(n[r]=e[r]);return n}},F=(Array,{toJSON:function(t){return JSON.stringify(t)},clear:function(t){t.length=0},create:function(){return[]},push:function(t,e){return t.push(e)},forEach:function(t,e){return t.forEach(e)},first:function(t){return t?t[0]:null},last:function(t){return(t&&t.length)>0?t[t.length-1]:null},map:function(t,e){return t.map(e)},join:function(t,e){return t.join(e)},reduce:function(t,e,n){return t.reduce(e,n)},filter:function(t,e){return t.filter(e)},concat:function(t,e){return t.concat(e)},slice:function(t){var e=void 0!==arguments[1]?arguments[1]:0,n=void 0!==arguments[2]?arguments[2]:null;return t.slice(e,null===n?void 0:n)},maximum:function(t,e){if(0==t.length)return null;for(var n=null,r=-(1/0),i=0;i<t.length;i++){var o=t[i];if(!l(o)){var a=e(o);a>r&&(n=o,r=a)}}return n}}),V={charCodeAt:function(t,e){return t.charCodeAt(e)},equals:function(t,e){return t===e},split:function(t,e){return t.split(e)},replaceAll:function(t,e,n){return t.replace(e,n)},replaceAllMapped:function(t,e,n){return t.replace(e,function(t){
// The callback receives match, p1, ..., pn
// Remove offset & string from the result array
return t.splice(-2,2),n.apply(null,t)})},contains:function(t,e){return t.indexOf(e)!=-1}},H=Error,B={callNext:function(t,e){t.fn(e)},callEmit:function(t,e){t.fn(e)},subscribe:function(t,e){t.fn=e}};m.prototype.subscribe=function(){},m.prototype.path=function(){return e.url()},m.prototype.go=function(t,n){return e.url(t+n)},m.prototype.prepareExternalUrl=function(t){return t.length>0&&!t.startsWith("/")&&(t="/"+t),e.$$html5?"."+t:"#"+a+t};var W={Injectable:function(){},OpaqueToken:function(){},Inject:function(){}},z=function(){return W},G=function(){function t(t){var e=this;this.map={},this.keys={},c(t)&&U.forEach(t,function(t,n){e.map[n]=c(t)?t.toString():null,e.keys[n]=!0})}return t.prototype.get=function(t){return U["delete"](this.keys,t),this.map[t]},t.prototype.getUnused=function(){var t=this,e={},n=U.keys(this.keys);return n.forEach(function(n){return e[n]=U.get(t.map,n)}),e},t}();W.TouchMap=G,W.normalizeString=y;var X=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)};W.convertUrlParamsToArray=$,W.serializeParams=b;/**
	 * This class represents a parsed URL
	 */
var J=function(){function t(t,e,n,r){void 0===e&&(e=null),void 0===n&&(n=s([])),void 0===r&&(r=s({})),this.path=t,this.child=e,this.auxiliary=n,this.params=r}/** @internal */
/** @internal */
return t.prototype.toString=function(){return this.path+this._matrixParamsToString()+this._auxToString()+this._childString()},t.prototype.segmentToString=function(){return this.path+this._matrixParamsToString()},t.prototype._auxToString=function(){return this.auxiliary.length>0?"("+this.auxiliary.map(function(t){return t.toString()}).join("//")+")":""},t.prototype._matrixParamsToString=function(){var t=b(this.params,";");return t.length>0?";"+t:""},t.prototype._childString=function(){return c(this.child)?"/"+this.child.toString():""},t}();W.Url=J;var Y=function(t){function e(e,n,r,i){void 0===n&&(n=null),void 0===r&&(r=s([])),void 0===i&&(i=null),t.call(this,e,n,r,i)}return X(e,t),e.prototype.toString=function(){return this.path+this._auxToString()+this._childString()+this._queryParamsToString()},e.prototype.segmentToString=function(){return this.path+this._queryParamsToString()},e.prototype._queryParamsToString=function(){return l(this.params)?"":"?"+b(this.params)},e}(J);W.RootUrl=Y,W.pathSegmentsToUrl=w;var K=L.create("^[^\\/\\(\\)\\?;=&#]+"),Z=L.create("^[^\\(\\)\\?;&#]+"),Q=function(){function t(){}
// segment + (aux segments) + (query params)
// segment + (matrix params) + (aux segments)
return t.prototype.peekStartsWith=function(t){return this._remaining.startsWith(t)},t.prototype.capture=function(t){if(!this._remaining.startsWith(t))throw new H('Expected "'+t+'".');this._remaining=this._remaining.substring(t.length)},t.prototype.parse=function(t){return this._remaining=t,""==t||"/"==t?new J(""):this.parseRoot()},t.prototype.parseRoot=function(){this.peekStartsWith("/")&&this.capture("/");var t=x(this._remaining);this.capture(t);var e=[];this.peekStartsWith("(")&&(e=this.parseAuxiliaryRoutes()),this.peekStartsWith(";")&&
// TODO: should these params just be dropped?
this.parseMatrixParams();var n=null;this.peekStartsWith("/")&&!this.peekStartsWith("//")&&(this.capture("/"),n=this.parseSegment());var r=null;return this.peekStartsWith("?")&&(r=this.parseQueryParams()),new Y(t,n,e,r)},t.prototype.parseSegment=function(){if(0==this._remaining.length)return null;this.peekStartsWith("/")&&this.capture("/");var t=x(this._remaining);this.capture(t);var e=null;this.peekStartsWith(";")&&(e=this.parseMatrixParams());var n=[];this.peekStartsWith("(")&&(n=this.parseAuxiliaryRoutes());var r=null;return this.peekStartsWith("/")&&!this.peekStartsWith("//")&&(this.capture("/"),r=this.parseSegment()),new J(t,r,n,e)},t.prototype.parseQueryParams=function(){var t={};for(this.capture("?"),this.parseQueryParam(t);this._remaining.length>0&&this.peekStartsWith("&");)this.capture("&"),this.parseQueryParam(t);return t},t.prototype.parseMatrixParams=function(){for(var t={};this._remaining.length>0&&this.peekStartsWith(";");)this.capture(";"),this.parseParam(t);return t},t.prototype.parseParam=function(t){var e=x(this._remaining);if(!l(e)){this.capture(e);var n=!0;if(this.peekStartsWith("=")){this.capture("=");var r=x(this._remaining);c(r)&&(n=r,this.capture(n))}t[e]=n}},t.prototype.parseQueryParam=function(t){var e=x(this._remaining);if(!l(e)){this.capture(e);var n=!0;if(this.peekStartsWith("=")){this.capture("=");var r=_(this._remaining);c(r)&&(n=r,this.capture(n))}t[e]=n}},t.prototype.parseAuxiliaryRoutes=function(){var t=[];for(this.capture("(");!this.peekStartsWith(")")&&this._remaining.length>0;)t.push(this.parseSegment()),this.peekStartsWith("//")&&this.capture("//");return this.capture(")"),t},t}();W.UrlParser=Q,W.parser=new Q;var tt=this&&this.__decorate||function(t,e,n,r){var i,o=arguments.length,a=o<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,n,r);else for(var u=t.length-1;u>=0;u--)(i=t[u])&&(a=(o<3?i(a):o>3?i(e,n,a):i(e,n))||a);return o>3&&a&&Object.defineProperty(e,n,a),a},et=function(){function t(t){this.name=t}return t=tt([u()],t)}();W.RouteLifecycleHook=et;var nt=function(){function t(t){this.fn=t}return t=tt([u()],t)}();W.CanActivate=nt,W.routerCanReuse=s(new et("routerCanReuse")),W.routerCanDeactivate=s(new et("routerCanDeactivate")),W.routerOnActivate=s(new et("routerOnActivate")),W.routerOnReuse=s(new et("routerOnReuse")),W.routerOnDeactivate=s(new et("routerOnDeactivate"));var rt=z("./lifecycle_annotations_impl");W.hasLifecycleHook=C,W.getCanActivateHook=S;var X=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},tt=this&&this.__decorate||function(t,e,n,r){var i,o=arguments.length,a=o<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,n,r);else for(var u=t.length-1;u>=0;u--)(i=t[u])&&(a=(o<3?i(a):o>3?i(e,n,a):i(e,n))||a);return o>3&&a&&Object.defineProperty(e,n,a),a},it=z("../route_definition");W.RouteDefinition=it.RouteDefinition;var ot=function(){function t(t){this.configs=t}return t=tt([u()],t)}();W.RouteConfig=ot;var at=function(){function t(t){var e=t.name,n=t.useAsDefault,r=t.path,i=t.regex,o=t.serializer,a=t.data;this.name=e,this.useAsDefault=n,this.path=r,this.regex=i,this.serializer=o,this.data=a}return t=tt([u()],t)}();W.AbstractRoute=at;/**
	 * `Route` is a type of {@link RouteDefinition} used to route a path to a component.
	 *
	 * It has the following properties:
	 * - `path` is a string that uses the route matcher DSL.
	 * - `component` a component type.
	 * - `name` is an optional `CamelCase` string representing the name of the route.
	 * - `data` is an optional property of any type representing arbitrary route metadata for the given
	 * route. It is injectable via {@link RouteData}.
	 * - `useAsDefault` is a boolean value. If `true`, the child route will be navigated to if no child
	 * route is specified during the navigation.
	 *
	 * ### Example
	 * ```
	 * import {RouteConfig, Route} from 'angular2/router';
	 *
	 * @RouteConfig([
	 *   new Route({path: '/home', component: HomeCmp, name: 'HomeCmp' })
	 * ])
	 * class MyApp {}
	 * ```
	 */
var ut=function(t){function e(e){var n=e.name,r=e.useAsDefault,i=e.path,o=e.regex,a=e.serializer,u=e.data,s=e.component;t.call(this,{name:n,useAsDefault:r,path:i,regex:o,serializer:a,data:u}),this.aux=null,this.component=s}return X(e,t),e=tt([u()],e)}(at);W.Route=ut;/**
	 * `AuxRoute` is a type of {@link RouteDefinition} used to define an auxiliary route.
	 *
	 * It takes an object with the following properties:
	 * - `path` is a string that uses the route matcher DSL.
	 * - `component` a component type.
	 * - `name` is an optional `CamelCase` string representing the name of the route.
	 * - `data` is an optional property of any type representing arbitrary route metadata for the given
	 * route. It is injectable via {@link RouteData}.
	 *
	 * ### Example
	 * ```
	 * import {RouteConfig, AuxRoute} from 'angular2/router';
	 *
	 * @RouteConfig([
	 *   new AuxRoute({path: '/home', component: HomeCmp})
	 * ])
	 * class MyApp {}
	 * ```
	 */
var st=function(t){function e(e){var n=e.name,r=e.useAsDefault,i=e.path,o=e.regex,a=e.serializer,u=e.data,s=e.component;t.call(this,{name:n,useAsDefault:r,path:i,regex:o,serializer:a,data:u}),this.component=s}return X(e,t),e=tt([u()],e)}(at);W.AuxRoute=st;/**
	 * `AsyncRoute` is a type of {@link RouteDefinition} used to route a path to an asynchronously
	 * loaded component.
	 *
	 * It has the following properties:
	 * - `path` is a string that uses the route matcher DSL.
	 * - `loader` is a function that returns a promise that resolves to a component.
	 * - `name` is an optional `CamelCase` string representing the name of the route.
	 * - `data` is an optional property of any type representing arbitrary route metadata for the given
	 * route. It is injectable via {@link RouteData}.
	 * - `useAsDefault` is a boolean value. If `true`, the child route will be navigated to if no child
	 * route is specified during the navigation.
	 *
	 * ### Example
	 * ```
	 * import {RouteConfig, AsyncRoute} from 'angular2/router';
	 *
	 * @RouteConfig([
	 *   new AsyncRoute({path: '/home', loader: () => Promise.resolve(MyLoadedCmp), name:
	 * 'MyLoadedCmp'})
	 * ])
	 * class MyApp {}
	 * ```
	 */
var ct=function(t){function e(e){var n=e.name,r=e.useAsDefault,i=e.path,o=e.regex,a=e.serializer,u=e.data,s=e.loader;t.call(this,{name:n,useAsDefault:r,path:i,regex:o,serializer:a,data:u}),this.aux=null,this.loader=s}return X(e,t),e=tt([u()],e)}(at);W.AsyncRoute=ct;/**
	 * `Redirect` is a type of {@link RouteDefinition} used to route a path to a canonical route.
	 *
	 * It has the following properties:
	 * - `path` is a string that uses the route matcher DSL.
	 * - `redirectTo` is an array representing the link DSL.
	 *
	 * Note that redirects **do not** affect how links are generated. For that, see the `useAsDefault`
	 * option.
	 *
	 * ### Example
	 * ```
	 * import {RouteConfig, Route, Redirect} from 'angular2/router';
	 *
	 * @RouteConfig([
	 *   new Redirect({path: '/', redirectTo: ['/Home'] }),
	 *   new Route({path: '/home', component: HomeCmp, name: 'Home'})
	 * ])
	 * class MyApp {}
	 * ```
	 */
var lt=function(t){function e(e){var n=e.name,r=e.useAsDefault,i=e.path,o=e.regex,a=e.serializer,u=e.data,s=e.redirectTo;t.call(this,{name:n,useAsDefault:r,path:i,regex:o,serializer:a,data:u}),this.redirectTo=s}return X(e,t),e=tt([u()],e)}(at);W.Redirect=lt;var ft=z("./route_config_decorator");W.normalizeRouteConfig=A,W.assertComponentExists=k;var ht=z("../../instruction"),pt=function(){function t(t,e){void 0===e&&(e=null),this._loader=t,/** @internal */
this._resolvedComponent=null,this.data=c(e)?new ht.RouteData(e):ht.BLANK_ROUTE_DATA}return t.prototype.resolveComponentType=function(){var t=this;return c(this._resolvedComponent)?this._resolvedComponent:this._resolvedComponent=this._loader().then(function(e){return t.componentType=e,e})},t}();W.AsyncRouteHandler=pt;var ht=z("../../instruction"),dt=function(){function t(t,e){this.componentType=t,/** @internal */
this._resolvedComponent=null,this._resolvedComponent=I.resolve(t),this.data=c(e)?new ht.RouteData(e):ht.BLANK_ROUTE_DATA}return t.prototype.resolveComponentType=function(){return this._resolvedComponent},t}();W.SyncRouteHandler=dt;var X=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},vt=z("../url_parser"),ht=z("../instruction"),gt=function(){function t(){}return t}();W.RouteMatch=gt;var mt=function(t){function e(e,n,r){t.call(this),this.instruction=e,this.remaining=n,this.remainingAux=r}return X(e,t),e}(gt);W.PathMatch=mt;var yt=function(t){function e(e,n){t.call(this),this.redirectTo=e,this.specificity=n}return X(e,t),e}(gt);W.RedirectMatch=yt;var $t=function(){function t(t,e){this._pathRecognizer=t,this.redirectTo=e,this.hash=this._pathRecognizer.hash}/**
	     * Returns `null` or a `ParsedUrl` representing the new path to match
	     */
return Object.defineProperty(t.prototype,"path",{get:function(){return this._pathRecognizer.toString()},set:function(t){throw new H("you cannot set the path of a RedirectRule directly")},enumerable:!0,configurable:!0}),t.prototype.recognize=function(t){var e=null;return c(this._pathRecognizer.matchUrl(t))&&(e=new yt(this.redirectTo,this._pathRecognizer.specificity)),I.resolve(e)},t.prototype.generate=function(t){throw new H("Tried to generate a redirect.")},t}();W.RedirectRule=$t;
// represents something like '/foo/:bar'
var bt=function(){
// TODO: cache component instruction instances by params and by ParsedUrl instance
function t(t,e,n){this._routePath=t,this.handler=e,this._routeName=n,this._cache=new Map,this.specificity=this._routePath.specificity,this.hash=this._routePath.hash,this.terminal=this._routePath.terminal}return Object.defineProperty(t.prototype,"path",{get:function(){return this._routePath.toString()},set:function(t){throw new H("you cannot set the path of a RouteRule directly")},enumerable:!0,configurable:!0}),t.prototype.recognize=function(t){var e=this,n=this._routePath.matchUrl(t);return l(n)?null:this.handler.resolveComponentType().then(function(t){var r=e._getInstruction(n.urlPath,n.urlParams,n.allParams);return new mt(r,n.rest,n.auxiliary)})},t.prototype.generate=function(t){var e=this._routePath.generateUrl(t),n=e.urlPath,r=e.urlParams;return this._getInstruction(n,vt.convertUrlParamsToArray(r),t)},t.prototype.generateComponentPathValues=function(t){return this._routePath.generateUrl(t)},t.prototype._getInstruction=function(t,e,n){if(l(this.handler.componentType))throw new H("Tried to get instruction before the type was loaded.");var r=t+"?"+e.join("&");if(this._cache.has(r))return this._cache.get(r);var i=new ht.ComponentInstruction(t,e,this.handler.data,this.handler.componentType,this.terminal,this.specificity,n,this._routeName);return this._cache.set(r,i),i},t}();W.RouteRule=bt;var wt=z("./rules"),xt=z("../route_config/route_config_impl"),_t=z("./route_handlers/async_route_handler"),Ct=z("./route_handlers/sync_route_handler"),St=z("./route_paths/param_route_path"),At=z("./route_paths/regex_route_path"),Et=function(){function t(){this.rulesByName=new Map,
// map from name to rule
this.auxRulesByName=new Map,
// map from starting path to rule
this.auxRulesByPath=new Map,
// TODO: optimize this into a trie
this.rules=[],
// the rule to use automatically when recognizing or generating from this rule set
this.defaultRule=null}/**
	     * Configure additional rules in this rule set from a route definition
	     * @returns {boolean} true if the config is terminal
	     */
/**
	     * Given a URL, returns a list of `RouteMatch`es, which are partial recognitions for some route.
	     */
return t.prototype.config=function(t){var e;if(c(t.name)&&t.name[0].toUpperCase()!=t.name[0]){var n=t.name[0].toUpperCase()+t.name.substring(1);throw new H('Route "'+t.path+'" with name "'+t.name+'" does not begin with an uppercase letter. Route names should be CamelCase like "'+n+'".')}if(t instanceof xt.AuxRoute){e=new Ct.SyncRouteHandler(t.component,t.data);var r=this._getRoutePath(t),i=new wt.RouteRule(r,e,t.name);return this.auxRulesByPath.set(r.toString(),i),c(t.name)&&this.auxRulesByName.set(t.name,i),i.terminal}var o=!1;if(t instanceof xt.Redirect){var a=this._getRoutePath(t),u=new wt.RedirectRule(a,t.redirectTo);return this._assertNoHashCollision(u.hash,t.path),this.rules.push(u),!0}t instanceof xt.Route?(e=new Ct.SyncRouteHandler(t.component,t.data),o=c(t.useAsDefault)&&t.useAsDefault):t instanceof xt.AsyncRoute&&(e=new _t.AsyncRouteHandler(t.loader,t.data),o=c(t.useAsDefault)&&t.useAsDefault);var s=this._getRoutePath(t),l=new wt.RouteRule(s,e,t.name);if(this._assertNoHashCollision(l.hash,t.path),o){if(c(this.defaultRule))throw new H("Only one route can be default");this.defaultRule=l}return this.rules.push(l),c(t.name)&&this.rulesByName.set(t.name,l),l.terminal},t.prototype.recognize=function(t){var e=[];
// handle cases where we are routing just to an aux route
// handle cases where we are routing just to an aux route
return this.rules.forEach(function(n){var r=n.recognize(t);c(r)&&e.push(r)}),0==e.length&&c(t)&&t.auxiliary.length>0?[I.resolve(new wt.PathMatch(null,null,t.auxiliary))]:e},t.prototype.recognizeAuxiliary=function(t){var e=this.auxRulesByPath.get(t.path);return c(e)?[e.recognize(t)]:[I.resolve(null)]},t.prototype.hasRoute=function(t){return this.rulesByName.has(t)},t.prototype.componentLoaded=function(t){return this.hasRoute(t)&&c(this.rulesByName.get(t).handler.componentType)},t.prototype.loadComponent=function(t){return this.rulesByName.get(t).handler.resolveComponentType()},t.prototype.generate=function(t,e){var n=this.rulesByName.get(t);return l(n)?null:n.generate(e)},t.prototype.generateAuxiliary=function(t,e){var n=this.auxRulesByName.get(t);return l(n)?null:n.generate(e)},t.prototype._assertNoHashCollision=function(t,e){this.rules.forEach(function(n){if(t==n.hash)throw new H("Configuration '"+e+"' conflicts with existing route '"+n.path+"'")})},t.prototype._getRoutePath=function(t){if(c(t.regex)){if(isFunction(t.serializer))return new At.RegexRoutePath(t.regex,t.serializer);throw new H("Route provides a regex property, '"+t.regex+"', but no serializer property")}if(c(t.path)){
// Auxiliary routes do not have a slash at the start
var e=t instanceof xt.AuxRoute&&t.path.startsWith("/")?t.path.substring(1):t.path;return new St.ParamRoutePath(e)}throw new H("Route must provide either a path or regex property")},t}();W.RuleSet=Et;var kt=function(){function t(t,e,n,r,i){this.urlPath=t,this.urlParams=e,this.allParams=n,this.auxiliary=r,this.rest=i}return t}();W.MatchedUrl=kt;var Tt=function(){function t(t,e){this.urlPath=t,this.urlParams=e}return t}();W.GeneratedUrl=Tt;var Ot=z("../../utils"),vt=z("../../url_parser"),Rt=z("./route_path"),jt=function(){function t(){this.name="",this.specificity="",this.hash="..."}return t.prototype.generate=function(t){return""},t.prototype.match=function(t){return!0},t}(),Nt=function(){function t(t){this.path=t,this.name="",this.specificity="2",this.hash=t}return t.prototype.match=function(t){return t==this.path},t.prototype.generate=function(t){return this.path},t}(),Pt=function(){function t(t){this.name=t,this.specificity="1",this.hash=":"}return t.prototype.match=function(t){return t.length>0},t.prototype.generate=function(t){if(!U.contains(t.map,this.name))throw new H("Route generator for '"+this.name+"' was not included in parameters passed.");return T(Ot.normalizeString(t.get(this.name)))},t.paramMatcher=/^:([^\/]+)$/g,t}(),Dt=function(){function t(t){this.name=t,this.specificity="0",this.hash="*"}return t.prototype.match=function(t){return!0},t.prototype.generate=function(t){return Ot.normalizeString(t.get(this.name))},t.wildcardMatcher=/^\*([^\/]+)$/g,t}(),Mt=function(){/**
	     * Takes a string representing the matcher DSL
	     */
function t(t){this.routePath=t,this.terminal=!0,this._assertValidPath(t),this._parsePathString(t),this.specificity=this._calculateSpecificity(),this.hash=this._calculateHash();var e=this._segments[this._segments.length-1];this.terminal=!(e instanceof jt)}return t.prototype.matchUrl=function(t){for(var e,n=t,r={},i=[],o=0;o<this._segments.length;o+=1){var a=this._segments[o];if(e=n,a instanceof jt)break;if(c(e)){
// the star segment consumes all of the remaining URL, including matrix params
if(a instanceof Dt){r[a.name]=e.toString(),i.push(e.toString()),n=null;break}if(i.push(e.path),a instanceof Pt)r[a.name]=O(e.path);else if(!a.match(e.path))return null;n=e.child}else if(!a.match(""))return null}if(this.terminal&&c(n))return null;var u=i.join("/"),s=[],l=[],f=r;if(c(e)){
// If this is the root component, read query params. Otherwise, read matrix params.
var h=t instanceof vt.RootUrl?t:e;c(h.params)?(f=U.merge(h.params,r),l=vt.convertUrlParamsToArray(h.params)):f=r,s=e.auxiliary}return new Rt.MatchedUrl(u,l,f,s,n)},t.prototype.generateUrl=function(t){for(var e=new Ot.TouchMap(t),n=[],r=0;r<this._segments.length;r++){var i=this._segments[r];i instanceof jt||n.push(i.generate(e))}var o=n.join("/"),a=e.getUnused(),u=a;return new Rt.GeneratedUrl(o,u)},t.prototype.toString=function(){return this.routePath},t.prototype._parsePathString=function(t){
// normalize route as not starting with a "/". Recognition will
// also normalize.
t.startsWith("/")&&(t=t.substring(1));var e=t.split("/");this._segments=[];for(var n=e.length-1,r=0;r<=n;r++){var i,o=e[r];if(c(i=L.firstMatch(Pt.paramMatcher,o)))this._segments.push(new Pt(i[1]));else if(c(i=L.firstMatch(Dt.wildcardMatcher,o)))this._segments.push(new Dt(i[1]));else if("..."==o){if(r<n)throw new H('Unexpected "..." before the end of the path for "'+t+'".');this._segments.push(new jt)}else this._segments.push(new Nt(o))}},t.prototype._calculateSpecificity=function(){
// The "specificity" of a path is used to determine which route is used when multiple routes
// match
// a URL. Static segments (like "/foo") are the most specific, followed by dynamic segments
// (like
// "/:id"). Star segments add no specificity. Segments at the start of the path are more
// specific
// than proceeding ones.
//
// The code below uses place values to combine the different types of segments into a single
// string that we can sort later. Each static segment is marked as a specificity of "2," each
// dynamic segment is worth "1" specificity, and stars are worth "0" specificity.
var t,e,n=this._segments.length;if(0==n)
// a single slash (or "empty segment" is as specific as a static segment
e+="2";else for(e="",t=0;t<n;t++)e+=this._segments[t].specificity;return e},t.prototype._calculateHash=function(){
// this function is used to determine whether a route config path like `/foo/:id` collides with
// `/foo/:name`
var t,e=this._segments.length,n=[];for(t=0;t<e;t++)n.push(this._segments[t].hash);return n.join("/")},t.prototype._assertValidPath=function(e){if(V.contains(e,"#"))throw new H('Path "'+e+'" should not include "#". Use "HashLocationStrategy" instead.');var n=L.firstMatch(t.RESERVED_CHARS,e);if(c(n))throw new H('Path "'+e+'" contains "'+n[0]+'" which is not allowed in a route config.')},t.RESERVED_CHARS=L.create("//|\\(|\\)|;|\\?|="),t}();W.ParamRoutePath=Mt;var It=/%/g,Lt=/\//g,qt=/\(/g,Ut=/\)/g,Ft=/;/g,Vt=/%3B/gi,Ht=/%29/gi,Bt=/%28/gi,Wt=/%2F/gi,zt=/%25/gi,Rt=z("./route_path"),Gt=function(){function t(t,e){this._reString=t,this._serializer=e,this.terminal=!0,this.specificity="2",this.hash=this._reString,this._regex=L.create(this._reString)}return t.prototype.matchUrl=function(t){var e=t.toString(),n={},r=L.matcher(this._regex,e),i=RegExpMatcherWrapper.next(r);if(l(i))return null;for(var o=0;o<i.length;o+=1)n[o.toString()]=i[o];return new Rt.MatchedUrl(e,[],n,[],null)},t.prototype.generateUrl=function(t){return this._serializer(t)},t.prototype.toString=function(){return this._reString},t}();W.RegexRoutePath=Gt;var X=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},Xt=function(){function t(t){this.params=t}return t.prototype.get=function(t){return normalizeBlank(U.get(this.params,t))},t}();W.RouteParams=Xt;/**
	 * `RouteData` is an immutable map of additional data you can configure in your {@link Route}.
	 *
	 * You can inject `RouteData` into the constructor of a component to use it.
	 *
	 * ### Example
	 *
	 * ```
	 * import {Component} from 'angular2/core';
	 * import {bootstrap} from 'angular2/platform/browser';
	 * import {Router, ROUTER_DIRECTIVES, ROUTER_PROVIDERS, RouteConfig, RouteData} from
	 * 'angular2/router';
	 *
	 * @Component({directives: [ROUTER_DIRECTIVES]})
	 * @RouteConfig([
	 *  {path: '/user/:id', component: UserCmp, name: 'UserCmp', data: {isAdmin: true}},
	 * ])
	 * class AppCmp {}
	 *
	 * @Component({
	 *   ...,
	 *   template: 'user: {{isAdmin}}'
	 * })
	 * class UserCmp {
	 *   string: isAdmin;
	 *   constructor(data: RouteData) {
	 *     this.isAdmin = data.get('isAdmin');
	 *   }
	 * }
	 *
	 * bootstrap(AppCmp, ROUTER_PROVIDERS);
	 * ```
	 */
var Jt=function(){function t(t){void 0===t&&(t=s({})),this.data=t}return t.prototype.get=function(t){return normalizeBlank(U.get(this.data,t))},t}();W.RouteData=Jt,W.BLANK_ROUTE_DATA=new Jt;/**
	 * `Instruction` is a tree of {@link ComponentInstruction}s with all the information needed
	 * to transition each component in the app to a given route, including all auxiliary routes.
	 *
	 * `Instruction`s can be created using {@link Router#generate}, and can be used to
	 * perform route changes with {@link Router#navigateByInstruction}.
	 *
	 * ### Example
	 *
	 * ```
	 * import {Component} from 'angular2/core';
	 * import {bootstrap} from 'angular2/platform/browser';
	 * import {Router, ROUTER_DIRECTIVES, ROUTER_PROVIDERS, RouteConfig} from 'angular2/router';
	 *
	 * @Component({directives: [ROUTER_DIRECTIVES]})
	 * @RouteConfig([
	 *  {...},
	 * ])
	 * class AppCmp {
	 *   constructor(router: Router) {
	 *     var instruction = router.generate(['/MyRoute']);
	 *     router.navigateByInstruction(instruction);
	 *   }
	 * }
	 *
	 * bootstrap(AppCmp, ROUTER_PROVIDERS);
	 * ```
	 */
var Yt=function(){function t(t,e,n){this.component=t,this.child=e,this.auxInstruction=n}/**
	     * converts the instruction into a URL string
	     */
/** @internal */
/**
	     * Returns a new instruction that shares the state of the existing instruction, but with
	     * the given child {@link Instruction} replacing the existing child.
	     */
/**
	     * If the final URL for the instruction is ``
	     */
// default instructions override these
// this is the non-root version (called recursively)
/** @internal */
/** @internal */
/** @internal */
/** @internal */
/** @internal */
return Object.defineProperty(t.prototype,"urlPath",{get:function(){return c(this.component)?this.component.urlPath:""},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"urlParams",{get:function(){return c(this.component)?this.component.urlParams:[]},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"specificity",{get:function(){var t="";return c(this.component)&&(t+=this.component.specificity),c(this.child)&&(t+=this.child.specificity),t},enumerable:!0,configurable:!0}),t.prototype.toRootUrl=function(){return this.toUrlPath()+this.toUrlQuery()},t.prototype._toNonRootUrl=function(){return this._stringifyPathMatrixAuxPrefixed()+(c(this.child)?this.child._toNonRootUrl():"")},t.prototype.toUrlQuery=function(){return this.urlParams.length>0?"?"+this.urlParams.join("&"):""},t.prototype.replaceChild=function(t){return new Kt(this.component,t,this.auxInstruction)},t.prototype.toUrlPath=function(){return this.urlPath+this._stringifyAux()+(c(this.child)?this.child._toNonRootUrl():"")},t.prototype.toLinkUrl=function(){return this.urlPath+this._stringifyAux()+(c(this.child)?this.child._toLinkUrl():"")+this.toUrlQuery()},t.prototype._toLinkUrl=function(){return this._stringifyPathMatrixAuxPrefixed()+(c(this.child)?this.child._toLinkUrl():"")},t.prototype._stringifyPathMatrixAuxPrefixed=function(){var t=this._stringifyPathMatrixAux();return t.length>0&&(t="/"+t),t},t.prototype._stringifyMatrixParams=function(){return this.urlParams.length>0?";"+this.urlParams.join(";"):""},t.prototype._stringifyPathMatrixAux=function(){return l(this.component)?"":this.urlPath+this._stringifyMatrixParams()+this._stringifyAux()},t.prototype._stringifyAux=function(){var t=[];return U.forEach(this.auxInstruction,function(e,n){t.push(e._stringifyPathMatrixAux())}),t.length>0?"("+t.join("//")+")":""},t}();W.Instruction=Yt;/**
	 * a resolved instruction has an outlet instruction for itself, but maybe not for...
	 */
var Kt=function(t){function e(e,n,r){t.call(this,e,n,r)}return X(e,t),e.prototype.resolveComponent=function(){return I.resolve(this.component)},e}(Yt);W.ResolvedInstruction=Kt;/**
	 * Represents a resolved default route
	 */
var Zt=function(t){function e(e,n){t.call(this,e,n,{})}/** @internal */
return X(e,t),e.prototype.toLinkUrl=function(){return""},e.prototype._toLinkUrl=function(){return""},e}(Kt);W.DefaultInstruction=Zt;/**
	 * Represents a component that may need to do some redirection or lazy loading at a later time.
	 */
var Qt=function(t){function e(e,n,r){void 0===n&&(n=""),void 0===r&&(r=s([])),t.call(this,null,null,{}),this._resolver=e,this._urlPath=n,this._urlParams=r}return X(e,t),Object.defineProperty(e.prototype,"urlPath",{get:function(){return c(this.component)?this.component.urlPath:c(this._urlPath)?this._urlPath:""},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"urlParams",{get:function(){return c(this.component)?this.component.urlParams:c(this._urlParams)?this._urlParams:[]},enumerable:!0,configurable:!0}),e.prototype.resolveComponent=function(){var t=this;return c(this.component)?I.resolve(this.component):this._resolver().then(function(e){return t.child=c(e)?e.child:null,t.component=c(e)?e.component:null})},e}(Yt);W.UnresolvedInstruction=Qt;var te=function(t){function e(e,n,r,i){t.call(this,e,n,r),this._specificity=i}return X(e,t),Object.defineProperty(e.prototype,"specificity",{get:function(){return this._specificity},enumerable:!0,configurable:!0}),e}(Kt);W.RedirectInstruction=te;/**
	 * A `ComponentInstruction` represents the route state for a single component.
	 *
	 * `ComponentInstructions` is a public API. Instances of `ComponentInstruction` are passed
	 * to route lifecycle hooks, like {@link CanActivate}.
	 *
	 * `ComponentInstruction`s are [hash consed](https://en.wikipedia.org/wiki/Hash_consing). You should
	 * never construct one yourself with "new." Instead, rely on {@link Router/RouteRecognizer} to
	 * construct `ComponentInstruction`s.
	 *
	 * You should not modify this object. It should be treated as immutable.
	 */
var ee=function(){/**
	     * @internal
	     */
function t(t,e,n,r,i,o,a,u){void 0===a&&(a=null),this.urlPath=t,this.urlParams=e,this.componentType=r,this.terminal=i,this.specificity=o,this.params=a,this.routeName=u,this.reuse=!1,this.routeData=c(n)?n:W.BLANK_ROUTE_DATA}return t}();W.ComponentInstruction=ee;var ne=z("angular2/core"),xt=z("./route_config/route_config_impl"),wt=z("./rules/rules"),re=z("./rules/rule_set"),ht=z("./instruction"),ie=z("./route_config/route_config_normalizer"),vt=z("./url_parser"),oe=I.resolve(null);
// A LinkItemArray is an array, which describes a set of routes
// The items in the array are found in groups:
// - the first item is the name of the route
// - the next items are:
//   - an object containing parameters
//   - or an array describing an aux route
// export type LinkRouteItem = string | Object;
// export type LinkItem = LinkRouteItem | Array<LinkRouteItem>;
// export type LinkItemArray = Array<LinkItem>;
/**
	 * Token used to bind the component with the top-level {@link RouteConfig}s for the
	 * application.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/iRUP8B5OUbxCWQ3AcIDm))
	 *
	 * ```
	 * import {Component} from 'angular2/core';
	 * import {
	 *   ROUTER_DIRECTIVES,
	 *   ROUTER_PROVIDERS,
	 *   RouteConfig
	 * } from 'angular2/router';
	 *
	 * @Component({directives: [ROUTER_DIRECTIVES]})
	 * @RouteConfig([
	 *  {...},
	 * ])
	 * class AppCmp {
	 *   // ...
	 * }
	 *
	 * bootstrap(AppCmp, [ROUTER_PROVIDERS]);
	 * ```
	 */
W.ROUTER_PRIMARY_COMPONENT=s(new ne.OpaqueToken("RouterPrimaryComponent"));/**
	 * The RouteRegistry holds route configurations for each component in an Angular app.
	 * It is responsible for creating Instructions from URLs, and generating URLs based on route and
	 * parameters.
	 */
var ae=function(){function t(t){this._rootComponent=t,this._rules=new Map}/**
	     * Given a component and a configuration object, add the route to this registry
	     */
/**
	     * Reads the annotations of a component and configures the registry based on them
	     */
/**
	     * Given a URL and a parent component, return the most specific instruction for navigating
	     * the application into the state specified by the url
	     */
/**
	     * Recognizes all parent-child routes, but creates unresolved auxiliary routes
	     */
/**
	     * Given a normalized list with component names and params like: `['user', {id: 3 }]`
	     * generates a url with a leading slash relative to the provided `parentComponent`.
	     *
	     * If the optional param `_aux` is `true`, then we generate starting at an auxiliary
	     * route boundary.
	     */
/*
	     * Internal helper that does not make any assertions about the beginning of the link DSL.
	     * `ancestorInstructions` are parents that will be cloned.
	     * `prevInstruction` is the existing instruction that would be replaced, but which might have
	     * aux routes that need to be cloned.
	     */
return t.prototype.config=function(t,e){e=ie.normalizeRouteConfig(e,this),
// this is here because Dart type guard reasons
e instanceof xt.Route?ie.assertComponentExists(e.component,e.path):e instanceof xt.AuxRoute&&ie.assertComponentExists(e.component,e.path);var n=this._rules.get(t);l(n)&&(n=new re.RuleSet,this._rules.set(t,n));var r=n.config(e);e instanceof xt.Route&&(r?P(e.component,e.path):this.configFromComponent(e.component))},t.prototype.configFromComponent=function(t){var e=this;if(h(t)&&!this._rules.has(t))
// Don't read the annotations from a type more than once –
// this prevents an infinite loop if a component routes recursively.
{var n=q.annotations(t);if(c(n))for(var r=0;r<n.length;r++){var i=n[r];if(i instanceof xt.RouteConfig){var o=i.configs;o.forEach(function(n){return e.config(t,n)})}}}},t.prototype.recognize=function(t,e){var n=vt.parser.parse(t);return this._recognize(n,[])},t.prototype._recognize=function(t,e,n){var r=this;void 0===n&&(n=!1);var i=F.last(e),o=c(i)?i.component.componentType:this._rootComponent,a=this._rules.get(o);if(l(a))return oe;
// Matches some beginning part of the given URL
var u=n?a.recognizeAuxiliary(t):a.recognize(t),s=u.map(function(t){return t.then(function(t){if(t instanceof wt.PathMatch){var n=e.length>0?[F.last(e)]:[],i=r._auxRoutesToUnresolved(t.remainingAux,n),o=new ht.ResolvedInstruction(t.instruction,null,i);if(l(t.instruction)||t.instruction.terminal)return o;var a=e.concat([o]);return r._recognize(t.remaining,a).then(function(t){
// redirect instructions are already absolute
return l(t)?null:t instanceof ht.RedirectInstruction?t:(o.child=t,o)})}if(t instanceof wt.RedirectMatch){var o=r.generate(t.redirectTo,e.concat([null]));return new ht.RedirectInstruction(o.component,o.child,o.auxInstruction,t.specificity)}})});return!l(t)&&""!=t.path||0!=u.length?I.all(s).then(j):I.resolve(this.generateDefault(o))},t.prototype._auxRoutesToUnresolved=function(t,e){var n=this,r={};return t.forEach(function(t){r[t.path]=new ht.UnresolvedInstruction(function(){return n._recognize(t,e,!0)})}),r},t.prototype.generate=function(t,e,n){void 0===n&&(n=!1);var r,i=R(t);
// The first segment should be either '.' (generate from parent) or '' (generate from root).
// When we normalize above, we strip all the slashes, './' becomes '.' and '/' becomes ''.
if(""==F.first(i))i.shift(),r=F.first(e),e=[];else if(r=e.length>0?e.pop():null,"."==F.first(i))i.shift();else if(".."==F.first(i))for(;".."==F.first(i);){if(e.length<=0)throw new H('Link "'+F.toJSON(t)+'" has too many "../" segments.');r=e.pop(),i=F.slice(i,1)}else{
// we must only peak at the link param, and not consume it
var o=F.first(i),a=this._rootComponent,u=null;if(e.length>1){var s=e[e.length-1],f=e[e.length-2];a=s.component.componentType,u=f.component.componentType}else 1==e.length&&(a=e[0].component.componentType,u=this._rootComponent);
// For a link with no leading `./`, `/`, or `../`, we look for a sibling and child.
// If both exist, we throw. Otherwise, we prefer whichever exists.
var h=this.hasRoute(o,a),p=c(u)&&this.hasRoute(o,u);if(p&&h){var d='Link "'+F.toJSON(t)+'" is ambiguous, use "./" or "../" to disambiguate.';throw new H(d)}p&&(r=e.pop())}if(""==i[i.length-1]&&i.pop(),i.length>0&&""==i[0]&&i.shift(),i.length<1){var d='Link "'+F.toJSON(t)+'" must include a route name.';throw new H(d)}
// we don't clone the first (root) element
for(var v=this._generate(i,e,r,n,t),g=e.length-1;g>=0;g--){var m=e[g];if(l(m))break;v=m.replaceChild(v)}return v},t.prototype._generate=function(t,e,n,r,i){var o=this;void 0===r&&(r=!1);var a=this._rootComponent,u=null,s={},h=F.last(e);if(c(h)&&c(h.component)&&(a=h.component.componentType),0==t.length){var g=this.generateDefault(a);if(l(g))throw new H('Link "'+F.toJSON(i)+'" does not resolve to a terminal instruction.');return g}
// for non-aux routes, we want to reuse the predecessor's existing primary and aux routes
// and only override routes for which the given link DSL provides
c(n)&&!r&&(s=U.merge(n.auxInstruction,s),u=n.component);var m=this._rules.get(a);if(l(m))throw new H('Component "'+v(a)+'" has no route config.');var y=0,$={};
// first, recognize the primary route if one is provided
if(y<t.length&&f(t[y])){var b=t[y];if(""==b||"."==b||".."==b)throw new H('"'+b+'/" is only allowed at the beginning of a link DSL.');if(y+=1,y<t.length){var w=t[y];p(w)&&!d(w)&&($=w,y+=1)}var x=(r?m.auxRulesByName:m.rulesByName).get(b);if(l(x))throw new H('Component "'+v(a)+'" has no route named "'+b+'".');
// Create an "unresolved instruction" for async routes
// we'll figure out the rest of the route when we resolve the instruction and
// perform a navigation
if(l(x.handler.componentType)){var _=x.generateComponentPathValues($);return new ht.UnresolvedInstruction(function(){return x.handler.resolveComponentType().then(function(a){return o._generate(t,e,n,r,i)})},_.urlPath,vt.convertUrlParamsToArray(_.urlParams))}u=r?m.generateAuxiliary(b,$):m.generate(b,$)}
// Next, recognize auxiliary instructions.
// If we have an ancestor instruction, we preserve whatever aux routes are active from it.
for(;y<t.length&&d(t[y]);){var C=[h],S=this._generate(t[y],C,null,!0,i);
// TODO: this will not work for aux routes with parameters or multiple segments
s[S.component.urlPath]=S,y+=1}var A=new ht.ResolvedInstruction(u,null,s);
// If the component is sync, we can generate resolved child route instructions
// If not, we'll resolve the instructions at navigation time
if(c(u)&&c(u.componentType)){var E=null;if(u.terminal)y>=t.length;else{var k=e.concat([A]),T=t.slice(y);E=this._generate(T,k,null,!1,i)}A.child=E}return A},t.prototype.hasRoute=function(t,e){var n=this._rules.get(e);return!l(n)&&n.hasRoute(t)},t.prototype.generateDefault=function(t){var e=this;if(l(t))return null;var n=this._rules.get(t);if(l(n)||l(n.defaultRule))return null;var r=null;if(c(n.defaultRule.handler.componentType)){var i=n.defaultRule.generate({});return n.defaultRule.terminal||(r=this.generateDefault(n.defaultRule.handler.componentType)),new ht.DefaultInstruction(i,r)}return new ht.UnresolvedInstruction(function(){return n.defaultRule.handler.resolveComponentType().then(function(n){return e.generateDefault(t)})})},t}();W.RouteRegistry=ae;var X=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},ue=z("./lifecycle/route_lifecycle_reflector"),se=I.resolve(!0),ce=I.resolve(!1),le=function(){function t(t,e,n,r){this.registry=t,this.parent=e,this.hostComponent=n,this.root=r,this.navigating=!1,/**
	         * The current `Instruction` for the router
	         */
this.currentInstruction=null,this._currentNavigation=se,this._outlet=null,this._auxRouters=new Map,this._subject=new g}/**
	     * Constructs a child router. You probably don't need to use this unless you're writing a reusable
	     * component.
	     */
/**
	     * Constructs a child router. You probably don't need to use this unless you're writing a reusable
	     * component.
	     */
/**
	     * Register an outlet to be notified of primary route changes.
	     *
	     * You probably don't need to use this unless you're writing a reusable component.
	     */
/**
	     * Unregister an outlet (because it was destroyed, etc).
	     *
	     * You probably don't need to use this unless you're writing a custom outlet implementation.
	     */
/**
	     * Register an outlet to notified of auxiliary route changes.
	     *
	     * You probably don't need to use this unless you're writing a reusable component.
	     */
/**
	     * Given an instruction, returns `true` if the instruction is currently active,
	     * otherwise `false`.
	     */
/**
	     * Dynamically update the routing configuration and trigger a navigation.
	     *
	     * ### Usage
	     *
	     * ```
	     * router.config([
	     *   { 'path': '/', 'component': IndexComp },
	     *   { 'path': '/user/:id', 'component': UserComp },
	     * ]);
	     * ```
	     */
/**
	     * Navigate based on the provided Route Link DSL. It's preferred to navigate with this method
	     * over `navigateByUrl`.
	     *
	     * ### Usage
	     *
	     * This method takes an array representing the Route Link DSL:
	     * ```
	     * ['./MyCmp', {param: 3}]
	     * ```
	     * See the {@link RouterLink} directive for more.
	     */
/**
	     * Navigate to a URL. Returns a promise that resolves when navigation is complete.
	     * It's preferred to navigate with `navigate` instead of this method, since URLs are more brittle.
	     *
	     * If the given URL begins with a `/`, router will navigate absolutely.
	     * If the given URL does not begin with `/`, the router will navigate relative to this component.
	     */
/**
	     * Navigate via the provided instruction. Returns a promise that resolves when navigation is
	     * complete.
	     */
/** @internal */
/** @internal */
/** @internal */
/*
	     * Recursively set reuse flags
	     */
/** @internal */
/**
	     * Updates this router and all descendant routers according to the given instruction
	     */
/** @internal */
/** @internal */
/**
	     * Subscribe to URL updates from the router
	     */
/**
	     * Removes the contents of this router's outlet and all descendant outlets
	     */
/**
	     * Given a URL, returns an instruction representing the component graph
	     */
/**
	     * Navigates to either the last URL successfully navigated to, or the last URL requested if the
	     * router has yet to successfully navigate.
	     */
/**
	     * Generate an `Instruction` based on the provided Route Link DSL.
	     */
return t.prototype.childRouter=function(t){return this._childRouter=new he(this,t)},t.prototype.auxRouter=function(t){return new he(this,t)},t.prototype.registerPrimaryOutlet=function(t){if(c(t.name))throw new H("registerPrimaryOutlet expects to be called with an unnamed outlet.");if(c(this._outlet))throw new H("Primary outlet is already registered.");return this._outlet=t,c(this.currentInstruction)?this.commit(this.currentInstruction,!1):se},t.prototype.unregisterPrimaryOutlet=function(t){if(c(t.name))throw new H("registerPrimaryOutlet expects to be called with an unnamed outlet.");this._outlet=null},t.prototype.registerAuxOutlet=function(t){var e=t.name;if(l(e))throw new H("registerAuxOutlet expects to be called with an outlet with a name.");var n=this.auxRouter(this.hostComponent);this._auxRouters.set(e,n),n._outlet=t;var r;return c(this.currentInstruction)&&c(r=this.currentInstruction.auxInstruction[e])?n.commit(r):se},t.prototype.isRouteActive=function(t){var e=this,n=this;if(l(this.currentInstruction))return!1;
// `instruction` corresponds to the root router
for(;c(n.parent)&&c(t.child);)n=n.parent,t=t.child;if(l(t.component)||l(this.currentInstruction.component)||this.currentInstruction.component.routeName!=t.component.routeName)return!1;var r=!0;return c(this.currentInstruction.component.params)&&U.forEach(t.component.params,function(t,n){e.currentInstruction.component.params[n]!==t&&(r=!1)}),r},t.prototype.config=function(t){var e=this;return t.forEach(function(t){e.registry.config(e.hostComponent,t)}),this.renavigate()},t.prototype.navigate=function(t){var e=this.generate(t);return this.navigateByInstruction(e,!1)},t.prototype.navigateByUrl=function(t,e){var n=this;return void 0===e&&(e=!1),this._currentNavigation=this._currentNavigation.then(function(r){return n.lastNavigationAttempt=t,n._startNavigating(),n._afterPromiseFinishNavigating(n.recognize(t).then(function(t){return!l(t)&&n._navigate(t,e)}))})},t.prototype.navigateByInstruction=function(t,e){var n=this;return void 0===e&&(e=!1),l(t)?ce:this._currentNavigation=this._currentNavigation.then(function(r){return n._startNavigating(),n._afterPromiseFinishNavigating(n._navigate(t,e))})},t.prototype._settleInstruction=function(t){var e=this;return t.resolveComponent().then(function(n){var r=[];return c(t.component)&&(t.component.reuse=!1),c(t.child)&&r.push(e._settleInstruction(t.child)),U.forEach(t.auxInstruction,function(t,n){r.push(e._settleInstruction(t))}),I.all(r)})},t.prototype._navigate=function(t,e){var n=this;return this._settleInstruction(t).then(function(e){return n._routerCanReuse(t)}).then(function(e){return n._canActivate(t)}).then(function(r){return!!r&&n._routerCanDeactivate(t).then(function(r){if(r)return n.commit(t,e).then(function(e){return n._emitNavigationFinish(t.toRootUrl()),!0})})})},t.prototype._emitNavigationFinish=function(t){B.callEmit(this._subject,t)},t.prototype._emitNavigationFail=function(t){B.callError(this._subject,t)},t.prototype._afterPromiseFinishNavigating=function(t){var e=this;return I.catchError(t.then(function(t){return e._finishNavigating()}),function(t){throw e._finishNavigating(),t})},t.prototype._routerCanReuse=function(t){var e=this;return l(this._outlet)?ce:l(t.component)?se:this._outlet.routerCanReuse(t.component).then(function(n){if(t.component.reuse=n,n&&c(e._childRouter)&&c(t.child))return e._childRouter._routerCanReuse(t.child)})},t.prototype._canActivate=function(t){return D(t,this.currentInstruction)},t.prototype._routerCanDeactivate=function(t){var e=this;if(l(this._outlet))return se;var n,r=null,i=!1,o=null;
// TODO: aux route lifecycle hooks
return c(t)&&(r=t.child,o=t.component,i=l(t.component)||t.component.reuse),n=i?se:this._outlet.routerCanDeactivate(o),n.then(function(t){return 0!=t&&(!c(e._childRouter)||e._childRouter._routerCanDeactivate(r))})},t.prototype.commit=function(t,e){var n=this;void 0===e&&(e=!1),this.currentInstruction=t;var r=se;if(c(this._outlet)&&c(t.component)){var i=t.component;r=i.reuse?this._outlet.reuse(i):this.deactivate(t).then(function(t){return n._outlet.activate(i)}),c(t.child)&&(r=r.then(function(e){if(c(n._childRouter))return n._childRouter.commit(t.child)}))}var o=[];return this._auxRouters.forEach(function(e,n){c(t.auxInstruction[n])&&o.push(e.commit(t.auxInstruction[n]))}),r.then(function(t){return I.all(o)})},t.prototype._startNavigating=function(){this.navigating=!0},t.prototype._finishNavigating=function(){this.navigating=!1},t.prototype.subscribe=function(t,e){return B.subscribe(this._subject,t,e)},t.prototype.deactivate=function(t){var e=this,n=null,r=null;c(t)&&(n=t.child,r=t.component);var i=se;
// TODO: handle aux routes
return c(this._childRouter)&&(i=this._childRouter.deactivate(n)),c(this._outlet)&&(i=i.then(function(t){return e._outlet.deactivate(r)})),i},t.prototype.recognize=function(t){var e=this._getAncestorInstructions();return this.registry.recognize(t,e)},t.prototype._getAncestorInstructions=function(){for(var t=[this.currentInstruction],e=this;c(e=e.parent);)t.unshift(e.currentInstruction);return t},t.prototype.renavigate=function(){return l(this.lastNavigationAttempt)?this._currentNavigation:this.navigateByUrl(this.lastNavigationAttempt)},t.prototype.generate=function(t){var e=this._getAncestorInstructions();return this.registry.generate(t,e)},t}();W.Router=le;var fe=function(t){function e(e,n,r){var i=this;t.call(this,e,null,r),this.root=this,this._location=n,this._locationSub=this._location.subscribe(function(t){
// we call recognize ourselves
i.recognize(t.url).then(function(e){c(e)?i.navigateByInstruction(e,c(t.pop)).then(function(n){
// this is a popstate event; no need to change the URL
if(!c(t.pop)||"hashchange"==t.type){var r=e.toUrlPath(),o=e.toUrlQuery();r.length>0&&"/"!=r[0]&&(r="/"+r),
// We've opted to use pushstate and popState APIs regardless of whether you
// an app uses HashLocationStrategy or PathLocationStrategy.
// However, apps that are migrating might have hash links that operate outside
// angular to which routing must respond.
// Therefore we know that all hashchange events occur outside Angular.
// To support these cases where we respond to hashchanges and redirect as a
// result, we need to replace the top item on the stack.
"hashchange"==t.type?e.toRootUrl()!=i._location.path()&&i._location.replaceState(r,o):i._location.go(r,o)}}):i._emitNavigationFail(t.url)})}),this.registry.configFromComponent(r),this.navigateByUrl(n.path())}return X(e,t),e.prototype.commit=function(e,n){var r=this;void 0===n&&(n=!1);var i=e.toUrlPath(),o=e.toUrlQuery();i.length>0&&"/"!=i[0]&&(i="/"+i);var a=t.prototype.commit.call(this,e);return n||(a=a.then(function(t){r._location.go(i,o)})),a},e.prototype.dispose=function(){c(this._locationSub)&&(B.dispose(this._locationSub),this._locationSub=null)},e}(le);W.RootRouter=fe;var he=function(t){function e(e,n){t.call(this,e.registry,e,n,e.root),this.parent=e}return X(e,t),e.prototype.navigateByUrl=function(t,e){
// Delegate navigation to the root router
return void 0===e&&(e=!1),this.parent.navigateByUrl(t,e)},e.prototype.navigateByInstruction=function(t,e){
// Delegate navigation to the root router
return void 0===e&&(e=!1),this.parent.navigateByInstruction(t,e)},e}(le);
//TODO: this is a hack to replace the exiting implementation at run-time
W.getCanActivateHook=function(t){var e=M(t);return e.$canActivate&&function(t,n){return i.invoke(e.$canActivate,null,{$nextInstruction:t,$prevInstruction:n})}},
// This hack removes assertions about the type of the "component"
// property in a route config
W.assertComponentExists=function(){},angular.stringifyInstruction=function(t){return t.toRootUrl()};var ae=W.RouteRegistry,fe=W.RootRouter;
// Override this method to actually get hold of the child routes
ae.prototype.configFromComponent=function(t){var e=this;if(f(t)){
// Don't read the annotations component a type more than once –
// this prevents an infinite loop if a component routes recursively.
if(this._rules.has(t))return;var n=M(t);angular.isArray(n.$routeConfig)&&n.$routeConfig.forEach(function(n){var r=n.loader;c(r)&&(n=angular.extend({},n,{loader:i.invoke(r)})),e.config(t,n)})}};var pe=new ae(o),de=new m,ve=new fe(pe,de,o);return r.$watch(function(){return e.url()},function(t){ve.lastNavigationAttempt!==t&&ve.navigateByUrl(t)}),ve.subscribe(function(){r.$broadcast("$routeChangeSuccess",{})}),ve}/*
	 * A module for adding new a routing system Angular 1.
	 */
angular.module("ngComponentRouter",[]).directive("ngOutlet",["$animate","$q","$rootRouter",t]).directive("ngOutlet",["$compile",e]).directive("ngLink",["$rootRouter","$parse",r]).directive("$router",["$q",n]),angular.module("ngComponentRouter").value("$route",null).value("$routerRootComponent",new Object).provider("$locationHashPrefix",["$locationProvider",o]).factory("$rootRouter",["$q","$location","$browser","$rootScope","$injector","$routerRootComponent","$locationHashPrefix",a])}()},/* 9 */
/***/
function(t,e){"use strict";function n(t){t.html5Mode(!0)}e.locationConfig=n},/* 10 */
/***/
function(t,e){"use strict";var n=function(){function t(){}return t}();e.WeatherDto=n;var r=function(){function t(){}return t}();e.TemperatureDto=r;var i=function(){function t(){}return t}();e.WeatherDataDto=i;var o=function(){function t(){}return t}();e.CityDto=o;var a=function(){function t(){}return t}();e.WeatherListDto=a;var u=function(){function t(t,e){this.$http=t,this.$q=e}return t.prototype.getWeathers=function(t,e){var n=this.$q.defer();return this.$http({method:"GET",url:"http://api.openweathermap.org/data/2.5/forecast/daily?units=metric&APPID=76cd4f565715d0d1bde33119cde8fc92",params:{id:t,cnt:e}}).then(function(t){n.resolve(t.data)})["catch"](function(t){n.reject(t)}),n.promise},t}();e.WeathersService=u},/* 11 */
/***/
function(t,e){"use strict";function n(){return function(t){return"http://openweathermap.org/img/w/"+t+".png"}}e.WeatherIconFilter=n},/* 12 */
/***/
function(t,e,n){"use strict";function r(){return{template:n(13)}}e.home=r},/* 13 */
/***/
function(t,e){t.exports='<div class="container">\n    <div class="row">\n        <div class="col-xs-12">\n            <h2>Home</h2>\n\n            <ul>\n                <li>\n                    <a ng-link="[\'/Weathers\']">Weathers</a>\n                </li>\n                <li>\n                    <a ng-link="[\'/About\']">About</a>\n                </li>\n            </ul>\n\n        </div>\n    </div>\n</div>\n<!-- /.container -->\n'},/* 14 */
/***/
function(t,e,n){"use strict";function r(){return{template:n(15)}}e.about=r},/* 15 */
/***/
function(t,e){t.exports='<div class="container">\n    <div class="row">\n        <div class="col-xs-12">\n            <h2>About</h2>\n\n            About的なページ\n\n        </div>\n    </div>\n</div>\n<!-- /.container -->\n'},/* 16 */
/***/
function(t,e,n){"use strict";function r(){return{template:n(17),$routeConfig:[{path:"/",name:"WeatherList",component:"weatherList",useAsDefault:!0},{path:"/:id",name:"WeatherDetail",component:"weatherDetail"}]}}e.weathers=r},/* 17 */
/***/
function(t,e){t.exports='<div class="container">\n    <div class="row">\n        <div class="col-xs-12">\n            <h2>Weathers</h2>\n\n            <ng-outlet></ng-outlet>\n\n        </div>\n    </div>\n</div>\n<!-- /.container -->\n'},/* 18 */
/***/
function(t,e,n){"use strict";function r(){return{template:n(20),controller:o}}var i=n(19);e.weatherList=r;var o=function(){function t(t,e){var n=this;this.weathersService=t,this.$q=e,this.weathers=new Array;for(var r=new Array,o=0;o<i.Environment.cities.length;o++)r.push(this.weathersService.getWeathers(i.Environment.cities[o],1));this.$q.all(r).then(function(t){for(var e=0;e<t.length;e++)n.weathers.push(t[e])})}return t}();e.WeatherListController=o},/* 19 */
/***/
function(t,e){"use strict";var n=function(){function t(){}return t.cities=["1852003","1849429","1856215","1850147"],t}();e.Environment=n},/* 20 */
/***/
function(t,e){t.exports='<table class="table">\n    <thead>\n        <tr>\n            <th>地域</th>\n            <th>天気</th>\n            <th>気温（℃）</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr ng-repeat="weather in $ctrl.weathers">\n            <td><a ng-link="[\'WeatherDetail\', {id: weather.city.id}]">{{weather.city.name}}</a></td>\n            <td>\n                <div><img ng-src="{{ weather.list[0].weather[0].icon | weatherIconFilter }}"></div>\n                <div>{{weather.list[0].weather[0].description}}</div>\n            </td>\n            <td>\n                <div>{{weather.list[0].temp.max}}</div>\n                <div>{{weather.list[0].temp.min}}</div>\n            </td>\n        </tr>\n    </tbody>\n</table>\n'},/* 21 */
/***/
function(t,e,n){"use strict";function r(){return{template:n(22),controller:i}}e.weatherDetail=r;var i=function(){function t(t,e){this.weathersService=t,this.$q=e}return t.prototype.$routerOnActivate=function(t){var e=this,n=t.params.id,r=this.weathersService.getWeathers(n,3);r.then(function(t){e.weathers=t})},t}();e.WeatherDetailController=i},/* 22 */
/***/
function(t,e){t.exports='<a ng-link="[\'WeatherList\']">&lt; listに戻る</a>\n\n<h3>{{$ctrl.weathers.city.name}}の天気</h3>\n\n<table class="table">\n    <thead>\n        <tr>\n            <th>日付</th>\n            <th>天気</th>\n            <th>気温（℃）</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr ng-repeat="weather in $ctrl.weathers.list">\n            <td>\n                <div>{{weather.dt * 1000 | date:\'yyyy/MM/dd\'}}</div>\n            </td>\n            <td>\n                <div><img ng-src="{{ weather.weather[0].icon | weatherIconFilter }}"></div>\n                <div>{{weather.weather[0].description}}</div>\n            </td>\n            <td>\n                <div>{{weather.temp.max}}</div>\n                <div>{{weather.temp.min}}</div>\n            </td>\n        </tr>\n    </tbody>\n</table>\n'},/* 23 */
/***/
function(t,e,n){
// style-loader: Adds some css to the DOM by adding a <style> tag
// load the styles
var r=n(24);"string"==typeof r&&(r=[[t.id,r,""]]);
// add the styles to the DOM
n(26)(r,{});r.locals&&(t.exports=r.locals)},/* 24 */
/***/
function(t,e,n){e=t.exports=n(25)(),
// imports
// module
e.push([t.id,".ng-cloak,.x-ng-cloak,[data-ng-cloak],[ng-cloak],[ng\\:cloak],[x-ng-cloak]{display:none!important}",""])},/* 25 */
/***/
function(t,e){/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
// css base code, injected by the css-loader
t.exports=function(){var t=[];
// return the list of modules as css string
// import a list of modules into the list
return t.toString=function(){for(var t=[],e=0;e<this.length;e++){var n=this[e];n[2]?t.push("@media "+n[2]+"{"+n[1]+"}"):t.push(n[1])}return t.join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},i=0;i<this.length;i++){var o=this[i][0];"number"==typeof o&&(r[o]=!0)}for(i=0;i<e.length;i++){var a=e[i];
// skip already imported module
// this implementation is not 100% perfect for weird media query combinations
//  when a module is imported multiple times with different media queries.
//  I hope this will never occur (Hey this way we have smaller bundles)
"number"==typeof a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),t.push(a))}},t}},/* 26 */
/***/
function(t,e,n){function r(t,e){for(var n=0;n<t.length;n++){var r=t[n],i=p[r.id];if(i){i.refs++;for(var o=0;o<i.parts.length;o++)i.parts[o](r.parts[o]);for(;o<r.parts.length;o++)i.parts.push(c(r.parts[o],e))}else{for(var a=[],o=0;o<r.parts.length;o++)a.push(c(r.parts[o],e));p[r.id]={id:r.id,refs:1,parts:a}}}}function i(t){for(var e=[],n={},r=0;r<t.length;r++){var i=t[r],o=i[0],a=i[1],u=i[2],s=i[3],c={css:a,media:u,sourceMap:s};n[o]?n[o].parts.push(c):e.push(n[o]={id:o,parts:[c]})}return e}function o(t,e){var n=g(),r=$[$.length-1];if("top"===t.insertAt)r?r.nextSibling?n.insertBefore(e,r.nextSibling):n.appendChild(e):n.insertBefore(e,n.firstChild),$.push(e);else{if("bottom"!==t.insertAt)throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");n.appendChild(e)}}function a(t){t.parentNode.removeChild(t);var e=$.indexOf(t);e>=0&&$.splice(e,1)}function u(t){var e=document.createElement("style");return e.type="text/css",o(t,e),e}function s(t){var e=document.createElement("link");return e.rel="stylesheet",o(t,e),e}function c(t,e){var n,r,i;if(e.singleton){var o=y++;n=m||(m=u(e)),r=l.bind(null,n,o,!1),i=l.bind(null,n,o,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=s(e),r=h.bind(null,n),i=function(){a(n),n.href&&URL.revokeObjectURL(n.href)}):(n=u(e),r=f.bind(null,n),i=function(){a(n)});return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else i()}}function l(t,e,n,r){var i=n?"":r.css;if(t.styleSheet)t.styleSheet.cssText=b(e,i);else{var o=document.createTextNode(i),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(o,a[e]):t.appendChild(o)}}function f(t,e){var n=e.css,r=e.media;if(r&&t.setAttribute("media",r),t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}function h(t,e){var n=e.css,r=e.sourceMap;r&&(
// http://stackoverflow.com/a/26603875
n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */");var i=new Blob([n],{type:"text/css"}),o=t.href;t.href=URL.createObjectURL(i),o&&URL.revokeObjectURL(o)}/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
var p={},d=function(t){var e;return function(){return"undefined"==typeof e&&(e=t.apply(this,arguments)),e}},v=d(function(){return/msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase())}),g=d(function(){return document.head||document.getElementsByTagName("head")[0]}),m=null,y=0,$=[];t.exports=function(t,e){e=e||{},
// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
// tags it will allow on a page
"undefined"==typeof e.singleton&&(e.singleton=v()),
// By default, add <style> tags to the bottom of <head>.
"undefined"==typeof e.insertAt&&(e.insertAt="bottom");var n=i(t);return r(n,e),function(t){for(var o=[],a=0;a<n.length;a++){var u=n[a],s=p[u.id];s.refs--,o.push(s)}if(t){var c=i(t);r(c,e)}for(var a=0;a<o.length;a++){var s=o[a];if(0===s.refs){for(var l=0;l<s.parts.length;l++)s.parts[l]();delete p[s.id]}}}};var b=function(){var t=[];return function(e,n){return t[e]=n,t.filter(Boolean).join("\n")}}()},/* 27 */
/***/
function(t,e){t.exports='<header>\n    <div class="container">\n        <div class="row">\n            <div class="col-xs-12">\n                <a ng-link="[\'/Home\']"><h1>SAMPLE APP</h1></a>\n            </div>\n        </div>\n    </div>\n    <!-- /.container -->\n</header>\n\n<div class="main">\n  <ng-outlet></ng-outlet>\n</div>\n<!-- /.main -->\n\n<footer></footer>\n'}]);
//# sourceMappingURL=build.js.map